<?xml version="1.0"?>
<doc>
    <assembly>
        <name>K4AdotNet</name>
    </assembly>
    <members>
        <member name="T:K4AdotNet.BodyTracking.BodyFrame">
            <summary>Azure Kinect body tracking frame.</summary>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyFrame.Dispose">
            <summary>
            Call this method to free unmanaged resources associated with current instance.
            </summary>
            <remarks><para>
            Under the hood, reference counter is decremented on this call. When the references reach zero the unmanaged resources are destroyed.
            (Multiple objects of <see cref="T:K4AdotNet.BodyTracking.BodyFrame"/> can reference one and the same body frame. For details see <see cref="M:K4AdotNet.BodyTracking.BodyFrame.DuplicateReference"/>.)
            </para><para>
            Can be called multiple times but event <see cref="E:K4AdotNet.BodyTracking.BodyFrame.Disposed"/> will be raised only once.
            </para></remarks>
            <seealso cref="E:K4AdotNet.BodyTracking.BodyFrame.Disposed"/>
            <seealso cref="P:K4AdotNet.BodyTracking.BodyFrame.IsDisposed"/>
            <seealso cref="M:K4AdotNet.BodyTracking.BodyFrame.DuplicateReference"/>
        </member>
        <member name="P:K4AdotNet.BodyTracking.BodyFrame.IsDisposed">
            <summary>Gets a value indicating whether the object has been disposed of.</summary>
            <seealso cref="M:K4AdotNet.BodyTracking.BodyFrame.Dispose"/>
        </member>
        <member name="E:K4AdotNet.BodyTracking.BodyFrame.Disposed">
            <summary>Raised on object disposing (only once).</summary>
            <seealso cref="M:K4AdotNet.BodyTracking.BodyFrame.Dispose"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyFrame.DuplicateReference">
            <summary>Creates new reference to the same unmanaged body frame object.</summary>
            <returns>New object that references exactly to the same underlying unmanaged object as original one. Not <see langword="null"/>.</returns>
            <remarks>It helps to manage underlying object lifetime and to access capture from different threads and different components of application.</remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
            <seealso cref="M:K4AdotNet.BodyTracking.BodyFrame.Dispose"/>
        </member>
        <member name="P:K4AdotNet.BodyTracking.BodyFrame.DeviceTimestamp">
            <summary>Gets the body frame's device timestamp.</summary>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="P:K4AdotNet.BodyTracking.BodyFrame.Timestamp">
            <summary>Deprecated in version 0.9.2 of Body Tracking SDK. Please use <see cref="P:K4AdotNet.BodyTracking.BodyFrame.DeviceTimestamp"/> property instead of this one.</summary>
        </member>
        <member name="P:K4AdotNet.BodyTracking.BodyFrame.BodyCount">
            <summary>Gets the number of detected bodies.</summary>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="P:K4AdotNet.BodyTracking.BodyFrame.Capture">
            <summary>Get the original capture that was used to calculate this body frame.</summary>
            <remarks><para>
            Called when the user has received a body frame handle and wants to access the data contained in it.
            </para><para>
            It is highly recommended to call <see cref="M:K4AdotNet.Sensor.Capture.Dispose"/> for returned capture explicitly:
            <code>
            using (var capture = bodyFrame.Capture)
            {
                // working with capture
            }
            </code>
            But <see cref="T:K4AdotNet.BodyTracking.BodyFrame"/> object automatically tracks all <see cref="T:K4AdotNet.Sensor.Capture"/> objects it returned. And will call <see cref="M:K4AdotNet.Sensor.Capture.Dispose"/>
            for all of them if client code didn't it.
            </para><para>
            For this reason, if you want to keep returned <see cref="T:K4AdotNet.Sensor.Capture"/> for longer life time than life time of <see cref="T:K4AdotNet.BodyTracking.BodyFrame"/> object,
            use <see cref="M:K4AdotNet.Sensor.Capture.DuplicateReference"/> method.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="F:K4AdotNet.BodyTracking.BodyFrame.NotABodyIndexMapPixelValue">
            <summary>Non-a-body value on index body map.</summary>
            <seealso cref="P:K4AdotNet.BodyTracking.BodyFrame.BodyIndexMap"/>
        </member>
        <member name="P:K4AdotNet.BodyTracking.BodyFrame.BodyIndexMap">
            <summary>Gets the body index map: image in <see cref="F:K4AdotNet.Sensor.ImageFormat.Custom8"/> format, one byte per pixel, pixel value: zero-based index of a detected body or <see cref="F:K4AdotNet.BodyTracking.BodyFrame.NotABodyIndexMapPixelValue"/> for background pixels.</summary>
            <remarks><para>
            Body Index map is the body instance segmentation map. Each pixel maps to the corresponding pixel in the
            depth image or the IR image. The value for each pixel is byte and represents which body the pixel belongs to. It can be either
            background (value <see cref="F:K4AdotNet.BodyTracking.BodyFrame.NotABodyIndexMapPixelValue"/>) or the zero-based index of a detected body.
            </para><para>
            It is highly recommended to call <see cref="M:K4AdotNet.Sensor.Image.Dispose"/> for returned image explicitly:
            <code>
            using (var bodyIndexMap = bodyFrame.BodyIndexMap)
            {
                // working with body index map
            }
            </code>
            But <see cref="T:K4AdotNet.BodyTracking.BodyFrame"/> object automatically tracks all <see cref="T:K4AdotNet.Sensor.Image"/> objects it returned. And will call <see cref="M:K4AdotNet.Sensor.Image.Dispose"/>
            for all of them if client code didn't it.
            </para><para>
            For this reason, if you want to keep returned <see cref="T:K4AdotNet.Sensor.Image"/> for longer life time than life time of <see cref="T:K4AdotNet.BodyTracking.BodyFrame"/> object,
            use <see cref="M:K4AdotNet.Sensor.Image.DuplicateReference"/> method.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyFrame.GetBodySkeleton(System.Int32,K4AdotNet.BodyTracking.Skeleton@)">
            <summary>Gets the joint information for a particular person index.</summary>
            <param name="bodyIndex">Zero-based index of a tracked body. Must me positive number. Must be less than <see cref="P:K4AdotNet.BodyTracking.BodyFrame.BodyCount"/>.</param>
            <param name="skeleton">Output: this contains the body skeleton information.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bodyIndex"/> is less than zero or greater than or equal to <see cref="P:K4AdotNet.BodyTracking.BodyFrame.BodyCount"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
            <seealso cref="T:K4AdotNet.BodyTracking.Skeleton"/>
            <seealso cref="T:K4AdotNet.BodyTracking.JointType"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyFrame.GetBodyId(System.Int32)">
            <summary>Gets the body id for a particular person index.</summary>
            <param name="bodyIndex">Zero-based index of a tracked body. Must me positive number. Must be less than <see cref="P:K4AdotNet.BodyTracking.BodyFrame.BodyCount"/>.</param>
            <returns>Returns the body id. In case of failures will return <see cref="F:K4AdotNet.BodyTracking.BodyId.Invalid"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bodyIndex"/> is less than zero or greater than or equal to <see cref="P:K4AdotNet.BodyTracking.BodyFrame.BodyCount"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyFrame.Equals(K4AdotNet.BodyTracking.BodyFrame)">
            <summary>Two body frames are equal when they reference to one and the same unmanaged object.</summary>
            <param name="bodyFrame">Another body frame to be compared with this one. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if both body frames reference to one and the same unmanaged object.</returns>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyFrame.Equals(System.Object)">
            <summary>Two body frames are equal when they reference to one and the same unmanaged object.</summary>
            <param name="obj">Some object to be compared with this one. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is also <see cref="T:K4AdotNet.BodyTracking.BodyFrame"/> and they both reference to one and the same unmanaged object.</returns>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyFrame.GetHashCode">
            <summary>Uses underlying handle as hash code.</summary>
            <returns>Hash code. Consistent with overridden equality.</returns>
            <seealso cref="M:K4AdotNet.BodyTracking.BodyFrame.Equals(K4AdotNet.BodyTracking.BodyFrame)"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyFrame.op_Equality(K4AdotNet.BodyTracking.BodyFrame,K4AdotNet.BodyTracking.BodyFrame)">
            <summary>To be consistent with <see cref="M:K4AdotNet.BodyTracking.BodyFrame.Equals(K4AdotNet.BodyTracking.BodyFrame)"/>.</summary>
            <param name="left">Left part of operator. Can be <see langword="null"/>.</param>
            <param name="right">Right part of operator. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> equals to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.BodyTracking.BodyFrame.Equals(K4AdotNet.BodyTracking.BodyFrame)"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyFrame.op_Inequality(K4AdotNet.BodyTracking.BodyFrame,K4AdotNet.BodyTracking.BodyFrame)">
            <summary>To be consistent with <see cref="M:K4AdotNet.BodyTracking.BodyFrame.Equals(K4AdotNet.BodyTracking.BodyFrame)"/>.</summary>
            <param name="left">Left part of operator. Can be <see langword="null"/>.</param>
            <param name="right">Right part of operator. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.BodyTracking.BodyFrame.Equals(K4AdotNet.BodyTracking.BodyFrame)"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyFrame.ToString">
            <summary>Convenient (for debugging needs, first of all) string representation of object as an address of unmanaged object in memory.</summary>
            <returns><c>{HandleTypeName}#{Address}</c></returns>
        </member>
        <member name="T:K4AdotNet.BodyTracking.BodyId">
            <summary>Tracked body ID.</summary>
            <remarks>
            Actually, this structure is an simple wrapper of <see cref="T:System.Int32"/> type.
            And <see cref="T:K4AdotNet.BodyTracking.BodyId"/> value can be smoothly converted to/from <see cref="T:System.Int32"/> values for convenience of usage in your code.
            </remarks>
        </member>
        <member name="F:K4AdotNet.BodyTracking.BodyId.Value">
            <summary>Value of ID. Should be of <see cref="T:System.UInt32"/> type but for CLS-compatibility it is declared is <see cref="T:System.Int32"/>.</summary>
            <remarks><para>
            There is special value:
            -1 (that is <see cref="F:System.UInt32.MaxValue"/>) - invalid body ID (see <see cref="F:K4AdotNet.BodyTracking.BodyId.Invalid"/>).
            </para><para>
            This structure is an wrapper around this value.
            </para></remarks>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyId.#ctor(System.Int32)">
            <summary>Creates instance from integer value.</summary>
            <param name="value">Body ID.</param>
        </member>
        <member name="P:K4AdotNet.BodyTracking.BodyId.IsValid">
            <summary>Is this ID valid?</summary>
            <seealso cref="F:K4AdotNet.BodyTracking.BodyId.Invalid"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyId.Equals(K4AdotNet.BodyTracking.BodyId)">
            <summary>Equality exactly like <see cref="T:System.Int32"/> type has.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns><see langword="true"/> if values are equal.</returns>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyId.Equals(System.Int32)">
            <summary>Equality exactly like <see cref="T:System.Int32"/> type has.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns><see langword="true"/> if values are equal.</returns>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyId.Equals(System.Object)">
            <summary>Overloads <see cref="M:System.Object.Equals(System.Object)"/> to be consistent with <see cref="M:K4AdotNet.BodyTracking.BodyId.Equals(K4AdotNet.BodyTracking.BodyId)"/>.</summary>
            <param name="obj">Object to be compared with this instance.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> can be cast to <see cref="T:K4AdotNet.BodyTracking.BodyId"/> and result is equal to this one.</returns>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyId.op_Equality(K4AdotNet.BodyTracking.BodyId,K4AdotNet.BodyTracking.BodyId)">
            <summary>To be consistent with <see cref="M:K4AdotNet.BodyTracking.BodyId.Equals(K4AdotNet.BodyTracking.BodyId)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.BodyTracking.BodyId.Equals(K4AdotNet.BodyTracking.BodyId)"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyId.op_Inequality(K4AdotNet.BodyTracking.BodyId,K4AdotNet.BodyTracking.BodyId)">
            <summary>To be consistent with <see cref="M:K4AdotNet.BodyTracking.BodyId.Equals(K4AdotNet.BodyTracking.BodyId)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.BodyTracking.BodyId.Equals(K4AdotNet.BodyTracking.BodyId)"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyId.op_Equality(K4AdotNet.BodyTracking.BodyId,System.Int32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.BodyTracking.BodyId.Equals(System.Int32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.BodyTracking.BodyId.Equals(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyId.op_Inequality(K4AdotNet.BodyTracking.BodyId,System.Int32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.BodyTracking.BodyId.Equals(System.Int32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.BodyTracking.BodyId.Equals(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyId.op_Equality(System.Int32,K4AdotNet.BodyTracking.BodyId)">
            <summary>To be consistent with <see cref="M:K4AdotNet.BodyTracking.BodyId.Equals(System.Int32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.BodyTracking.BodyId.Equals(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyId.op_Inequality(System.Int32,K4AdotNet.BodyTracking.BodyId)">
            <summary>To be consistent with <see cref="M:K4AdotNet.BodyTracking.BodyId.Equals(System.Int32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.BodyTracking.BodyId.Equals(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyId.GetHashCode">
            <summary>Calculates hash code.</summary>
            <returns>Hash code. Consistent with overridden equality.</returns>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyId.ToString(System.String,System.IFormatProvider)">
            <summary>String representation of current instance.</summary>
            <param name="format">The format to use or <see langword="null"/> for default format.</param>
            <param name="formatProvider">The provider to use to format the value or <see langword="null"/> to obtain the numeric format information from the current locale setting.</param>
            <returns><c>{value}</c> or <c>INVALID</c> string.</returns>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyId.ToString">
            <summary>String representation of current instance.</summary>
            <returns><c>{value}</c> or <c>INVALID</c> string.</returns>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyId.op_Implicit(K4AdotNet.BodyTracking.BodyId)~System.Int32">
            <summary>Implicit conversion to <see cref="T:System.Int32"/>.</summary>
            <param name="id">Value to be converted to <see cref="T:System.Int32"/>.</param>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyId.op_Implicit(System.Int32)~K4AdotNet.BodyTracking.BodyId">
            <summary>Implicit conversion from <see cref="T:System.Int32"/>.</summary>
            <param name="id">Value to be converted to <see cref="T:K4AdotNet.BodyTracking.BodyId"/>.</param>
        </member>
        <member name="F:K4AdotNet.BodyTracking.BodyId.Invalid">
            <summary>The invalid body id value.</summary>
        </member>
        <member name="T:K4AdotNet.BodyTracking.BodyTrackingException">
            <summary>Class for all body tracking related exceptions.</summary>
            <seealso cref="T:K4AdotNet.BodyTracking.Tracker"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyTrackingException.#ctor(System.String)">
            <summary>Creates exception with specified message.</summary>
            <param name="message">Message for exception. Can be reached then via <see cref="P:System.Exception.Message"/> property.</param>
        </member>
        <member name="M:K4AdotNet.BodyTracking.BodyTrackingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor for deserialization needs.</summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:K4AdotNet.BodyTracking.Joint">
            <summary>Structure to define a single joint.</summary>
            <remarks>
            The position and orientation together defines the coordinate system for the given joint.
            They are defined relative to the sensor global coordinate system.
            </remarks>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Joint.PositionMm">
            <summary>The position of the joint specified in millimeters.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Joint.Orientation">
            <summary>The orientation of the joint specified in normalized quaternion.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Joint.ConfidenceLevel">
            <summary>The confidence level of the joint.</summary>
        </member>
        <member name="T:K4AdotNet.BodyTracking.JointConfidenceLevel">
            <summary>This enumeration specifies the joint confidence level.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointConfidenceLevel.None">
            <summary>The joint is out of range (too far from depth camera).</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointConfidenceLevel.Low">
            <summary>The joint is not observed (likely due to occlusion), predicted joint pose.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointConfidenceLevel.Medium">
            <summary>Medium confidence in joint pose. Current SDK will only provide joints up to this confidence level.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointConfidenceLevel.High">
            <summary>High confidence in joint pose. Placeholder for future SDK.</summary>
        </member>
        <member name="T:K4AdotNet.BodyTracking.JointType">
            <summary>Skeleton joint index.</summary>
            <remarks>See https://docs.microsoft.com/en-us/azure/Kinect-dk/body-joints#joint-hierarchy for details.</remarks>
            <seealso cref="T:K4AdotNet.BodyTracking.JointTypes"/>
            <seealso cref="T:K4AdotNet.BodyTracking.Skeleton"/>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.Pelvis">
            <summary>Pelvis joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.SpineNavel">
            <summary>Navel spine joint.</summary>
            <summary>Navel spine joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.SpineChest">
            <summary>Chest spine joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.Neck">
            <summary>Neck joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.ClavicleLeft">
            <summary>Left clavicle joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.ShoulderLeft">
            <summary>Left shoulder joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.ElbowLeft">
            <summary>Left elbow joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.WristLeft">
            <summary>Left wrist joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.HandLeft">
            <summary>Left hand joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.HandTipLeft">
            <summary>Tip of left hand joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.ThumbLeft">
            <summary>Left thumb joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.ClavicleRight">
            <summary>Right clavicle joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.ShoulderRight">
            <summary>Right shoulder joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.ElbowRight">
            <summary>Right elbow joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.WristRight">
            <summary>Right wrist joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.HandRight">
            <summary>Right hand joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.HandTipRight">
            <summary>Tip of right hand joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.ThumbRight">
            <summary>Right thumb joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.HipLeft">
            <summary>Left hip joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.KneeLeft">
            <summary>Left knee joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.AnkleLeft">
            <summary>Left ankle joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.FootLeft">
            <summary>Left foot joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.HipRight">
            <summary>Right hip joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.KneeRight">
            <summary>Right knee joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.AnkleRight">
            <summary>Right ankle joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.FootRight">
            <summary>Right fool joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.Head">
            <summary>Head joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.Nose">
            <summary>Nose.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.EyeLeft">
            <summary>Left eye.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.EarLeft">
            <summary>Left ear.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.EyeRight">
            <summary>Right eye.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointType.EarRight">
            <summary>Right ear.</summary>
        </member>
        <member name="T:K4AdotNet.BodyTracking.JointTypes">
            <summary>Extensions to <see cref="T:K4AdotNet.BodyTracking.JointType"/> enumeration. Adds some metadata to <see cref="T:K4AdotNet.BodyTracking.JointType"/> enumeration.</summary>
            <remarks>See https://docs.microsoft.com/en-us/azure/Kinect-dk/body-joints#joint-hierarchy for details.</remarks>
            <seealso cref="T:K4AdotNet.BodyTracking.JointType"/>
        </member>
        <member name="F:K4AdotNet.BodyTracking.JointTypes.All">
            <summary>All possible <see cref="T:K4AdotNet.BodyTracking.JointType"/>s. May be helpful for UI, tests, etc.</summary>
        </member>
        <member name="M:K4AdotNet.BodyTracking.JointTypes.IsRoot(K4AdotNet.BodyTracking.JointType)">
            <summary>Is it root joint in skeleton structure?</summary>
            <param name="jointType">Joint type asked about.</param>
            <returns>
            <see langword="true"/> if <paramref name="jointType"/> is root joint in skeletal hierarchy,
            <see langword="false"/> for all other joints.
            </returns>
        </member>
        <member name="M:K4AdotNet.BodyTracking.JointTypes.IsFaceFeature(K4AdotNet.BodyTracking.JointType)">
            <summary>Is it face feature?</summary>
            <param name="jointType">Joint type asked about.</param>
            <returns>
            <see langword="true"/> if <paramref name="jointType"/> is actually face feature (nose, eye, ear) rather than actual joint of human skeleton,
            <see langword="false"/> for all other joints.
            </returns>
        </member>
        <member name="M:K4AdotNet.BodyTracking.JointTypes.IsLeft(K4AdotNet.BodyTracking.JointType)">
            <summary>Is it left side joint?</summary>
            <param name="jointType">Joint type asked about.</param>
            <returns>
            <see langword="true"/> if <paramref name="jointType"/> belongs to the left part of body,
            <see langword="false"/> - otherwise (right or center part of body).
            </returns>
        </member>
        <member name="M:K4AdotNet.BodyTracking.JointTypes.IsRight(K4AdotNet.BodyTracking.JointType)">
            <summary>Is it right side joint?</summary>
            <param name="jointType">Joint type asked about.</param>
            <returns>
            <see langword="true"/> if <paramref name="jointType"/> belongs to the right part of body,
            <see langword="false"/> - otherwise (left or center part of body).
            </returns>
        </member>
        <member name="M:K4AdotNet.BodyTracking.JointTypes.GetParent(K4AdotNet.BodyTracking.JointType)">
            <summary>Gets parent joint for a given one.</summary>
            <param name="jointType">Joint type asked about.</param>
            <returns>
            Parent joint of <paramref name="jointType"/> in skeletal hierarchy
            or value of <paramref name="jointType"/> if it is root joint (see <see cref="M:K4AdotNet.BodyTracking.JointTypes.IsRoot(K4AdotNet.BodyTracking.JointType)"/>).
            </returns>
            <remarks>See https://docs.microsoft.com/en-us/azure/Kinect-dk/body-joints#joint-hierarchy for details.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Unknown joint.</exception>
        </member>
        <member name="M:K4AdotNet.BodyTracking.JointTypes.Mirror(K4AdotNet.BodyTracking.JointType)">
            <summary>Mirrors left joint to appropriate right one and vice versa. Doesn't change central joints like joints of spine, neck, head.</summary>
            <param name="jointType">Joint type asked about.</param>
            <returns>Mirrored joint type.</returns>
        </member>
        <member name="T:K4AdotNet.BodyTracking.NativeApi">
            <summary>DLL imports for most of native functions from <c>k4abt.h</c> header file.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.NativeApi.DEFAULT_TRACKER_SMOOTHING_FACTOR">
            <summary>The default tracker temporal smoothing factor.</summary>
        </member>
        <member name="M:K4AdotNet.BodyTracking.NativeApi.TrackerCreate(K4AdotNet.Sensor.Calibration@,K4AdotNet.BodyTracking.TrackerConfiguration,K4AdotNet.NativeHandles.TrackerHandle@)">
            <summary>Create a body tracker handle.</summary>
            <param name="sensorCalibration">The sensor calibration that will be used for capture processing.</param>
            <param name="config">The configuration we want to run the tracker in. This can be initialized with <see cref="F:K4AdotNet.BodyTracking.NativeApi.DEFAULT_TRACKER_SMOOTHING_FACTOR"/>.</param>
            <param name="trackerHandle">Output parameter which on success will return a handle to the body tracker.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if the body tracker handle was created successfully.</returns>
        </member>
        <member name="M:K4AdotNet.BodyTracking.NativeApi.TrackerSetTemporalSmoothing(K4AdotNet.NativeHandles.TrackerHandle,System.Single)">
            <summary>Control the temporal smoothing across frames.</summary>
            <param name="trackerHandle">Handle obtained by <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerCreate(K4AdotNet.Sensor.Calibration@,K4AdotNet.BodyTracking.TrackerConfiguration,K4AdotNet.NativeHandles.TrackerHandle@)"/>.</param>
            <param name="smoothingFactor">
            Set between 0 for no smoothing and 1 for full smoothing.
            Less smoothing will increase the responsiveness of the
            detected skeletons but will cause more positional and orientation jitters.
            </param>
            <remarks>
            The default smoothness value is defined as <see cref="F:K4AdotNet.BodyTracking.NativeApi.DEFAULT_TRACKER_SMOOTHING_FACTOR"/>.
            </remarks>
        </member>
        <member name="M:K4AdotNet.BodyTracking.NativeApi.TrackerEnqueueCapture(K4AdotNet.NativeHandles.TrackerHandle,K4AdotNet.NativeHandles.CaptureHandle,K4AdotNet.Timeout)">
            <summary>Add a Azure Kinect sensor capture to the tracker input queue to generate its body tracking result asynchronously.</summary>
            <param name="trackerHandle">Handle obtained by <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerCreate(K4AdotNet.Sensor.Calibration@,K4AdotNet.BodyTracking.TrackerConfiguration,K4AdotNet.NativeHandles.TrackerHandle@)"/>.</param>
            <param name="sensorCaptureHandle">
            Handle to a sensor capture returned by <see cref="M:K4AdotNet.Sensor.NativeApi.CaptureCreate(K4AdotNet.NativeHandles.CaptureHandle@)"/> from Sensor SDK.
            It should contain the depth data for this function to work. Otherwise the function will return failure.
            </param>
            <param name="timeout">
            Specifies the time the function should block waiting to add the sensor capture to the tracker
            process queue. <see cref="F:K4AdotNet.Timeout.NoWait"/> is a check of the status without blocking.
            Passing <see cref="F:K4AdotNet.Timeout.Infinite"/> will block indefinitely until the capture is added to the process queue.
            </param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.WaitResult.Succeeded"/> if a sensor capture is successfully added to the processing queue. If the queue is still
            full before the timeout elapses, the function will return <see cref="F:K4AdotNet.NativeCallResults.WaitResult.Timeout"/>. All other failures will return
            <see cref="F:K4AdotNet.NativeCallResults.WaitResult.Failed"/>.
            </returns>
            <remarks>
            Add a Azure Kinect capture to the tracker input queue so that it can be processed asynchronously to generate the body tracking
            result. The processed results will be added to an output queue maintained by <see cref="T:K4AdotNet.NativeHandles.TrackerHandle"/> instance. Call
            <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerPopResult(K4AdotNet.NativeHandles.TrackerHandle,K4AdotNet.NativeHandles.BodyFrameHandle@,K4AdotNet.Timeout)"/> to get the result and pop it from the output queue.
            If the input queue or output queue is full, this function will block up until the timeout is reached.
            
            Upon successfully insert a sensor capture to the input queue this function will return success.
            
            This function returns <see cref="F:K4AdotNet.NativeCallResults.WaitResult.Failed"/> when either the tracker is shut down by <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerShutdown(K4AdotNet.NativeHandles.TrackerHandle)"/> API,
            or an internal problem is encountered before adding to the input queue: such as low memory condition,
            <paramref name="sensorCaptureHandle"/> not containing the depth data, or other unexpected issues.
            </remarks>
        </member>
        <member name="M:K4AdotNet.BodyTracking.NativeApi.TrackerPopResult(K4AdotNet.NativeHandles.TrackerHandle,K4AdotNet.NativeHandles.BodyFrameHandle@,K4AdotNet.Timeout)">
            <summary>Gets the next available body frame.</summary>
            <param name="trackerHandle">Handle obtained by <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerCreate(K4AdotNet.Sensor.Calibration@,K4AdotNet.BodyTracking.TrackerConfiguration,K4AdotNet.NativeHandles.TrackerHandle@)"/>.</param>
            <param name="bodyFrameHandle">If successful this contains a handle to a body frame object.</param>
            <param name="timeout">
            Specifies the time the function should block waiting for the body frame. <see cref="F:K4AdotNet.Timeout.NoWait"/> is a check of the status without blocking.
            Passing <see cref="F:K4AdotNet.Timeout.Infinite"/> will block indefinitely until the body frame becomes available.
            </param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.WaitResult.Succeeded"/> if a body frame is returned. If a body frame is not available before the timeout elapses,
            the function will return <see cref="F:K4AdotNet.NativeCallResults.WaitResult.Timeout"/>. All other failures will return <see cref="F:K4AdotNet.NativeCallResults.WaitResult.Failed"/>.
            </returns>
            <remarks>
            Retrieves the next available body frame result and pop it from the output queue in the <see cref="T:K4AdotNet.NativeHandles.TrackerHandle"/>.
            If a new body frame is not currently available, this function will block up until the timeout is reached.
            The SDK will buffer at least three body frames worth of data before stopping new capture being queued by <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerEnqueueCapture(K4AdotNet.NativeHandles.TrackerHandle,K4AdotNet.NativeHandles.CaptureHandle,K4AdotNet.Timeout)"/>.
            
            Upon successfully reads a body frame this function will return success.
            
            This function returns <see cref="F:K4AdotNet.NativeCallResults.WaitResult.Failed"/> when either the tracker is shut down by <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerShutdown(K4AdotNet.NativeHandles.TrackerHandle)"/> API
            and the remaining tracker queue is empty, or an internal problem is encountered: such as low memory condition, or
            other unexpected issues.
            </remarks>
        </member>
        <member name="M:K4AdotNet.BodyTracking.NativeApi.TrackerShutdown(K4AdotNet.NativeHandles.TrackerHandle)">
             <summary>Shutdown the tracker so that no further capture can be added to the input queue.</summary>
             <param name="trackerHandle">Handle obtained by <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerCreate(K4AdotNet.Sensor.Calibration@,K4AdotNet.BodyTracking.TrackerConfiguration,K4AdotNet.NativeHandles.TrackerHandle@)"/>.</param>
             <remarks>
             Once the tracker is shutdown, <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerEnqueueCapture(K4AdotNet.NativeHandles.TrackerHandle,K4AdotNet.NativeHandles.CaptureHandle,K4AdotNet.Timeout)"/> API will always immediately return failure.
            
             If there are remaining captures in the tracker queue after the tracker is shutdown, <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerPopResult(K4AdotNet.NativeHandles.TrackerHandle,K4AdotNet.NativeHandles.BodyFrameHandle@,K4AdotNet.Timeout)"/> can
             still return successfully. Once the tracker queue is empty, the <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerPopResult(K4AdotNet.NativeHandles.TrackerHandle,K4AdotNet.NativeHandles.BodyFrameHandle@,K4AdotNet.Timeout)"/> call will always immediately
             return failure.
             </remarks>
        </member>
        <member name="M:K4AdotNet.BodyTracking.NativeApi.FrameGetNumBodies(K4AdotNet.NativeHandles.BodyFrameHandle)">
            <summary>Get the number of people from the <see cref="T:K4AdotNet.NativeHandles.BodyFrameHandle"/>.</summary>
            <param name="bodyFrameHandle">Handle to a body frame object returned by <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerPopResult(K4AdotNet.NativeHandles.TrackerHandle,K4AdotNet.NativeHandles.BodyFrameHandle@,K4AdotNet.Timeout)"/> function.</param>
            <returns>Returns the number of detected bodies. 0 if the function fails.</returns>
            <remarks>Called when the user has received a body frame handle and wants to access the data contained in it.</remarks>
        </member>
        <member name="M:K4AdotNet.BodyTracking.NativeApi.FrameGetBodySkeleton(K4AdotNet.NativeHandles.BodyFrameHandle,System.UInt32,K4AdotNet.BodyTracking.Skeleton@)">
            <summary>Get the joint information for a particular person index from the <see cref="T:K4AdotNet.NativeHandles.BodyFrameHandle"/>.</summary>
            <param name="bodyFrameHandle">Handle to a body frame object returned by <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerPopResult(K4AdotNet.NativeHandles.TrackerHandle,K4AdotNet.NativeHandles.BodyFrameHandle@,K4AdotNet.Timeout)"/> function.</param>
            <param name="index">The index of the body of which the joint information is queried.</param>
            <param name="skeleton">If successful this contains the body skeleton information.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if a valid body skeleton is returned. All failures will return <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/>.</returns>
            <remarks>Called when the user has received a body frame handle and wants to access the data contained in it.</remarks>
        </member>
        <member name="M:K4AdotNet.BodyTracking.NativeApi.FrameGetBodyId(K4AdotNet.NativeHandles.BodyFrameHandle,System.UInt32)">
            <summary>Get the body id for a particular person index from the <see cref="T:K4AdotNet.NativeHandles.BodyFrameHandle"/>.</summary>
            <param name="bodyFrameHandle">Handle to a body frame object returned by <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerPopResult(K4AdotNet.NativeHandles.TrackerHandle,K4AdotNet.NativeHandles.BodyFrameHandle@,K4AdotNet.Timeout)"/> function.</param>
            <param name="index">The index of the body of which the body id information is queried.</param>
            <returns>Returns the body id. All failures will return <see cref="F:K4AdotNet.BodyTracking.BodyId.Invalid"/>.</returns>
            <remarks>
            Called when the user has received a body frame handle and wants to access the id of the body given a particular index.
            </remarks>
        </member>
        <member name="M:K4AdotNet.BodyTracking.NativeApi.FrameGetDeviceTimestamp(K4AdotNet.NativeHandles.BodyFrameHandle)">
            <summary>Get the body frame's device timestamp.</summary>
            <param name="bodyFrameHandle">Handle to a body frame object returned by <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerPopResult(K4AdotNet.NativeHandles.TrackerHandle,K4AdotNet.NativeHandles.BodyFrameHandle@,K4AdotNet.Timeout)"/> function.</param>
            <returns>
            Returns the timestamp of the body frame. If the <paramref name="bodyFrameHandle"/> is invalid this function will return <see cref="F:K4AdotNet.Microseconds64.Zero"/>.
            It is also possible for <see cref="F:K4AdotNet.Microseconds64.Zero"/> to be a valid timestamp originating from the beginning of a recording or the start of streaming.
            </returns>
        </member>
        <member name="M:K4AdotNet.BodyTracking.NativeApi.FrameGetBodyIndexMap(K4AdotNet.NativeHandles.BodyFrameHandle)">
            <summary>Get the body index map from <see cref="T:K4AdotNet.NativeHandles.BodyFrameHandle"/>.</summary>
            <param name="bodyFrameHandle">Handle to a body frame object returned by <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerPopResult(K4AdotNet.NativeHandles.TrackerHandle,K4AdotNet.NativeHandles.BodyFrameHandle@,K4AdotNet.Timeout)"/> function.</param>
            <returns>Call this function to access the body index map image. Don't forget to call <see cref="M:System.IDisposable.Dispose"/> for returned handle after usage.</returns>
            <remarks>
            Called when the user has received a body frame handle and wants to access the data contained in it.
            
            Body Index map is the body instance segmentation map. Each pixel maps to the corresponding pixel in the
            depth image or the IR image. The value for each pixel represents which body the pixel belongs to. It can be either
            background (value <c>0xFF</c>) or the index of a detected body.
            </remarks>
        </member>
        <member name="M:K4AdotNet.BodyTracking.NativeApi.FrameGetCapture(K4AdotNet.NativeHandles.BodyFrameHandle)">
            <summary>Get the original capture that is used to calculate <see cref="T:K4AdotNet.NativeHandles.BodyFrameHandle"/>.</summary>
            <param name="bodyFrameHandle">Handle to a body frame object returned by <see cref="M:K4AdotNet.BodyTracking.NativeApi.TrackerPopResult(K4AdotNet.NativeHandles.TrackerHandle,K4AdotNet.NativeHandles.BodyFrameHandle@,K4AdotNet.Timeout)"/> function.</param>
            <returns>Call this function to access the original <see cref="T:K4AdotNet.NativeHandles.CaptureHandle"/>. Don't forget to call <see cref="M:System.IDisposable.Dispose"/> for returned handle after usage.</returns>
            <remarks>
            Called when the user has received a body frame handle and wants to access the data contained in it.
            </remarks>
        </member>
        <member name="T:K4AdotNet.BodyTracking.SensorOrientation">
            <summary>Sensor mounting orientation types.</summary>
            <remarks>
            This enumeration specifies the sensor mounting orientation. Passing the correct orientation in <see cref="M:K4AdotNet.BodyTracking.Tracker.#ctor(K4AdotNet.Sensor.Calibration@,K4AdotNet.BodyTracking.TrackerConfiguration)"/>
            can help the body tracker to achieve more accurate body tracking.
            </remarks>
            <seealso cref="T:K4AdotNet.BodyTracking.TrackerConfiguration"/>
            <seealso cref="M:K4AdotNet.BodyTracking.Tracker.#ctor(K4AdotNet.Sensor.Calibration@,K4AdotNet.BodyTracking.TrackerConfiguration)"/>
        </member>
        <member name="F:K4AdotNet.BodyTracking.SensorOrientation.Default">
            <summary>Mount the sensor at its default orientation.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.SensorOrientation.Clockwise90">
            <summary>Clock-wisely rotate the sensor 90°.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.SensorOrientation.Counterclockwise90">
            <summary>Counter clock-wisely rotate the sensor 90°.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.SensorOrientation.Flip180">
            <summary>Mount the sensor upside-down.</summary>
        </member>
        <member name="T:K4AdotNet.BodyTracking.Skeleton">
            <summary>Structure to define joints for skeleton.</summary>
            <remarks>See https://docs.microsoft.com/en-us/azure/Kinect-dk/body-joints#joint-hierarchy for details.</remarks>
            <seealso cref="T:K4AdotNet.BodyTracking.JointType"/>
            <seealso cref="T:K4AdotNet.BodyTracking.JointTypes"/>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.Pelvis">
            <summary>Pelvis joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.SpineNavel">
            <summary>Navel spine joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.SpineChest">
            <summary>Chest spine joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.Neck">
            <summary>Neck joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.ClavicleLeft">
            <summary>Left clavicle joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.ShoulderLeft">
            <summary>Left shoulder joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.ElbowLeft">
            <summary>Left elbow joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.WristLeft">
            <summary>Left wrist joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.HandLeft">
            <summary>Left hand joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.HandTipLeft">
            <summary>Tip of left hand joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.ThumbLeft">
            <summary>Left thumb joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.ClavicleRight">
            <summary>Right clavicle joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.ShoulderRight">
            <summary>Right shoulder joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.ElbowRight">
            <summary>Right elbow joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.WristRight">
            <summary>Right wrist joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.HandRight">
            <summary>Right hand joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.HandTipRight">
            <summary>Tip of right hand joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.ThumbRight">
            <summary>Right thumb joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.HipLeft">
            <summary>Left hip joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.KneeLeft">
            <summary>Left knee joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.AnkleLeft">
            <summary>Left ankle joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.FootLeft">
            <summary>Left foot joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.HipRight">
            <summary>Right hip joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.KneeRight">
            <summary>Right knee joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.AnkleRight">
            <summary>Right ankle joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.FootRight">
            <summary>Right fool joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.Head">
            <summary>Head joint.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.Nose">
            <summary>Nose.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.EyeLeft">
            <summary>Left eye.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.EarLeft">
            <summary>Left ear.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.EyeRight">
            <summary>Right eye.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Skeleton.EarRight">
            <summary>Right ear.</summary>
        </member>
        <member name="P:K4AdotNet.BodyTracking.Skeleton.Item(K4AdotNet.BodyTracking.JointType)">
            <summary>Access to joint by index of type <see cref="T:K4AdotNet.BodyTracking.JointType"/>.</summary>
            <param name="index">Index of joint.</param>
            <returns>Joint information.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Unknown value of <paramref name="index"/>.</exception>
            <seealso cref="F:K4AdotNet.BodyTracking.JointTypes.All"/>
        </member>
        <member name="P:K4AdotNet.BodyTracking.Skeleton.Item(System.Int32)">
            <summary>Access to joint by integer index.</summary>
            <param name="index">Index of joint.</param>
            <returns>Joint information.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid value of <paramref name="index"/>.</exception>
        </member>
        <member name="M:K4AdotNet.BodyTracking.Skeleton.ToArray">
            <summary>Converts structure to array representation.</summary>
            <returns>Array representation of skeletal data. Not <see langword="null"/>.</returns>
        </member>
        <member name="M:K4AdotNet.BodyTracking.Skeleton.GetEnumerator">
            <summary>Implementation of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <returns>Enumerator for all joints. Not <see langword="null"/>.</returns>
        </member>
        <member name="M:K4AdotNet.BodyTracking.Skeleton.System#Collections#IEnumerable#GetEnumerator">
            <summary>Implementation of <see cref="T:System.Collections.IEnumerable"/>.</summary>
            <returns>Enumerator for all joints. Not <see langword="null"/>.</returns>
        </member>
        <member name="T:K4AdotNet.BodyTracking.Tracker">
            <summary>Body tracker. The main class in Body Tracking component.</summary>
            <remarks><para>
            Processing is organized as pipeline with queues.
            Use <see cref="M:K4AdotNet.BodyTracking.Tracker.TryEnqueueCapture(K4AdotNet.Sensor.Capture,K4AdotNet.Timeout)"/> to add new capture to processing pipeline.
            Use <see cref="M:K4AdotNet.BodyTracking.Tracker.TryPopResult(K4AdotNet.BodyTracking.BodyFrame@,K4AdotNet.Timeout)"/> to extract processed capture and body data from pipeline.
            </para></remarks>
            <seealso cref="T:K4AdotNet.BodyTracking.BodyFrame"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.Tracker.#ctor(K4AdotNet.Sensor.Calibration@,K4AdotNet.BodyTracking.TrackerConfiguration)">
            <summary>Creates a body tracker.</summary>
            <param name="calibration">The sensor calibration that will be used for capture processing.</param>
            <param name="config">The configuration we want to run the tracker in. This can be initialized with <see cref="F:K4AdotNet.BodyTracking.TrackerConfiguration.Default"/>.</param>
            <remarks><para>
            Under the hood Body Tracking runtime will be initialized during the first call of this constructor.
            It is rather time consuming operation: initialization of ONNX runtime, loading and parsing of neural network model, etc.
            For this reason, it is recommended to initialize Body Tracking runtime in advance: <see cref="M:K4AdotNet.Sdk.TryInitializeBodyTrackingRuntime(K4AdotNet.BodyTracking.TrackerProcessingMode,System.String@)"/>.
            </para><para>
            Also, Body Tracking runtime must be available in one of the following locations:
            directory with executable file,
            directory with <c>K4AdotNet</c> assembly,
            installation directory of Body Tracking SDK under <c>Program Files</c>.
            </para></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Invalid value of <paramref name="calibration"/>: <see cref="F:K4AdotNet.Sensor.Calibration.DepthMode"/> cannot be <see cref="F:K4AdotNet.Sensor.DepthMode.Off"/> and <see cref="F:K4AdotNet.Sensor.DepthMode.PassiveIR"/>.
            Because depth data is required for body tracking.
            </exception>
            <exception cref="T:System.ArgumentException">
            Invalid/unsupported characters in <see cref="F:K4AdotNet.BodyTracking.TrackerConfiguration.ModelPath"/> of <paramref name="config"/>.
            </exception>
            <exception cref="T:K4AdotNet.BodyTracking.BodyTrackingException">
            Unable to find/initialize Body Tracking runtime
            or wrong path to DNN model specified in <paramref name="config"/>.
            </exception>
            <seealso cref="M:K4AdotNet.Sdk.IsBodyTrackingRuntimeAvailable(System.String@)"/>
            <seealso cref="M:K4AdotNet.Sdk.TryInitializeBodyTrackingRuntime(K4AdotNet.BodyTracking.TrackerProcessingMode,System.String@)"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.Tracker.Dispose">
            <summary>
            Call this method to free unmanaged resources associated with current instance.
            </summary>
            <seealso cref="E:K4AdotNet.BodyTracking.Tracker.Disposed"/>
            <seealso cref="P:K4AdotNet.BodyTracking.Tracker.IsDisposed"/>
        </member>
        <member name="P:K4AdotNet.BodyTracking.Tracker.IsDisposed">
            <summary>Gets a value indicating whether the object has been disposed of.</summary>
            <seealso cref="M:K4AdotNet.BodyTracking.Tracker.Dispose"/>
        </member>
        <member name="E:K4AdotNet.BodyTracking.Tracker.Disposed">
            <summary>Raised on object disposing (only once).</summary>
            <seealso cref="M:K4AdotNet.BodyTracking.Tracker.Dispose"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.Tracker.Shutdown">
            <summary>Shutdown the tracker so that no further capture can be added to the input queue.</summary>
            <remarks><para>
            Once the tracker is shutdown, <see cref="M:K4AdotNet.BodyTracking.Tracker.TryEnqueueCapture(K4AdotNet.Sensor.Capture,K4AdotNet.Timeout)"/> method will always immediately return failure.
            </para><para>
            If there are remaining captures in the tracker queue after the tracker is shutdown, <see cref="M:K4AdotNet.BodyTracking.Tracker.TryPopResult(K4AdotNet.BodyTracking.BodyFrame@,K4AdotNet.Timeout)"/> can
            still return successfully. Once the tracker queue is empty, the <see cref="M:K4AdotNet.BodyTracking.Tracker.TryPopResult(K4AdotNet.BodyTracking.BodyFrame@,K4AdotNet.Timeout)"/> call will always immediately
            return failure.
            </para><para>
            This function may be called while another thread is blocking in <see cref="M:K4AdotNet.BodyTracking.Tracker.TryEnqueueCapture(K4AdotNet.Sensor.Capture,K4AdotNet.Timeout)"/> or <see cref="M:K4AdotNet.BodyTracking.Tracker.TryPopResult(K4AdotNet.BodyTracking.BodyFrame@,K4AdotNet.Timeout)"/>.
            Calling this function while another thread is in that function will result in that function raising an exception.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">Object was disposed.</exception>
        </member>
        <member name="P:K4AdotNet.BodyTracking.Tracker.DepthMode">
            <summary>Depth mode for which this tracker was created.</summary>
        </member>
        <member name="P:K4AdotNet.BodyTracking.Tracker.QueueSize">
            <summary>How many captures are there in the processing pipeline?</summary>
            <seealso cref="F:K4AdotNet.BodyTracking.Tracker.MaxQueueSize"/>
            <seealso cref="P:K4AdotNet.BodyTracking.Tracker.IsQueueFull"/>
        </member>
        <member name="P:K4AdotNet.BodyTracking.Tracker.IsQueueFull">
            <summary>Is processing pipeline full?</summary>
            <seealso cref="P:K4AdotNet.BodyTracking.Tracker.QueueSize"/>
            <seealso cref="F:K4AdotNet.BodyTracking.Tracker.MaxQueueSize"/>
            <seealso cref="M:K4AdotNet.BodyTracking.Tracker.TryEnqueueCapture(K4AdotNet.Sensor.Capture,K4AdotNet.Timeout)"/>
        </member>
        <member name="E:K4AdotNet.BodyTracking.Tracker.QueueSizeIncreased">
            <summary>Raised on increasing of <see cref="P:K4AdotNet.BodyTracking.Tracker.QueueSize"/>.</summary>
        </member>
        <member name="E:K4AdotNet.BodyTracking.Tracker.QueueSizeDecreased">
            <summary>Raised on decreasing of <see cref="P:K4AdotNet.BodyTracking.Tracker.QueueSize"/>.</summary>
        </member>
        <member name="P:K4AdotNet.BodyTracking.Tracker.TemporalSmoothingFactor">
            <summary>Temporal smoothing across frames (0 - 1). Default value is <see cref="F:K4AdotNet.BodyTracking.Tracker.DefaultSmoothingFactor"/>.</summary>
            <remarks>
            Set between 0 for no smoothing and 1 for full smoothing.
            Less smoothing will increase the responsiveness of the
            detected skeletons but will cause more positional and orientation jitters.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is less than zero or is greater than one.</exception>
            <exception cref="T:System.ObjectDisposedException">Object was disposed.</exception>
        </member>
        <member name="M:K4AdotNet.BodyTracking.Tracker.TryEnqueueCapture(K4AdotNet.Sensor.Capture,K4AdotNet.Timeout)">
            <summary>Adds a Azure Kinect sensor capture to the tracker input queue to generate its body tracking result asynchronously.</summary>
            <param name="capture">It should contain the depth and IR data compatible with <see cref="P:K4AdotNet.BodyTracking.Tracker.DepthMode"/> for this function to work. Not <see langword="null"/>.</param>
            <param name="timeout">
            Specifies the time the function should block waiting to add the sensor capture to the tracker process queue.
            Default value is <see cref="F:K4AdotNet.Timeout.NoWait"/>, which means checking of the status without blocking.
            Passing <see cref="F:K4AdotNet.Timeout.Infinite"/> will block indefinitely until the capture is added to the process queue.
            </param>
            <returns>
            <see langword="true"/> - if a sensor capture is successfully added to the processing queue.
            <see langword="false"/> - if the queue is still full (see <see cref="P:K4AdotNet.BodyTracking.Tracker.IsQueueFull"/> property) before the <paramref name="timeout"/> elapses.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="capture"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="capture"/> doesn't contain depth and/or IR data compatible with <see cref="P:K4AdotNet.BodyTracking.Tracker.DepthMode"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Object was disposed before this call or has been disposed during this call.</exception>
            <exception cref="T:K4AdotNet.BodyTracking.BodyTrackingException">Cannot add capture to the tracker for some unknown reason. See logs for details.</exception>
        </member>
        <member name="M:K4AdotNet.BodyTracking.Tracker.EnqueueCapture(K4AdotNet.Sensor.Capture)">
            <summary>Equivalent to call of <see cref="M:K4AdotNet.BodyTracking.Tracker.TryEnqueueCapture(K4AdotNet.Sensor.Capture,K4AdotNet.Timeout)"/> with infinite timeout: <see cref="F:K4AdotNet.Timeout.Infinite"/>.</summary>
            <param name="capture">It should contain the depth data compatible with <see cref="P:K4AdotNet.BodyTracking.Tracker.DepthMode"/> for this function to work. Not <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="capture"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="capture"/> doesn't contain depth and/or IR data compatible with <see cref="P:K4AdotNet.BodyTracking.Tracker.DepthMode"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Object was disposed before this call or has been disposed during this call.</exception>
            <exception cref="T:K4AdotNet.BodyTracking.BodyTrackingException">Cannot add capture to the tracker for some unknown reason. See logs for details.</exception>
        </member>
        <member name="M:K4AdotNet.BodyTracking.Tracker.TryPopResult(K4AdotNet.BodyTracking.BodyFrame@,K4AdotNet.Timeout)">
            <summary>Gets the next available body frame.</summary>
            <param name="bodyFrame">
            If successful this contains object with body data (don't forget to free this object by calling <see cref="M:K4AdotNet.BodyTracking.BodyFrame.Dispose"/>),
            otherwise - <see langword="null"/>.
            </param>
            <param name="timeout">
            Specifies the time the function should block waiting for the body frame.
            Default value is <see cref="F:K4AdotNet.Timeout.NoWait"/>, which means checking of the status without blocking.
            Passing <see cref="F:K4AdotNet.Timeout.Infinite"/> will block indefinitely until the body frame becomes available.
            </param>
            <returns>
            <see langword="true"/> - if a body frame is returned,
            <see langword="false"/> - if a body frame is not available before the timeout elapses.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Object was disposed before this call or has been disposed during this call.</exception>
            <exception cref="T:K4AdotNet.BodyTracking.BodyTrackingException">Cannot get body frame for some unknown reason. See logs for details.</exception>
            <seealso cref="M:K4AdotNet.BodyTracking.Tracker.PopResult"/>
        </member>
        <member name="M:K4AdotNet.BodyTracking.Tracker.PopResult">
            <summary>Equivalent to call of <see cref="M:K4AdotNet.BodyTracking.Tracker.TryPopResult(K4AdotNet.BodyTracking.BodyFrame@,K4AdotNet.Timeout)"/> with infinite timeout: <see cref="F:K4AdotNet.Timeout.Infinite"/>.</summary>
            <returns>Enqueued body frame. Not <see langword="null"/>. Don't forget to call <see cref="M:K4AdotNet.BodyTracking.BodyFrame.Dispose"/> for returned object after usage.</returns>
            <exception cref="T:System.ObjectDisposedException">Object was disposed before this call or has been disposed during this call.</exception>
            <exception cref="T:K4AdotNet.BodyTracking.BodyTrackingException">Cannot get body frame for some unknown reason. See logs for details.</exception>
            <seealso cref="M:K4AdotNet.BodyTracking.Tracker.TryPopResult(K4AdotNet.BodyTracking.BodyFrame@,K4AdotNet.Timeout)"/>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Tracker.MaxQueueSize">
            <summary>Max amount of captures that can be simultaneously in processing pipeline.</summary>
            <seealso cref="P:K4AdotNet.BodyTracking.Tracker.IsQueueFull"/>
        </member>
        <member name="F:K4AdotNet.BodyTracking.Tracker.DefaultSmoothingFactor">
            <summary>The default tracker temporal smoothing factor.</summary>
        </member>
        <member name="T:K4AdotNet.BodyTracking.TrackerConfiguration">
            <summary>Configuration parameters for a k4abt body tracker.</summary>
            <remarks>Used by <see cref="M:K4AdotNet.BodyTracking.Tracker.#ctor(K4AdotNet.Sensor.Calibration@,K4AdotNet.BodyTracking.TrackerConfiguration)"/> to specify the configuration of the k4abt tracker.</remarks>
            <seealso cref="M:K4AdotNet.BodyTracking.Tracker.#ctor(K4AdotNet.Sensor.Calibration@,K4AdotNet.BodyTracking.TrackerConfiguration)"/>
        </member>
        <member name="F:K4AdotNet.BodyTracking.TrackerConfiguration.SensorOrientation">
            <summary>The sensor mounting orientation type.</summary>
            <remarks>Setting the correct orientation can help the body tracker to achieve more accurate body tracking results.</remarks>
        </member>
        <member name="F:K4AdotNet.BodyTracking.TrackerConfiguration.ProcessingMode">
            <summary>Specify whether to use CPU only mode or GPU mode to run the tracker.</summary>
            <remarks>
            The CPU only mode doesn't require the machine to have a GPU to run this SDK.
            But it will be much slower than the GPU mode.
            </remarks>
        </member>
        <member name="F:K4AdotNet.BodyTracking.TrackerConfiguration.GpuDeviceId">
            <summary>Specify the GPU device ID to run the tracker.</summary>
            <remarks>The setting is only effective if the <see cref="F:K4AdotNet.BodyTracking.TrackerConfiguration.ProcessingMode"/> setting is set to <see cref="F:K4AdotNet.BodyTracking.TrackerProcessingMode.GpuCuda"/>.</remarks>
        </member>
        <member name="F:K4AdotNet.BodyTracking.TrackerConfiguration.ModelPath">
            <summary>Specify the model file name and location used by the tracker.</summary>
            <remarks>If specified, the tracker will use this model instead of the default one.</remarks>
        </member>
        <member name="F:K4AdotNet.BodyTracking.TrackerConfiguration.Default">
            <summary>Default configuration setting for k4abt tracker.</summary>
            <remarks>Use this setting to initialize a <see cref="T:K4AdotNet.BodyTracking.TrackerConfiguration"/> to a default state.</remarks>
        </member>
        <member name="T:K4AdotNet.BodyTracking.TrackerProcessingMode">
            <summary>Tracker processing mode types.</summary>
            <remarks>
            The CPU only mode doesn't require the machine to have a GPU to run this SDK.
            But it will be much slower than the GPU mode.
            </remarks>
            <seealso cref="T:K4AdotNet.BodyTracking.TrackerConfiguration"/>
            <seealso cref="M:K4AdotNet.BodyTracking.Tracker.#ctor(K4AdotNet.Sensor.Calibration@,K4AdotNet.BodyTracking.TrackerConfiguration)"/>
        </member>
        <member name="F:K4AdotNet.BodyTracking.TrackerProcessingMode.Gpu">
            <summary>
            SDK will use the most appropriate GPU mode for the operating system to run the tracker.
            Currently this is ONNX DirectML EP for Windows and ONNX Cuda EP for Linux. ONNX TensorRT EP is experimental
            </summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.TrackerProcessingMode.Cpu">
            <summary>SDK will use CPU only mode to run the tracker.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.TrackerProcessingMode.GpuCuda">
            <summary>SDK will use ONNX Cuda EP to run the tracker.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.TrackerProcessingMode.GpuTensorRT">
            <summary>SDK will use ONNX TensorRT EP to run the tracker.</summary>
        </member>
        <member name="F:K4AdotNet.BodyTracking.TrackerProcessingMode.GpuDirectML">
            <summary>SDK will use ONNX DirectML EP to run the tracker (Windows only).</summary>
        </member>
        <member name="T:K4AdotNet.Float2">
            <summary>Two dimensional floating point vector.</summary>
        </member>
        <member name="F:K4AdotNet.Float2.X">
            <summary>X component of a vector. Corresponds to <c>0</c> index in array representation.</summary>
        </member>
        <member name="F:K4AdotNet.Float2.Y">
            <summary>Y component of a vector. Corresponds to <c>1</c> index in array representation.</summary>
        </member>
        <member name="M:K4AdotNet.Float2.#ctor(System.Single,System.Single)">
            <summary>Constructs vector with given components.</summary>
            <param name="x">X component</param>
            <param name="y">Y component</param>
        </member>
        <member name="M:K4AdotNet.Float2.#ctor(System.Single[])">
            <summary>Creates vector structure from array representation.</summary>
            <param name="xy">Array representation of vector. Not <see langword="null"/>. Two elements.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="xy"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Wrong length of <paramref name="xy"/> array.</exception>
        </member>
        <member name="M:K4AdotNet.Float2.ToArray">
            <summary>Converts vector structure to array representation.</summary>
            <returns>Array representation of vector. Not <see langword="null"/>.</returns>
        </member>
        <member name="P:K4AdotNet.Float2.Item(System.Int32)">
            <summary>Indexed access to vector components.</summary>
            <param name="index">Index of component: <see cref="F:K4AdotNet.Float2.X"/> - <c>0</c>, <see cref="F:K4AdotNet.Float2.Y"/> - <c>1</c>.</param>
            <returns>Value of appropriate component.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> has invalid value.</exception>
        </member>
        <member name="M:K4AdotNet.Float2.Equals(K4AdotNet.Float2)">
            <summary>Per-component comparison.</summary>
            <param name="other">Other vector to be compared to this one.</param>
            <returns><see langword="true"/> if all components are equal.</returns>
        </member>
        <member name="M:K4AdotNet.Float2.Equals(System.Object)">
            <summary>Overloads <see cref="M:System.Object.Equals(System.Object)"/> to be consistent with <see cref="M:K4AdotNet.Float2.Equals(K4AdotNet.Float2)"/>.</summary>
            <param name="obj">Object to be compared with this vector.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is a <see cref="T:K4AdotNet.Float2"/> and is equal to this one.</returns>
            <seealso cref="M:K4AdotNet.Float2.Equals(K4AdotNet.Float2)"/>
        </member>
        <member name="M:K4AdotNet.Float2.op_Equality(K4AdotNet.Float2,K4AdotNet.Float2)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Float2.Equals(K4AdotNet.Float2)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Float2.Equals(K4AdotNet.Float2)"/>
        </member>
        <member name="M:K4AdotNet.Float2.op_Inequality(K4AdotNet.Float2,K4AdotNet.Float2)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Float2.Equals(K4AdotNet.Float2)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Float2.Equals(K4AdotNet.Float2)"/>
        </member>
        <member name="M:K4AdotNet.Float2.GetHashCode">
            <summary>Calculates hash code.</summary>
            <returns>Hash code. Consistent with overridden equality.</returns>
        </member>
        <member name="M:K4AdotNet.Float2.ToString(System.String,System.IFormatProvider)">
            <summary>Formats vector as <c>[X Y]</c> string.</summary>
            <param name="format">Format string for each individual component in string representation.</param>
            <param name="formatProvider">Culture for formatting numbers to strings.</param>
            <returns>String representation of vector in a given Culture.</returns>
        </member>
        <member name="M:K4AdotNet.Float2.ToString">
            <summary>Formats vector as <c>[X Y]</c> string.</summary>
            <returns><c>[X Y]</c>.</returns>
        </member>
        <member name="F:K4AdotNet.Float2.Zero">
            <summary>Zero vector.</summary>
        </member>
        <member name="F:K4AdotNet.Float2.UnitX">
            <summary>Unit vector in +X direction.</summary>
        </member>
        <member name="F:K4AdotNet.Float2.UnitY">
            <summary>Unit vector in +Y direction.</summary>
        </member>
        <member name="T:K4AdotNet.Float3">
            <summary>Three dimensional floating point vector.</summary>
        </member>
        <member name="F:K4AdotNet.Float3.X">
            <summary>X component of a vector. Corresponds to <c>0</c> index in array representation.</summary>
        </member>
        <member name="F:K4AdotNet.Float3.Y">
            <summary>Y component of a vector. Corresponds to <c>1</c> index in array representation.</summary>
        </member>
        <member name="F:K4AdotNet.Float3.Z">
            <summary>Z component of a vector. Corresponds to <c>2</c> index in array representation.</summary>
        </member>
        <member name="M:K4AdotNet.Float3.#ctor(System.Single,System.Single,System.Single)">
            <summary>Constructs vector with given components.</summary>
            <param name="x">X component</param>
            <param name="y">Y component</param>
            <param name="z">Z component</param>
        </member>
        <member name="M:K4AdotNet.Float3.#ctor(System.Single[])">
            <summary>Creates vector structure from array representation.</summary>
            <param name="xyz">Array representation of vector. Not <see langword="null"/>. Two elements.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="xyz"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Wrong length of <paramref name="xyz"/> array.</exception>
        </member>
        <member name="M:K4AdotNet.Float3.ToArray">
            <summary>Converts vector structure to array representation.</summary>
            <returns>Array representation of vector. Not <see langword="null"/>.</returns>
        </member>
        <member name="P:K4AdotNet.Float3.Item(System.Int32)">
            <summary>Indexed access to vector components.</summary>
            <param name="index">Index of component: <see cref="F:K4AdotNet.Float3.X"/> - <c>0</c>, <see cref="F:K4AdotNet.Float3.Y"/> - <c>1</c>, <see cref="F:K4AdotNet.Float3.Z"/> - <c>2</c>.</param>
            <returns>Value of appropriate component.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> has invalid value.</exception>
        </member>
        <member name="M:K4AdotNet.Float3.Equals(K4AdotNet.Float3)">
            <summary>Per-component comparison.</summary>
            <param name="other">Other vector to be compared to this one.</param>
            <returns><see langword="true"/> if all components of <paramref name="other"/> are equal to appropriate components of this vector.</returns>
        </member>
        <member name="M:K4AdotNet.Float3.Equals(System.Object)">
            <summary>Overloads <see cref="M:System.Object.Equals(System.Object)"/> to be consistent with <see cref="M:K4AdotNet.Float3.Equals(K4AdotNet.Float3)"/>.</summary>
            <param name="obj">Object to be compared with this vector.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is a <see cref="T:K4AdotNet.Float3"/> and is equal to this one.</returns>
            <seealso cref="M:K4AdotNet.Float3.Equals(K4AdotNet.Float3)"/>
        </member>
        <member name="M:K4AdotNet.Float3.op_Equality(K4AdotNet.Float3,K4AdotNet.Float3)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Float3.Equals(K4AdotNet.Float3)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Float3.Equals(K4AdotNet.Float3)"/>
        </member>
        <member name="M:K4AdotNet.Float3.op_Inequality(K4AdotNet.Float3,K4AdotNet.Float3)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Float3.Equals(K4AdotNet.Float3)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Float3.Equals(K4AdotNet.Float3)"/>
        </member>
        <member name="M:K4AdotNet.Float3.GetHashCode">
            <summary>Calculates hash code.</summary>
            <returns>Hash code. Consistent with overridden equality.</returns>
        </member>
        <member name="M:K4AdotNet.Float3.ToString(System.String,System.IFormatProvider)">
            <summary>Formats vector as <c>[X Y Z]</c> string.</summary>
            <param name="format">Format string for each individual component in string representation.</param>
            <param name="formatProvider">Culture for formatting numbers to strings.</param>
            <returns>String representation of vector in a given Culture.</returns>
        </member>
        <member name="M:K4AdotNet.Float3.ToString">
            <summary>Formats vector as <c>[X Y Z]</c> string.</summary>
            <returns><c>[X Y Z]</c>.</returns>
        </member>
        <member name="F:K4AdotNet.Float3.Zero">
            <summary>Zero vector.</summary>
        </member>
        <member name="F:K4AdotNet.Float3.UnitX">
            <summary>Unit vector in +X direction.</summary>
        </member>
        <member name="F:K4AdotNet.Float3.UnitY">
            <summary>Unit vector in +Y direction.</summary>
        </member>
        <member name="F:K4AdotNet.Float3.UnitZ">
            <summary>Unit vector in +Z direction.</summary>
        </member>
        <member name="T:K4AdotNet.Float3x3">
            <summary>Placeholder for 3x3 matrix data.</summary>
        </member>
        <member name="F:K4AdotNet.Float3x3.M11">
            <summary>First row, first column.</summary>
        </member>
        <member name="F:K4AdotNet.Float3x3.M12">
            <summary>First row, second column.</summary>
        </member>
        <member name="F:K4AdotNet.Float3x3.M13">
            <summary>First row, third column.</summary>
        </member>
        <member name="F:K4AdotNet.Float3x3.M21">
            <summary>Second row, first column.</summary>
        </member>
        <member name="F:K4AdotNet.Float3x3.M22">
            <summary>Second row, second column.</summary>
        </member>
        <member name="F:K4AdotNet.Float3x3.M23">
            <summary>Second row, third column.</summary>
        </member>
        <member name="F:K4AdotNet.Float3x3.M31">
            <summary>Third row, first column.</summary>
        </member>
        <member name="F:K4AdotNet.Float3x3.M32">
            <summary>Third row, second column.</summary>
        </member>
        <member name="F:K4AdotNet.Float3x3.M33">
            <summary>Third row, third column.</summary>
        </member>
        <member name="M:K4AdotNet.Float3x3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Creates matrix initialized by specified values.</summary>
            <param name="m11">Value for <see cref="F:K4AdotNet.Float3x3.M11"/> (first row, first column).</param>
            <param name="m12">Value for <see cref="F:K4AdotNet.Float3x3.M12"/> (first row, second column).</param>
            <param name="m13">Value for <see cref="F:K4AdotNet.Float3x3.M13"/> (first row, third column).</param>
            <param name="m21">Value for <see cref="F:K4AdotNet.Float3x3.M21"/> (second row, first column).</param>
            <param name="m22">Value for <see cref="F:K4AdotNet.Float3x3.M22"/> (second row, second column).</param>
            <param name="m23">Value for <see cref="F:K4AdotNet.Float3x3.M23"/> (second row, third column).</param>
            <param name="m31">Value for <see cref="F:K4AdotNet.Float3x3.M31"/> (third row, first column).</param>
            <param name="m32">Value for <see cref="F:K4AdotNet.Float3x3.M32"/> (third row, second column).</param>
            <param name="m33">Value for <see cref="F:K4AdotNet.Float3x3.M33"/> (third row, thirst column).</param>
        </member>
        <member name="M:K4AdotNet.Float3x3.#ctor(System.Single[])">
            <summary>Creates matrix from array representation.</summary>
            <param name="values">Array representation of matrix. Not <see langword="null"/>. 9 elements.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> equals to <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Wrong length of <paramref name="values"/> array.</exception>
        </member>
        <member name="M:K4AdotNet.Float3x3.ToArray">
            <summary>Converts matrix structure to array representation.</summary>
            <returns>Array representation of matrix. Not <see langword="null"/>.</returns>
        </member>
        <member name="P:K4AdotNet.Float3x3.Item(System.Int32)">
            <summary>One dimensional indexed access to matrix components.</summary>
            <param name="index">Index of matrix component.</param>
            <returns>Matrix element.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> has invalid value.</exception>
        </member>
        <member name="P:K4AdotNet.Float3x3.Item(System.Int32,System.Int32)">
            <summary>Two dimensional indexed access to matrix components.</summary>
            <param name="rowIndex">Zero-based row index.</param>
            <param name="columnIndex">Zero-based row index.</param>
            <returns>Matrix element.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="rowIndex"/> or <paramref name="columnIndex"/> has invalid value.</exception>
        </member>
        <member name="M:K4AdotNet.Float3x3.Equals(K4AdotNet.Float3x3)">
            <summary>Per-elements comparison.</summary>
            <param name="other">Another matrix to be compared with this one.</param>
            <returns><see langword="true"/> if all elements of <paramref name="other"/> are equal to appropriate elements of this matrix.</returns>
        </member>
        <member name="M:K4AdotNet.Float3x3.Equals(System.Object)">
            <summary>Overloads <see cref="M:System.Object.Equals(System.Object)"/> to be consistent with <see cref="M:K4AdotNet.Float3x3.Equals(K4AdotNet.Float3x3)"/>.</summary>
            <param name="obj">Object to be compared with this matrix.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is a <see cref="T:K4AdotNet.Float3x3"/> and is equal to this one.</returns>
            <seealso cref="M:K4AdotNet.Float3x3.Equals(K4AdotNet.Float3x3)"/>
        </member>
        <member name="M:K4AdotNet.Float3x3.op_Equality(K4AdotNet.Float3x3,K4AdotNet.Float3x3)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Float3x3.Equals(K4AdotNet.Float3x3)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> equals to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Float3x3.Equals(K4AdotNet.Float3x3)"/>
        </member>
        <member name="M:K4AdotNet.Float3x3.op_Inequality(K4AdotNet.Float3x3,K4AdotNet.Float3x3)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Float3x3.Equals(K4AdotNet.Float3x3)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Float3x3.Equals(K4AdotNet.Float3x3)"/>
        </member>
        <member name="M:K4AdotNet.Float3x3.GetHashCode">
            <summary>Calculates hash code.</summary>
            <returns>Hash code. Consistent with overridden equality.</returns>
        </member>
        <member name="M:K4AdotNet.Float3x3.ToString(System.String,System.IFormatProvider)">
            <summary>Formats matrix in convenient manner.</summary>
            <param name="format">Format string for each individual component in string representation.</param>
            <param name="formatProvider">Culture for formatting numbers to strings.</param>
            <returns>String representation of matrix in a given Culture.</returns>
        </member>
        <member name="M:K4AdotNet.Float3x3.ToString">
            <summary>Formats matrix in convenient manner.</summary>
            <returns>String representation of matrix .</returns>
        </member>
        <member name="F:K4AdotNet.Float3x3.Zero">
            <summary>Zero matrix (all elements are 0).</summary>
        </member>
        <member name="F:K4AdotNet.Float3x3.Identity">
            <summary>Identity matrix (diagonal elements are 1, other are 0).</summary>
        </member>
        <member name="T:K4AdotNet.Helpers">
            <summary>Internal helper methods.</summary>
        </member>
        <member name="T:K4AdotNet.IDisposablePlus">
            <summary>
            <see cref="T:System.IDisposable"/> interface with additions: property <see cref="P:K4AdotNet.IDisposablePlus.IsDisposed"/> and event <see cref="E:K4AdotNet.IDisposablePlus.Disposed"/>.
            </summary>
        </member>
        <member name="P:K4AdotNet.IDisposablePlus.IsDisposed">
            <summary>Gets a value indicating whether the object has been disposed of.</summary>
        </member>
        <member name="E:K4AdotNet.IDisposablePlus.Disposed">
            <summary>Raised on object disposing (only once).</summary>
        </member>
        <member name="T:K4AdotNet.IReferenceDuplicatable`1">
            <summary>
            Interface for objects which reference unmanaged objects and support reference counting.
            </summary>
            <typeparam name="T">Type implemented this interface.</typeparam>
        </member>
        <member name="M:K4AdotNet.IReferenceDuplicatable`1.DuplicateReference">
            <summary>
            Creates new managed object that references exactly the same unmanaged object as original one.
            </summary>
            <returns>
            New managed object that references exactly to the same unmanaged object as original one. Not <see langword="null"/>.
            </returns>
            <remarks><para>
            Under the hood, references counter is incremented during call to this method.
            </para><para>
            To release reference, that is decrement reference counter call <see cref="M:System.IDisposable.Dispose"/> method of object.
            </para><para>
            It helps to manage underlying object lifetime and to access object data from different threads and different components of application.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
            <seealso cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:K4AdotNet.Logging.LogImpl">
            <summary>
            Internal helper class which implements logging-related logic.
            </summary>
        </member>
        <member name="T:K4AdotNet.Logging.LogLevel">
            <summary>Verbosity levels of debug messaging.</summary>
        </member>
        <member name="F:K4AdotNet.Logging.LogLevel.Critical">
            <summary>The most severe level of debug messaging.</summary>
        </member>
        <member name="F:K4AdotNet.Logging.LogLevel.Error">
            <summary>The second most severe level of debug messaging.</summary>
        </member>
        <member name="F:K4AdotNet.Logging.LogLevel.Warning">
            <summary>The third most severe level of debug messaging.</summary>
        </member>
        <member name="F:K4AdotNet.Logging.LogLevel.Information">
            <summary>The second least severe level of debug messaging.</summary>
        </member>
        <member name="F:K4AdotNet.Logging.LogLevel.Trace">
            <summary>The lest severe level of debug messaging. This is the most verbose messaging possible.</summary>
        </member>
        <member name="F:K4AdotNet.Logging.LogLevel.Off">
            <summary>No logging is performed.</summary>
        </member>
        <member name="T:K4AdotNet.Logging.NativeApi">
            <summary>DLL imports from <c>k4a.h</c> header file for native functions that are connected with logging.</summary>
        </member>
        <member name="T:K4AdotNet.Logging.NativeApi.LoggingMessageCallback">
            <summary>Callback function for debug messages being generated by the Azure Kinect SDK.</summary>
            <param name="context">The context of the callback function. This is the context that was supplied by the caller to <see cref="M:K4AdotNet.Logging.NativeApi.SetDebugMessageHandler(K4AdotNet.Logging.NativeApi.LoggingMessageCallback,System.IntPtr,K4AdotNet.Logging.LogLevel)"/>.</param>
            <param name="level">The level of the message that has been created.</param>
            <param name="file">The file name of the source file that generated the message.</param>
            <param name="line">The line number of the source file that generated the message.</param>
            <param name="message">The messaged generated by the Azure Kinect SDK.</param>
            <remarks><para>
            The callback is called asynchronously when the Azure Kinext SDK generates a message at a <paramref name="level"/> that is equal to
            or more critical than the level specified when calling <see cref="M:K4AdotNet.Logging.NativeApi.SetDebugMessageHandler(K4AdotNet.Logging.NativeApi.LoggingMessageCallback,System.IntPtr,K4AdotNet.Logging.LogLevel)"/> to register the callback.
            </para><para>
            This callback can occur from any thread and blocks the calling thread.This callback user
            must protect it's logging resources from concurrent calls. All care should be made to minimize the amount of time
            locks are held.
            </para></remarks>
        </member>
        <member name="M:K4AdotNet.Logging.NativeApi.SetDebugMessageHandler(K4AdotNet.Logging.NativeApi.LoggingMessageCallback,System.IntPtr,K4AdotNet.Logging.LogLevel)">
            <summary>Sets and clears the callback function to receive debug messages from the Azure Kinect device.</summary>
            <param name="messageCallback">The callback function to receive messages from. Set to <see langword="null"/> to unregister the callback function.</param>
            <param name="messageCallbackContext">The callback functions context.</param>
            <param name="minLevel">The least critical error the user wants to be notified about.</param>
            <returns>
                <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if the callback function was set or cleared successfully.
                <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> if an error is encountered or the callback function has already been set.
            </returns>
            <remarks><para>
            Call this function to set or clear the callback function that is used to deliver debug messages to the caller. This
            callback may be called concurrently, it is up to the implementation of the callback function to ensure the
            parallelization is handled.
            </para><para>
            Clearing the callback function will block until all pending calls to the callback function have completed.
            </para><para>
            To update <paramref name="minLevel"/>, this method can be called with the same value <paramref name="messageCallback"/> and by
            specifying a new <paramref name="minLevel"/>.
            </para><para>
            Logging provided via this API is independent of the logging controlled by the environmental variable controls
            <c>K4A_ENABLE_LOG_TO_STDOUT</c>, <c>K4A_ENABLE_LOG_TO_A_FILE</c>, and <c>K4A_LOG_LEVEL</c>. However there is a slight change in
            default behavior when using this function.By default, when \p k4a_set_debug_message_handler() has not been used to
            register a message callback, the default for environmental variable controls is to send debug messages as if
            <c>K4A_ENABLE_LOG_TO_STDOUT= 1</c> were set. If this method registers a callback function before
            <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)"/> is called, then the default for environmental controls
            is as if <c>K4A_ENABLE_LOG_TO_STDOUT= 0</c> was specified. Physically specifying the environmental control will override the default.
            </para></remarks>
        </member>
        <member name="T:K4AdotNet.Microseconds32">
            <summary>32-bit time value in microseconds. Used for timestamps and delays.</summary>
            <remarks>
            Actually, this structure is an simple wrapper of <see cref="T:System.Int32"/> type.
            And <see cref="T:K4AdotNet.Microseconds32"/> value can be smoothly converted to/from <see cref="T:System.Int32"/> and <see cref="T:System.TimeSpan"/> values for convenience of usage in your code.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Microseconds32.ValueUsec">
            <summary>Value in microseconds.</summary>
            <remarks>This structure is an wrapper around this value.</remarks>
        </member>
        <member name="M:K4AdotNet.Microseconds32.#ctor(System.Int32)">
            <summary>Creates instance from integer value in microseconds.</summary>
            <param name="valueUsec">Value in microseconds.</param>
        </member>
        <member name="M:K4AdotNet.Microseconds32.#ctor(System.TimeSpan)">
            <summary>Creates instance from <see cref="T:System.TimeSpan"/> value.</summary>
            <param name="value">This value will be converted from <see cref="P:System.TimeSpan.Ticks"/> to microseconds.</param>
        </member>
        <member name="M:K4AdotNet.Microseconds32.ToTimeSpan">
            <summary>Converts to <see cref="T:System.TimeSpan"/>.</summary>
            <returns><see cref="T:System.TimeSpan"/> representation of this value.</returns>
        </member>
        <member name="P:K4AdotNet.Microseconds32.TotalSeconds">
            <summary>The total number of seconds represented by this instance.</summary>
        </member>
        <member name="P:K4AdotNet.Microseconds32.TotalMilliseconds">
            <summary>The total number of milliseconds represented by this instance.</summary>
        </member>
        <member name="M:K4AdotNet.Microseconds32.Equals(K4AdotNet.Microseconds32)">
            <summary>Equality exactly like <see cref="T:System.Int32"/> type has.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns><see langword="true"/> if values are equal.</returns>
        </member>
        <member name="M:K4AdotNet.Microseconds32.Equals(System.TimeSpan)">
            <summary>Equality with another value specified as <see cref="T:System.TimeSpan"/>.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns><see langword="true"/> if values are equal.</returns>
        </member>
        <member name="M:K4AdotNet.Microseconds32.Equals(System.Int32)">
            <summary>Equality exactly like <see cref="T:System.Int32"/> type has.</summary>
            <param name="otherUsec">Another value in microseconds to be compared with this one.</param>
            <returns><see langword="true"/> if values are equal.</returns>
        </member>
        <member name="M:K4AdotNet.Microseconds32.CompareTo(K4AdotNet.Microseconds32)">
            <summary>Two values comparison exactly like <see cref="T:System.Int32"/> type has.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            For details see <see cref="M:System.Int32.CompareTo(System.Int32)"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)">
            <summary>Two values comparison.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            For details see <see cref="M:System.Int32.CompareTo(System.Int32)"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)">
            <summary>Two values comparison exactly like <see cref="T:System.Int32"/> type has.</summary>
            <param name="otherUsec">Another value in microseconds to be compared with this one.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            For details see <see cref="M:System.Int32.CompareTo(System.Int32)"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Microseconds32.CompareTo(System.Object)">
            <summary>Can compare current instance with <see cref="T:K4AdotNet.Microseconds32"/>, <see cref="T:System.TimeSpan"/> and <see cref="T:System.IConvertible"/> value.</summary>
            <param name="obj">Value to be compared with this one.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            For details see <see cref="M:System.Int32.CompareTo(System.Int32)"/>.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not comparable with this one.</exception>
        </member>
        <member name="M:K4AdotNet.Microseconds32.ToString(System.String,System.IFormatProvider)">
            <summary>String representation of current instance.</summary>
            <param name="format">The format to use or <see langword="null"/> for default format.</param>
            <param name="formatProvider">The provider to use to format the value or <see langword="null"/> to obtain the numeric format information from the current locale setting.</param>
            <returns><c>{value} usec</c></returns>
        </member>
        <member name="M:K4AdotNet.Microseconds32.Equals(System.Object)">
            <summary>Overloads <see cref="M:System.Object.Equals(System.Object)"/> to be consistent with <see cref="M:K4AdotNet.Microseconds32.Equals(K4AdotNet.Microseconds32)"/>.</summary>
            <param name="obj">Object to be compared with this instance.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> can be cast to <see cref="T:K4AdotNet.Microseconds32"/> and result is equal to this one.</returns>
        </member>
        <member name="M:K4AdotNet.Microseconds32.GetHashCode">
            <summary>Calculates hash code.</summary>
            <returns>Hash code. Consistent with overridden equality.</returns>
        </member>
        <member name="M:K4AdotNet.Microseconds32.ToString">
            <summary>String representation of current instance.</summary>
            <returns><c>{value} usec</c></returns>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_Equality(K4AdotNet.Microseconds32,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.Equals(K4AdotNet.Microseconds32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.Equals(K4AdotNet.Microseconds32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_Inequality(K4AdotNet.Microseconds32,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.Equals(K4AdotNet.Microseconds32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.Equals(K4AdotNet.Microseconds32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_LessThan(K4AdotNet.Microseconds32,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(K4AdotNet.Microseconds32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(K4AdotNet.Microseconds32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_GreaterThan(K4AdotNet.Microseconds32,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(K4AdotNet.Microseconds32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(K4AdotNet.Microseconds32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_LessThanOrEqual(K4AdotNet.Microseconds32,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(K4AdotNet.Microseconds32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(K4AdotNet.Microseconds32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_GreaterThanOrEqual(K4AdotNet.Microseconds32,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(K4AdotNet.Microseconds32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(K4AdotNet.Microseconds32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_Equality(K4AdotNet.Microseconds32,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.Equals(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.Equals(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_Inequality(K4AdotNet.Microseconds32,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.Equals(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.Equals(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_LessThan(K4AdotNet.Microseconds32,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_GreaterThan(K4AdotNet.Microseconds32,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_LessThanOrEqual(K4AdotNet.Microseconds32,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_GreaterThanOrEqual(K4AdotNet.Microseconds32,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_Equality(System.TimeSpan,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.Equals(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.Equals(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_Inequality(System.TimeSpan,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.Equals(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.Equals(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_LessThan(System.TimeSpan,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_GreaterThan(System.TimeSpan,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_LessThanOrEqual(System.TimeSpan,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_GreaterThanOrEqual(System.TimeSpan,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_Equality(K4AdotNet.Microseconds32,System.Int32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.Equals(System.Int32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightUsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="rightUsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.Equals(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_Inequality(K4AdotNet.Microseconds32,System.Int32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.Equals(System.Int32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightUsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="rightUsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.Equals(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_LessThan(K4AdotNet.Microseconds32,System.Int32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightUsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="rightUsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_GreaterThan(K4AdotNet.Microseconds32,System.Int32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightUsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="rightUsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_LessThanOrEqual(K4AdotNet.Microseconds32,System.Int32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightUsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="rightUsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_GreaterThanOrEqual(K4AdotNet.Microseconds32,System.Int32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightUsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="rightUsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_Equality(System.Int32,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.Equals(System.Int32)"/>.</summary>
            <param name="leftUsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftUsec"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.Equals(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_Inequality(System.Int32,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.Equals(System.Int32)"/>.</summary>
            <param name="leftUsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftUsec"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.Equals(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_LessThan(System.Int32,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)"/>.</summary>
            <param name="leftUsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftUsec"/> is less than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_GreaterThan(System.Int32,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)"/>.</summary>
            <param name="leftUsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftUsec"/> is greater than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_LessThanOrEqual(System.Int32,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)"/>.</summary>
            <param name="leftUsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftUsec"/> is less than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_GreaterThanOrEqual(System.Int32,K4AdotNet.Microseconds32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)"/>.</summary>
            <param name="leftUsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftUsec"/> is greater than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds32.CompareTo(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_Implicit(K4AdotNet.Microseconds32)~System.TimeSpan">
            <summary>Implicit conversion to <see cref="T:System.TimeSpan"/>.</summary>
            <param name="value">Value to be converted to <see cref="T:System.TimeSpan"/>.</param>
            <seealso cref="M:K4AdotNet.Microseconds32.ToTimeSpan"/>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_Implicit(System.TimeSpan)~K4AdotNet.Microseconds32">
            <summary>Implicit conversion from <see cref="T:System.TimeSpan"/>.</summary>
            <param name="value">Value to be converted to <see cref="T:K4AdotNet.Microseconds32"/>.</param>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_Implicit(K4AdotNet.Microseconds32)~System.Int32">
            <summary>Implicit conversion to <see cref="T:System.Int32"/> value in microseconds.</summary>
            <param name="value">Value to be converted to <see cref="T:System.Int32"/>.</param>
        </member>
        <member name="M:K4AdotNet.Microseconds32.op_Implicit(System.Int32)~K4AdotNet.Microseconds32">
            <summary>Implicit conversion from <see cref="T:System.Int32"/>.</summary>
            <param name="valueUsec">Value in microseconds to be converted to <see cref="T:K4AdotNet.Microseconds32"/>.</param>
        </member>
        <member name="M:K4AdotNet.Microseconds32.FromSeconds(System.Double)">
            <summary>Creates instance of <see cref="T:K4AdotNet.Microseconds32"/> from seconds.</summary>
            <param name="valueSec">Value in seconds.</param>
            <returns>Created value.</returns>
        </member>
        <member name="M:K4AdotNet.Microseconds32.FromMilliseconds(System.Double)">
            <summary>Creates instance of <see cref="T:K4AdotNet.Microseconds32"/> from milliseconds.</summary>
            <param name="valueMs">Value in milliseconds.</param>
            <returns>Created value.</returns>
        </member>
        <member name="F:K4AdotNet.Microseconds32.Zero">
            <summary>Zero value.</summary>
        </member>
        <member name="T:K4AdotNet.Microseconds64">
            <summary>64-bit time value in microseconds. Used for timestamps and delays.</summary>
            <remarks>
            Actually, this structure is an simple wrapper of <see cref="T:System.Int64"/> type.
            And <see cref="T:K4AdotNet.Microseconds64"/> value can be smoothly converted to/from <see cref="T:System.Int64"/> and <see cref="T:System.TimeSpan"/> values for convenience of usage in your code.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Microseconds64.ValueUsec">
            <summary>Value in microseconds.</summary>
            <remarks>This structure is an wrapper around this value.</remarks>
        </member>
        <member name="M:K4AdotNet.Microseconds64.#ctor(System.Int64)">
            <summary>Creates instance from 64-bit integer value in microseconds.</summary>
            <param name="valueUsec">Value in microseconds.</param>
        </member>
        <member name="M:K4AdotNet.Microseconds64.#ctor(System.TimeSpan)">
            <summary>Creates instance from <see cref="T:System.TimeSpan"/> value.</summary>
            <param name="value">This value will be converted from <see cref="P:System.TimeSpan.Ticks"/> to microseconds.</param>
        </member>
        <member name="M:K4AdotNet.Microseconds64.ToTimeSpan">
            <summary>Converts to <see cref="T:System.TimeSpan"/>.</summary>
            <returns><see cref="T:System.TimeSpan"/> representation of this value.</returns>
        </member>
        <member name="P:K4AdotNet.Microseconds64.TotalSeconds">
            <summary>The total number of seconds represented by this instance.</summary>
        </member>
        <member name="P:K4AdotNet.Microseconds64.TotalMilliseconds">
            <summary>The total number of milliseconds represented by this instance.</summary>
        </member>
        <member name="M:K4AdotNet.Microseconds64.Equals(K4AdotNet.Microseconds64)">
            <summary>Equality exactly like <see cref="T:System.Int64"/> type has.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns><see langword="true"/> if values are equal.</returns>
        </member>
        <member name="M:K4AdotNet.Microseconds64.Equals(System.TimeSpan)">
            <summary>Equality with another value specified as <see cref="T:System.TimeSpan"/>.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns><see langword="true"/> if values are equal.</returns>
        </member>
        <member name="M:K4AdotNet.Microseconds64.Equals(System.Int64)">
            <summary>Equality exactly like <see cref="T:System.Int64"/> type has.</summary>
            <param name="otherUsec">Another value in microseconds to be compared with this one.</param>
            <returns><see langword="true"/> if values are equal.</returns>
        </member>
        <member name="M:K4AdotNet.Microseconds64.CompareTo(K4AdotNet.Microseconds64)">
            <summary>Two values comparison exactly like <see cref="T:System.Int64"/> type has.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            For details see <see cref="M:System.Int64.CompareTo(System.Int64)"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)">
            <summary>Two values comparison.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            For details see <see cref="M:System.Int64.CompareTo(System.Int64)"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)">
            <summary>Two values comparison exactly like <see cref="T:System.Int64"/> type has.</summary>
            <param name="otherUsec">Another value in microseconds to be compared with this one.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            For details see <see cref="M:System.Int64.CompareTo(System.Int64)"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Microseconds64.CompareTo(System.Object)">
            <summary>Can compare current instance with <see cref="T:K4AdotNet.Microseconds64"/>, <see cref="T:System.TimeSpan"/> and <see cref="T:System.IConvertible"/> value.</summary>
            <param name="obj">Value to be compared with this one.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            For details see <see cref="M:System.Int64.CompareTo(System.Int64)"/>.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not comparable with this one.</exception>
        </member>
        <member name="M:K4AdotNet.Microseconds64.ToString(System.String,System.IFormatProvider)">
            <summary>String representation of current instance.</summary>
            <param name="format">The format to use or <see langword="null"/> for default format.</param>
            <param name="formatProvider">The provider to use to format the value or <see langword="null"/> to obtain the numeric format information from the current locale setting.</param>
            <returns><c>{value} usec</c></returns>
        </member>
        <member name="M:K4AdotNet.Microseconds64.Equals(System.Object)">
            <summary>Overloads <see cref="M:System.Object.Equals(System.Object)"/> to be consistent with <see cref="M:K4AdotNet.Microseconds64.Equals(K4AdotNet.Microseconds64)"/>.</summary>
            <param name="obj">Object to be compared with this instance.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> can be cast to <see cref="T:K4AdotNet.Microseconds64"/> and result is equal to this one.</returns>
        </member>
        <member name="M:K4AdotNet.Microseconds64.GetHashCode">
            <summary>Calculates hash code.</summary>
            <returns>Hash code. Consistent with overridden equality.</returns>
        </member>
        <member name="M:K4AdotNet.Microseconds64.ToString">
            <summary>String representation of current instance.</summary>
            <returns><c>{value} usec</c></returns>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_Equality(K4AdotNet.Microseconds64,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.Equals(K4AdotNet.Microseconds64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> equals to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.Equals(K4AdotNet.Microseconds64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_Inequality(K4AdotNet.Microseconds64,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.Equals(K4AdotNet.Microseconds64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.Equals(K4AdotNet.Microseconds64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_LessThan(K4AdotNet.Microseconds64,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(K4AdotNet.Microseconds64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(K4AdotNet.Microseconds64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_GreaterThan(K4AdotNet.Microseconds64,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(K4AdotNet.Microseconds64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(K4AdotNet.Microseconds64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_LessThanOrEqual(K4AdotNet.Microseconds64,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(K4AdotNet.Microseconds64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(K4AdotNet.Microseconds64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_GreaterThanOrEqual(K4AdotNet.Microseconds64,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(K4AdotNet.Microseconds64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(K4AdotNet.Microseconds64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_Equality(K4AdotNet.Microseconds64,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.Equals(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.Equals(K4AdotNet.Microseconds64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_Inequality(K4AdotNet.Microseconds64,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.Equals(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.Equals(K4AdotNet.Microseconds64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_LessThan(K4AdotNet.Microseconds64,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_GreaterThan(K4AdotNet.Microseconds64,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_LessThanOrEqual(K4AdotNet.Microseconds64,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_GreaterThanOrEqual(K4AdotNet.Microseconds64,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_Equality(System.TimeSpan,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.Equals(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.Equals(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_Inequality(System.TimeSpan,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.Equals(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.Equals(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_LessThan(System.TimeSpan,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_GreaterThan(System.TimeSpan,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_LessThanOrEqual(System.TimeSpan,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_GreaterThanOrEqual(System.TimeSpan,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_Equality(K4AdotNet.Microseconds64,System.Int64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.Equals(System.Int64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightUsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="rightUsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.Equals(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_Inequality(K4AdotNet.Microseconds64,System.Int64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.Equals(System.Int64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightUsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="rightUsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.Equals(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_LessThan(K4AdotNet.Microseconds64,System.Int64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightUsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="rightUsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_GreaterThan(K4AdotNet.Microseconds64,System.Int64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightUsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="rightUsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_LessThanOrEqual(K4AdotNet.Microseconds64,System.Int64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightUsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="rightUsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_GreaterThanOrEqual(K4AdotNet.Microseconds64,System.Int64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightUsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="rightUsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_Equality(System.Int64,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.Equals(System.Int64)"/>.</summary>
            <param name="leftUsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftUsec"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.Equals(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_Inequality(System.Int64,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.Equals(System.Int64)"/>.</summary>
            <param name="leftUsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftUsec"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.Equals(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_LessThan(System.Int64,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)"/>.</summary>
            <param name="leftUsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftUsec"/> is less than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_GreaterThan(System.Int64,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)"/>.</summary>
            <param name="leftUsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftUsec"/> is greater than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_LessThanOrEqual(System.Int64,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)"/>.</summary>
            <param name="leftUsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftUsec"/> is less than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_GreaterThanOrEqual(System.Int64,K4AdotNet.Microseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)"/>.</summary>
            <param name="leftUsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftUsec"/> is greater than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Microseconds64.CompareTo(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_Implicit(K4AdotNet.Microseconds64)~System.TimeSpan">
            <summary>Implicit conversion to <see cref="T:System.TimeSpan"/>.</summary>
            <param name="value">Value to be converted to <see cref="T:System.TimeSpan"/>.</param>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_Implicit(System.TimeSpan)~K4AdotNet.Microseconds64">
            <summary>Implicit conversion from <see cref="T:System.TimeSpan"/>.</summary>
            <param name="value">Value to be converted to <see cref="T:K4AdotNet.Microseconds64"/>.</param>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_Implicit(K4AdotNet.Microseconds64)~System.Int64">
            <summary>Implicit conversion to <see cref="T:System.Int64"/> value in microseconds.</summary>
            <param name="value">Value to be converted to <see cref="T:System.Int64"/>.</param>
        </member>
        <member name="M:K4AdotNet.Microseconds64.op_Implicit(System.Int64)~K4AdotNet.Microseconds64">
            <summary>Implicit conversion from <see cref="T:System.Int64"/>.</summary>
            <param name="valueUsec">Value in microseconds to be converted to <see cref="T:K4AdotNet.Microseconds64"/>.</param>
        </member>
        <member name="M:K4AdotNet.Microseconds64.FromSeconds(System.Double)">
            <summary>Creates instance of <see cref="T:K4AdotNet.Microseconds64"/> from seconds.</summary>
            <param name="valueSec">Value in seconds.</param>
            <returns>Created value.</returns>
        </member>
        <member name="M:K4AdotNet.Microseconds64.FromMilliseconds(System.Double)">
            <summary>Creates instance of <see cref="T:K4AdotNet.Microseconds64"/> from milliseconds.</summary>
            <param name="valueMs">Value in milliseconds.</param>
            <returns>Created value.</returns>
        </member>
        <member name="F:K4AdotNet.Microseconds64.Zero">
            <summary>Zero value.</summary>
        </member>
        <member name="T:K4AdotNet.Nanoseconds64">
            <summary>64-bit time value in nanoseconds. Used for system timestamps.</summary>
            <remarks>
            Actually, this structure is an simple wrapper of <see cref="T:System.Int64"/> type.
            And <see cref="T:K4AdotNet.Nanoseconds64"/> value can be smoothly converted to/from <see cref="T:System.Int64"/> and <see cref="T:System.TimeSpan"/> values for convenience of usage in your code.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Nanoseconds64.ValueNsec">
            <summary>Value in nanoseconds.</summary>
            <remarks>This structure is an wrapper around this value.</remarks>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.#ctor(System.Int64)">
            <summary>Creates instance from 64-bit integer value in nanoseconds.</summary>
            <param name="valueNsec">Value in nanoseconds.</param>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.#ctor(System.TimeSpan)">
            <summary>Creates instance from <see cref="T:System.TimeSpan"/> value.</summary>
            <param name="value">This value will be converted from <see cref="P:System.TimeSpan.Ticks"/> to nanoseconds.</param>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.ToTimeSpan">
            <summary>Converts to <see cref="T:System.TimeSpan"/>.</summary>
            <returns><see cref="T:System.TimeSpan"/> representation of this value.</returns>
        </member>
        <member name="P:K4AdotNet.Nanoseconds64.TotalSeconds">
            <summary>The total number of seconds represented by this instance.</summary>
        </member>
        <member name="P:K4AdotNet.Nanoseconds64.TotalMilliseconds">
            <summary>The total number of milliseconds represented by this instance.</summary>
        </member>
        <member name="P:K4AdotNet.Nanoseconds64.TotalMicroseconds">
            <summary>The total number of microseconds represented by this instance.</summary>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.Equals(K4AdotNet.Nanoseconds64)">
            <summary>Equality exactly like <see cref="T:System.Int64"/> type has.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns><see langword="true"/> if values are equal.</returns>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.Equals(System.TimeSpan)">
            <summary>Equality with another value specified as <see cref="T:System.TimeSpan"/>.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns><see langword="true"/> if values are equal.</returns>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.Equals(System.Int64)">
            <summary>Equality exactly like <see cref="T:System.Int64"/> type has.</summary>
            <param name="otherNsec">Another value in nanoseconds to be compared with this one.</param>
            <returns><see langword="true"/> if values are equal.</returns>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.CompareTo(K4AdotNet.Nanoseconds64)">
            <summary>Two values comparison exactly like <see cref="T:System.Int64"/> type has.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            For details see <see cref="M:System.Int64.CompareTo(System.Int64)"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)">
            <summary>Two values comparison.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            For details see <see cref="M:System.Int64.CompareTo(System.Int64)"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)">
            <summary>Two values comparison exactly like <see cref="T:System.Int64"/> type has.</summary>
            <param name="otherNsec">Another value in nanoseconds to be compared with this one.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            For details see <see cref="M:System.Int64.CompareTo(System.Int64)"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.CompareTo(System.Object)">
            <summary>Can compare current instance with <see cref="T:K4AdotNet.Nanoseconds64"/>, <see cref="T:System.TimeSpan"/> and <see cref="T:System.IConvertible"/> value.</summary>
            <param name="obj">Value to be compared with this one.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            For details see <see cref="M:System.Int64.CompareTo(System.Int64)"/>.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not comparable with this one.</exception>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.ToString(System.String,System.IFormatProvider)">
            <summary>String representation of current instance.</summary>
            <param name="format">The format to use or <see langword="null"/> for default format.</param>
            <param name="formatProvider">The provider to use to format the value or <see langword="null"/> to obtain the numeric format information from the current locale setting.</param>
            <returns><c>{value} nsec</c></returns>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.Equals(System.Object)">
            <summary>Overloads <see cref="M:System.Object.Equals(System.Object)"/> to be consistent with <see cref="M:K4AdotNet.Nanoseconds64.Equals(K4AdotNet.Nanoseconds64)"/>.</summary>
            <param name="obj">Object to be compared with this instance.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> can be cast to <see cref="T:K4AdotNet.Nanoseconds64"/> and result is equal to this one.</returns>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.GetHashCode">
            <summary>Calculates hash code.</summary>
            <returns>Hash code. Consistent with overridden equality.</returns>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.ToString">
            <summary>String representation of current instance.</summary>
            <returns><c>{value} nsec</c></returns>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_Equality(K4AdotNet.Nanoseconds64,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.Equals(K4AdotNet.Nanoseconds64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> equals to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.Equals(K4AdotNet.Nanoseconds64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_Inequality(K4AdotNet.Nanoseconds64,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.Equals(K4AdotNet.Nanoseconds64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.Equals(K4AdotNet.Nanoseconds64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_LessThan(K4AdotNet.Nanoseconds64,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(K4AdotNet.Nanoseconds64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(K4AdotNet.Nanoseconds64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_GreaterThan(K4AdotNet.Nanoseconds64,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(K4AdotNet.Nanoseconds64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(K4AdotNet.Nanoseconds64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_LessThanOrEqual(K4AdotNet.Nanoseconds64,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(K4AdotNet.Nanoseconds64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(K4AdotNet.Nanoseconds64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_GreaterThanOrEqual(K4AdotNet.Nanoseconds64,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(K4AdotNet.Nanoseconds64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(K4AdotNet.Nanoseconds64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_Equality(K4AdotNet.Nanoseconds64,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.Equals(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.Equals(K4AdotNet.Nanoseconds64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_Inequality(K4AdotNet.Nanoseconds64,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.Equals(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.Equals(K4AdotNet.Nanoseconds64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_LessThan(K4AdotNet.Nanoseconds64,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_GreaterThan(K4AdotNet.Nanoseconds64,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_LessThanOrEqual(K4AdotNet.Nanoseconds64,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_GreaterThanOrEqual(K4AdotNet.Nanoseconds64,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_Equality(System.TimeSpan,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.Equals(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.Equals(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_Inequality(System.TimeSpan,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.Equals(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.Equals(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_LessThan(System.TimeSpan,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_GreaterThan(System.TimeSpan,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_LessThanOrEqual(System.TimeSpan,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_GreaterThanOrEqual(System.TimeSpan,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_Equality(K4AdotNet.Nanoseconds64,System.Int64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.Equals(System.Int64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightNsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="rightNsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.Equals(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_Inequality(K4AdotNet.Nanoseconds64,System.Int64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.Equals(System.Int64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightNsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="rightNsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.Equals(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_LessThan(K4AdotNet.Nanoseconds64,System.Int64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightNsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="rightNsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_GreaterThan(K4AdotNet.Nanoseconds64,System.Int64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightNsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="rightNsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_LessThanOrEqual(K4AdotNet.Nanoseconds64,System.Int64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightNsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="rightNsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_GreaterThanOrEqual(K4AdotNet.Nanoseconds64,System.Int64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightNsec">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="rightNsec"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_Equality(System.Int64,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.Equals(System.Int64)"/>.</summary>
            <param name="leftNsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftNsec"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.Equals(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_Inequality(System.Int64,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.Equals(System.Int64)"/>.</summary>
            <param name="leftNsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftNsec"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.Equals(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_LessThan(System.Int64,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)"/>.</summary>
            <param name="leftNsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftNsec"/> is less than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_GreaterThan(System.Int64,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)"/>.</summary>
            <param name="leftNsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftNsec"/> is greater than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_LessThanOrEqual(System.Int64,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)"/>.</summary>
            <param name="leftNsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftNsec"/> is less than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_GreaterThanOrEqual(System.Int64,K4AdotNet.Nanoseconds64)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)"/>.</summary>
            <param name="leftNsec">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftNsec"/> is greater than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Nanoseconds64.CompareTo(System.Int64)"/>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_Implicit(K4AdotNet.Nanoseconds64)~System.TimeSpan">
            <summary>Implicit conversion to <see cref="T:System.TimeSpan"/>.</summary>
            <param name="value">Value to be converted to <see cref="T:System.TimeSpan"/>.</param>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_Implicit(System.TimeSpan)~K4AdotNet.Nanoseconds64">
            <summary>Implicit conversion from <see cref="T:System.TimeSpan"/>.</summary>
            <param name="value">Value to be converted to <see cref="T:K4AdotNet.Nanoseconds64"/>.</param>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_Implicit(K4AdotNet.Nanoseconds64)~System.Int64">
            <summary>Implicit conversion to <see cref="T:System.Int64"/> value in nanoseconds.</summary>
            <param name="value">Value to be converted to <see cref="T:System.Int64"/>.</param>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.op_Implicit(System.Int64)~K4AdotNet.Nanoseconds64">
            <summary>Implicit conversion from <see cref="T:System.Int64"/>.</summary>
            <param name="valueNsec">Value in nanoseconds to be converted to <see cref="T:K4AdotNet.Nanoseconds64"/>.</param>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.FromSeconds(System.Double)">
            <summary>Creates instance of <see cref="T:K4AdotNet.Nanoseconds64"/> from seconds.</summary>
            <param name="valueSec">Value in seconds.</param>
            <returns>Created value.</returns>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.FromMilliseconds(System.Double)">
            <summary>Creates instance of <see cref="T:K4AdotNet.Nanoseconds64"/> from milliseconds.</summary>
            <param name="valueMs">Value in milliseconds.</param>
            <returns>Created value.</returns>
        </member>
        <member name="M:K4AdotNet.Nanoseconds64.FromMicroseconds(System.Double)">
            <summary>Creates instance of <see cref="T:K4AdotNet.Nanoseconds64"/> from microseconds.</summary>
            <param name="valueUs">Value in microseconds.</param>
            <returns>Created value.</returns>
        </member>
        <member name="F:K4AdotNet.Nanoseconds64.Zero">
            <summary>Zero value.</summary>
        </member>
        <member name="T:K4AdotNet.NativeCallResults.BufferResult">
            <summary>Result code returned by Azure Kinect APIs.</summary>
        </member>
        <member name="F:K4AdotNet.NativeCallResults.BufferResult.Succeeded">
            <summary>The result was successful</summary>
        </member>
        <member name="F:K4AdotNet.NativeCallResults.BufferResult.Failed">
            <summary>The result was a failure</summary>
        </member>
        <member name="F:K4AdotNet.NativeCallResults.BufferResult.TooSmall">
            <summary>The input buffer was too small</summary>
        </member>
        <member name="T:K4AdotNet.NativeCallResults.Result">
            <summary>Result code returned by Azure Kinect APIs.</summary>
        </member>
        <member name="F:K4AdotNet.NativeCallResults.Result.Succeeded">
            <summary>The result was successful</summary>
        </member>
        <member name="F:K4AdotNet.NativeCallResults.Result.Failed">
            <summary>The result was a failure</summary>
        </member>
        <member name="T:K4AdotNet.NativeCallResults.StreamResult">
            <summary>Return codes returned by Azure Kinect playback API.</summary>
        </member>
        <member name="F:K4AdotNet.NativeCallResults.StreamResult.Succeeded">
            <summary>The result was successful</summary>
        </member>
        <member name="F:K4AdotNet.NativeCallResults.StreamResult.Failed">
            <summary>The result was a failure</summary>
        </member>
        <member name="F:K4AdotNet.NativeCallResults.StreamResult.Eof">
            <summary>The end of the data stream was reached</summary>
        </member>
        <member name="T:K4AdotNet.NativeCallResults.WaitResult">
            <summary>Result code returned by Azure Kinect APIs.</summary>
        </member>
        <member name="F:K4AdotNet.NativeCallResults.WaitResult.Succeeded">
            <summary>The result was successful</summary>
        </member>
        <member name="F:K4AdotNet.NativeCallResults.WaitResult.Failed">
            <summary>The result was a failure</summary>
        </member>
        <member name="F:K4AdotNet.NativeCallResults.WaitResult.Timeout">
            <summary>The operation timed out</summary>
        </member>
        <member name="T:K4AdotNet.NativeHandles.BodyFrameHandle">
            <summary>Handle to an Azure Kinect body tracking frame.</summary>
        </member>
        <member name="M:K4AdotNet.NativeHandles.BodyFrameHandle.DuplicateReference">
            <summary>Call this method if you want to have one more reference to the same body frame.</summary>
            <returns>Additional reference to the same body frame. Don't forget to call <see cref="M:System.IDisposable.Dispose"/> method for object returned.</returns>
        </member>
        <member name="T:K4AdotNet.NativeHandles.CaptureHandle">
            <summary>Handle to an Azure Kinect capture.</summary>
            <remarks>
            Empty captures are created with <c>k4a_capture_create()</c>.
            Captures can be obtained from a device using <c>k4a_device_get_capture()</c>.
            </remarks>
        </member>
        <member name="M:K4AdotNet.NativeHandles.CaptureHandle.DuplicateReference">
            <summary>
            Call this method if you want to have one more reference to the same capture.
            </summary>
            <returns>Additional reference to the same capture. Don't forget to call <see cref="M:System.IDisposable.Dispose"/> method for object returned.</returns>
        </member>
        <member name="T:K4AdotNet.NativeHandles.DeviceHandle">
            <summary>Handle to an Azure Kinect device.</summary>
        </member>
        <member name="T:K4AdotNet.NativeHandles.HandleBase">
            <summary>Base class for all native handles declared it Sensor SDK.</summary>
            <remarks>
            Handles represent object instances in Sensor SDK.
            Handles are opaque pointers returned by the SDK which represent an object.
            Invalid handles are set to 0 (<c>IntPtr.Zero</c>).
            </remarks>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleBase.#ctor">
            <summary>Instances always own handles they store.</summary>
        </member>
        <member name="P:K4AdotNet.NativeHandles.HandleBase.IsInvalid">
            <summary>Invalid handle is <see cref="F:System.IntPtr.Zero"/>.</summary>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleBase.ToString">
            <summary>Convenient (for debugging needs, first of all) string representation of object.</summary>
            <returns><c>{TypeName}#{Address}</c></returns>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleBase.GetHashCode">
            <summary>Uses underlying value of handle as hash code.</summary>
            <returns>Hash code. Consistent with overridden equality.</returns>
            <seealso cref="M:K4AdotNet.NativeHandles.HandleBase.Equals(K4AdotNet.NativeHandles.HandleBase)"/>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleBase.Equals(K4AdotNet.NativeHandles.HandleBase)">
            <summary>Two objects are equal when they reference to one and the same unmanaged object.</summary>
            <param name="other">Another handle to be compared with this one. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if both handles reference to one and the same object.</returns>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleBase.Equals(System.Object)">
            <summary>Two objects are equal when they reference to one and the same unmanaged object.</summary>
            <param name="obj">Another handle to be compared with this one. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is <see cref="T:K4AdotNet.NativeHandles.HandleBase"/> and they both reference to one and the same object.</returns>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleBase.op_Equality(K4AdotNet.NativeHandles.HandleBase,K4AdotNet.NativeHandles.HandleBase)">
            <summary>To be consistent with <see cref="M:K4AdotNet.NativeHandles.HandleBase.Equals(K4AdotNet.NativeHandles.HandleBase)"/>.</summary>
            <param name="left">Left part of operator. Can be <see langword="null"/>.</param>
            <param name="right">Right part of operator. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> equals to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.NativeHandles.HandleBase.Equals(K4AdotNet.NativeHandles.HandleBase)"/>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleBase.op_Inequality(K4AdotNet.NativeHandles.HandleBase,K4AdotNet.NativeHandles.HandleBase)">
            <summary>To be consistent with <see cref="M:K4AdotNet.NativeHandles.HandleBase.Equals(K4AdotNet.NativeHandles.HandleBase)"/>.</summary>
            <param name="left">Left part of operator. Can be <see langword="null"/>.</param>
            <param name="right">Right part of operator. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.NativeHandles.HandleBase.Equals(K4AdotNet.NativeHandles.HandleBase)"/>
        </member>
        <member name="T:K4AdotNet.NativeHandles.HandleWrapper`1">
            <summary>
            Helper wrapper around <see cref="T:K4AdotNet.NativeHandles.HandleBase"/> objects.
            Implements <see cref="T:K4AdotNet.IDisposablePlus"/> interface, which is really helpful in implementation of public classes.
            </summary>
            <typeparam name="T">Type of handle.</typeparam>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleWrapper`1.#ctor(`0)">
            <summary>Creates <see cref="T:K4AdotNet.IDisposablePlus"/>-wrapper around specified handle.</summary>
            <param name="handle">Handle to be wrapped. Not <see langword="null"/>. And must be valid and not closed.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="handle"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="handle"/> is invalid or closed.</exception>
        </member>
        <member name="P:K4AdotNet.NativeHandles.HandleWrapper`1.Value">
            <summary>Direct access to the underlying handle object.</summary>
        </member>
        <member name="P:K4AdotNet.NativeHandles.HandleWrapper`1.ValueNotDisposed">
            <summary>Like <see cref="P:K4AdotNet.NativeHandles.HandleWrapper`1.Value"/> but checks that object is not disposed in addition.</summary>
            <exception cref="T:System.ObjectDisposedException">If object is disposed.</exception>
            <seealso cref="P:K4AdotNet.NativeHandles.HandleWrapper`1.IsDisposed"/>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleWrapper`1.Dispose">
            <summary>
            Disposes underlying handle
            plus raises <see cref="E:K4AdotNet.NativeHandles.HandleWrapper`1.Disposed"/> event if it is first call of this method for object.
            </summary>
            <seealso cref="P:K4AdotNet.NativeHandles.HandleWrapper`1.IsDisposed"/>
        </member>
        <member name="P:K4AdotNet.NativeHandles.HandleWrapper`1.IsDisposed">
            <summary>Gets a value indicating whether the object has been disposed of.</summary>
            <seealso cref="M:K4AdotNet.NativeHandles.HandleWrapper`1.Dispose"/>
        </member>
        <member name="E:K4AdotNet.NativeHandles.HandleWrapper`1.Disposed">
            <summary>Raised on object disposing (only once).</summary>
            <seealso cref="M:K4AdotNet.NativeHandles.HandleWrapper`1.Dispose"/>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleWrapper`1.CheckNotDisposed">
            <summary>Checks that object is not disposed.</summary>
            <exception cref="T:System.ObjectDisposedException">If object is disposed.</exception>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleWrapper`1.op_Implicit(`0)~K4AdotNet.NativeHandles.HandleWrapper{`0}">
            <summary>Implicit conversion from handle to wrapper for usability.</summary>
            <param name="handle">Handle to be wrapped.</param>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleWrapper`1.ToString">
            <summary>String representation exactly as handle object has.</summary>
            <returns><see cref="M:K4AdotNet.NativeHandles.HandleBase.ToString"/></returns>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleWrapper`1.GetHashCode">
            <summary>Delegates hash code calculation to <see cref="M:K4AdotNet.NativeHandles.HandleBase.GetHashCode"/> implementation.</summary>
            <returns>Hash code consistent with <see cref="M:K4AdotNet.NativeHandles.HandleWrapper`1.Equals(K4AdotNet.NativeHandles.HandleWrapper{`0})"/>.</returns>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleWrapper`1.Equals(K4AdotNet.NativeHandles.HandleWrapper{`0})">
            <summary>Delegates comparison to <see cref="M:K4AdotNet.NativeHandles.HandleBase.Equals(K4AdotNet.NativeHandles.HandleBase)"/>.</summary>
            <param name="other">Another handle to be compared with this one. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if both handles reference to one and the same object.</returns>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleWrapper`1.Equals(System.Object)">
            <summary>Two objects are equal when they reference to one and the same unmanaged object.</summary>
            <param name="obj">Another handle to be compared with this one. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is <see cref="T:K4AdotNet.NativeHandles.HandleWrapper`1"/> and they both reference to one and the same object.</returns>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleWrapper`1.op_Equality(K4AdotNet.NativeHandles.HandleWrapper{`0},K4AdotNet.NativeHandles.HandleWrapper{`0})">
            <summary>To be consistent with <see cref="M:K4AdotNet.NativeHandles.HandleWrapper`1.Equals(K4AdotNet.NativeHandles.HandleWrapper{`0})"/>.</summary>
            <param name="left">Left part of operator. Can be <see langword="null"/>.</param>
            <param name="right">Right part of operator. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> equals to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.NativeHandles.HandleWrapper`1.Equals(K4AdotNet.NativeHandles.HandleWrapper{`0})"/>
        </member>
        <member name="M:K4AdotNet.NativeHandles.HandleWrapper`1.op_Inequality(K4AdotNet.NativeHandles.HandleWrapper{`0},K4AdotNet.NativeHandles.HandleWrapper{`0})">
            <summary>To be consistent with <see cref="M:K4AdotNet.NativeHandles.HandleWrapper`1.Equals(K4AdotNet.NativeHandles.HandleWrapper{`0})"/>.</summary>
            <param name="left">Left part of operator. Can be <see langword="null"/>.</param>
            <param name="right">Right part of operator. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.NativeHandles.HandleWrapper`1.Equals(K4AdotNet.NativeHandles.HandleWrapper{`0})"/>
        </member>
        <member name="T:K4AdotNet.NativeHandles.ImageHandle">
            <summary>Handle to an Azure Kinect image.</summary>
            <remarks>Images from a device are retrieved through a <c>k4a_capture_t</c> object returned by <c>k4a_device_get_capture()</c>.</remarks>
        </member>
        <member name="M:K4AdotNet.NativeHandles.ImageHandle.DuplicateReference">
            <summary>Call this method if you want to have one more reference to the same image.</summary>
            <returns>Additional reference to the same image. Don't forget to call <see cref="M:System.IDisposable.Dispose"/> method for object returned.</returns>
        </member>
        <member name="T:K4AdotNet.NativeHandles.NativeApi">
            <summary>DLL imports of some native functions from <c>k4a.h</c>, <c>record.h</c>, <c>playback.h</c> and <c>k4abt.h</c> header files.</summary>
            <remarks>These functions are required for implementation of <c>XxxHandle</c> classes.</remarks>
        </member>
        <member name="M:K4AdotNet.NativeHandles.NativeApi.CaptureReference(System.IntPtr)">
            <summary>Add a reference to a capture.</summary>
            <param name="captureHandle">Capture to add a reference to.</param>
            <remarks>Call this function to add an additional reference to a capture.
                This reference must be removed with <see cref="M:K4AdotNet.NativeHandles.NativeApi.CaptureReference(System.IntPtr)"/>.</remarks>
        </member>
        <member name="M:K4AdotNet.NativeHandles.NativeApi.CaptureRelease(System.IntPtr)">
            <summary>Release a capture.</summary>
            <param name="captureHandle">Capture to release.</param>
        </member>
        <member name="M:K4AdotNet.NativeHandles.NativeApi.ImageReference(System.IntPtr)">
            <summary>Add a reference to the image.</summary>
            <param name="imageHandle">Handle of the image for which the get operation is performed on.</param>
            <remarks>
            References manage the lifetime of the object. When the references reach zero the object is destroyed. A caller must
            not access the object after its reference is released.
            </remarks>
        </member>
        <member name="M:K4AdotNet.NativeHandles.NativeApi.ImageRelease(System.IntPtr)">
            <summary>Remove a reference from the image.</summary>
            <param name="imageHandle">Handle of the image for which the get operation is performed on.</param>
            <remarks>
            References manage the lifetime of the object. When the references reach zero the object is destroyed. A caller must
            not access the object after its reference is released.
            </remarks>
        </member>
        <member name="M:K4AdotNet.NativeHandles.NativeApi.TransformationDestroy(System.IntPtr)">
            <summary>Destroy transformation handle.</summary>
            <param name="transformationHandle">Transformation handle to destroy.</param>
        </member>
        <member name="M:K4AdotNet.NativeHandles.NativeApi.DeviceClose(System.IntPtr)">
            <summary>Closes an Azure Kinect device.</summary>
            <param name="deviceHandle">Handle of device for which the get operation is performed on.</param>
            <remarks>Once closed, the handle is no longer valid.</remarks>
        </member>
        <member name="M:K4AdotNet.NativeHandles.NativeApi.TrackerDestroy(System.IntPtr)">
            <summary>Releases a body tracker handle. </summary>
            <param name="trackerHandle">Tracker to be destroyed.</param>
            <remarks>Once destroyed, the handle is no longer valid.</remarks>
        </member>
        <member name="M:K4AdotNet.NativeHandles.NativeApi.FrameRelease(System.IntPtr)">
            <summary>Release a body frame back to the SDK.</summary>
            <param name="bodyFrameHandle">Handle to a body frame object to return to SDK.</param>
            <remarks>Once released, the handle is no longer valid.</remarks>
        </member>
        <member name="M:K4AdotNet.NativeHandles.NativeApi.FrameReference(System.IntPtr)">
            <summary>Add a reference to a body frame.</summary>
            <param name="bodyFrameHandle">Body frame to add a reference to.</param>
            <remarks>Call this function to add an additional reference to a body frame.</remarks>
        </member>
        <member name="M:K4AdotNet.NativeHandles.NativeApi.RecordClose(System.IntPtr)">
            <summary>Closes a recording handle.</summary>
            <param name="recordingHandle">Recording handle to be closed.</param>
            <remarks>If there is any unwritten data it will be flushed to disk before closing the recording.</remarks>
        </member>
        <member name="M:K4AdotNet.NativeHandles.NativeApi.PlaybackClose(System.IntPtr)">
            <summary>Closes a recording playback handle.</summary>
            <param name="recordingHandle">Recording playback handle to be closed.</param>
        </member>
        <member name="M:K4AdotNet.NativeHandles.NativeApi.PlaybackDataBlockRelease(System.IntPtr)">
            <summary>Release a data block handle.</summary>
            <param name="dataBlockHandle">Handle obtained by k4a_playback_get_next_data_block() or k4a_playback_get_previous_data_block().</param>
            <remarks>Release the memory of a data block. The caller must not access the object after it is released.</remarks>
        </member>
        <member name="T:K4AdotNet.NativeHandles.PlaybackDataBlockHandle">
            <summary>Handle to a block of data read from a <see cref="T:K4AdotNet.NativeHandles.PlaybackHandle"/> custom track.</summary>
        </member>
        <member name="T:K4AdotNet.NativeHandles.PlaybackHandle">
            <summary>Handle to a Kinect for Azure recording opened for playback.</summary>
        </member>
        <member name="T:K4AdotNet.NativeHandles.RecordHandle">
            <summary>Handle to a Kinect for Azure recording opened for writing.</summary>
        </member>
        <member name="T:K4AdotNet.NativeHandles.TrackerHandle">
            <summary>Handle to Azure Kinect body tracking component.</summary>
        </member>
        <member name="T:K4AdotNet.NativeHandles.TransformationHandle">
            <summary>Handle to an Azure Kinect transformation context.</summary>
            <remarks>Handles are created with <c>k4a_transformation_create()</c>.</remarks>
        </member>
        <member name="T:K4AdotNet.Quaternion">
            <summary>WXYZ representation of quaternion. Quaternions are used to represent rotations in 3D.</summary>
        </member>
        <member name="F:K4AdotNet.Quaternion.W">
            <summary>W component of a quaternion. Corresponds to <c>0</c> index in array representation.</summary>
        </member>
        <member name="F:K4AdotNet.Quaternion.X">
            <summary>X component of a quaternion. Corresponds to <c>1</c> index in array representation.</summary>
        </member>
        <member name="F:K4AdotNet.Quaternion.Y">
            <summary>Y component of a quaternion. Corresponds to <c>2</c> index in array representation.</summary>
        </member>
        <member name="F:K4AdotNet.Quaternion.Z">
            <summary>Z component of a quaternion. Corresponds to <c>3</c> index in array representation.</summary>
        </member>
        <member name="M:K4AdotNet.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Creates quaternion with specified components.</summary>
            <param name="w">Value for <see cref="F:K4AdotNet.Quaternion.W"/> component of quaternion.</param>
            <param name="x">Value for <see cref="F:K4AdotNet.Quaternion.X"/> component of quaternion.</param>
            <param name="y">Value for <see cref="F:K4AdotNet.Quaternion.Y"/> component of quaternion.</param>
            <param name="z">Value for <see cref="F:K4AdotNet.Quaternion.Z"/> component of quaternion.</param>
        </member>
        <member name="M:K4AdotNet.Quaternion.#ctor(System.Single,K4AdotNet.Float3)">
            <summary>Creates quaternion with specified components.</summary>
            <param name="w">Value for <see cref="F:K4AdotNet.Quaternion.W"/> component of quaternion.</param>
            <param name="v">Value for <see cref="F:K4AdotNet.Quaternion.X"/>, <see cref="F:K4AdotNet.Quaternion.Y"/> and <see cref="F:K4AdotNet.Quaternion.Z"/> components of quaternion.</param>
        </member>
        <member name="M:K4AdotNet.Quaternion.#ctor(System.Single[])">
            <summary>Creates quaternion from array representation.</summary>
            <param name="wxyz">Values for quaternion components in W, X, Y, Z order. Not <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="wxyz"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Wrong length of <paramref name="wxyz"/> array.</exception>
        </member>
        <member name="M:K4AdotNet.Quaternion.ToArray">
            <summary>Converts quaternion to array representation.</summary>
            <returns>Array representation of quaternion. Not <see langword="null"/>.</returns>
        </member>
        <member name="P:K4AdotNet.Quaternion.Item(System.Int32)">
            <summary>Indexed access to quaternion components.</summary>
            <param name="index">Index of component: <see cref="F:K4AdotNet.Quaternion.W"/> - <c>0</c>, <see cref="F:K4AdotNet.Quaternion.X"/> - <c>1</c>, <see cref="F:K4AdotNet.Quaternion.Y"/> - <c>2</c>, <see cref="F:K4AdotNet.Quaternion.Z"/> - <c>3</c>.</param>
            <returns>Value of appropriate component.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> has invalid value.</exception>
        </member>
        <member name="M:K4AdotNet.Quaternion.Equals(K4AdotNet.Quaternion)">
            <summary>Per-component comparison.</summary>
            <param name="other">Other quaternion to be compared to this one.</param>
            <returns><see langword="true"/> if all components of <paramref name="other"/> are equal to appropriate components of this quaternion.</returns>
        </member>
        <member name="M:K4AdotNet.Quaternion.Equals(System.Object)">
            <summary>Overloads <see cref="M:System.Object.Equals(System.Object)"/> to be consistent with <see cref="M:K4AdotNet.Quaternion.Equals(K4AdotNet.Quaternion)"/>.</summary>
            <param name="obj">Object to be compared with this quaternion.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is a <see cref="T:K4AdotNet.Quaternion"/> and is equal to this one.</returns>
            <seealso cref="M:K4AdotNet.Quaternion.Equals(K4AdotNet.Quaternion)"/>
        </member>
        <member name="M:K4AdotNet.Quaternion.op_Equality(K4AdotNet.Quaternion,K4AdotNet.Quaternion)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Quaternion.Equals(K4AdotNet.Quaternion)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Quaternion.Equals(K4AdotNet.Quaternion)"/>
        </member>
        <member name="M:K4AdotNet.Quaternion.op_Inequality(K4AdotNet.Quaternion,K4AdotNet.Quaternion)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Quaternion.Equals(K4AdotNet.Quaternion)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Quaternion.Equals(K4AdotNet.Quaternion)"/>
        </member>
        <member name="M:K4AdotNet.Quaternion.GetHashCode">
            <summary>Calculates hash code.</summary>
            <returns>Hash code. Consistent with overridden equality.</returns>
        </member>
        <member name="M:K4AdotNet.Quaternion.ToString(System.String,System.IFormatProvider)">
            <summary>Formats quaternion as <c>[W X Y Z]</c> string.</summary>
            <param name="format">Format string for each individual component in string representation.</param>
            <param name="formatProvider">Culture for formatting numbers to strings.</param>
            <returns>String representation of quaternion in a given Culture.</returns>
        </member>
        <member name="M:K4AdotNet.Quaternion.ToString">
            <summary>Formats quaternion as <c>[W X Y Z]</c> string.</summary>
            <returns><c>[W X Y Z]</c>.</returns>
        </member>
        <member name="F:K4AdotNet.Quaternion.Zero">
            <summary>Zero quaternion (all components are 0).</summary>
        </member>
        <member name="F:K4AdotNet.Quaternion.Identity">
            <summary>Identity quaternion (represents zero rotation in 3D).</summary>
        </member>
        <member name="T:K4AdotNet.Record.NativeApi">
            <summary>DLL imports for most of native functions from <c>record.h</c> and <c>playback.h</c> header files.</summary>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.RecordCreate(System.Byte[],K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DeviceConfiguration,K4AdotNet.NativeHandles.RecordHandle@)">
             <summary>
             Opens a new recording file for writing.
             </summary>
             <param name="path">File system path for the new recording.</param>
             <param name="device">The Azure Kinect device that is being recorded. The device handle is used to store device calibration and serial
             number information. May be <see cref="F:K4AdotNet.NativeHandles.DeviceHandle.Zero"/> if recording user-generated data.</param>
             <param name="deviceConfiguration">The configuration the Azure Kinect device was started with.</param>
             <param name="recordingHandle">If successful, this contains a pointer to the new recording handle.</param>
             <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> is returned on success.</returns>
             <remarks>
             The file will be created if it doesn't exist, or overwritten if an existing file is specified.
            
             Streaming does not need to be started on the device at the time this function is called, but when it is started
             it should be started with the same configuration provided in <paramref name="deviceConfiguration"/>.
             
             Subsequent calls to <see cref="M:K4AdotNet.Record.NativeApi.RecordWriteCapture(K4AdotNet.NativeHandles.RecordHandle,K4AdotNet.NativeHandles.CaptureHandle)"/> will need to have images in the resolution and format defined
             in <paramref name="deviceConfiguration"/>.
             </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.RecordAddTag(K4AdotNet.NativeHandles.RecordHandle,System.Byte[],System.Byte[])">
            <summary>Adds a tag to the recording.</summary>
            <param name="recordingHandle">The handle of a new recording, obtained by <see cref="M:K4AdotNet.Record.NativeApi.RecordCreate(System.Byte[],K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DeviceConfiguration,K4AdotNet.NativeHandles.RecordHandle@)"/>.</param>
            <param name="name">The name of the tag to write.</param>
            <param name="value">The string value to store in the tag.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> is returned on success.</returns>
            <remarks>
            Tags are global to a file, and should store data related to the entire recording, such as camera configuration or
            recording location.
            
            Tag names must be ALL CAPS and may only contain A-Z, 0-9, '-' and '_'.
            
            All tags need to be added before the recording header is written.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.RecordAddImuTrack(K4AdotNet.NativeHandles.RecordHandle)">
            <summary>Adds the track header for recording IMU.</summary>
            <param name="recordingHandle">The handle of a new recording, obtained by <see cref="M:K4AdotNet.Record.NativeApi.RecordCreate(System.Byte[],K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DeviceConfiguration,K4AdotNet.NativeHandles.RecordHandle@)"/>.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> is returned on success.</returns>
            <remarks>The track needs to be added before the recording header is written.</remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.RecordAddAttachment(K4AdotNet.NativeHandles.RecordHandle,System.Byte[],System.Byte[],System.UIntPtr)">
            <summary>Adds an attachment to the recording.</summary>
            <param name="recordingHandle">The handle of a new recording, obtained by <see cref="M:K4AdotNet.Record.NativeApi.RecordCreate(System.Byte[],K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DeviceConfiguration,K4AdotNet.NativeHandles.RecordHandle@)"/>.</param>
            <param name="attachmentName">The name of the attachment to be stored in the recording file. This name should be a valid filename with an extension.</param>
            <param name="buffer">The attachment data buffer.</param>
            <param name="bufferSize">The size of the attachment data buffer.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> is returned on success.</returns>
            <remarks>All attachments need to be added before the recording header is written.</remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.RecordAddCustomVideoTrack(K4AdotNet.NativeHandles.RecordHandle,System.Byte[],System.Byte[],System.Byte[],System.UIntPtr,K4AdotNet.Record.RecordVideoSettings@)">
            <summary>Adds custom video tracks to the recording.</summary>
            <param name="recordingHandle">The handle of a new recording, obtained by <see cref="M:K4AdotNet.Record.NativeApi.RecordCreate(System.Byte[],K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DeviceConfiguration,K4AdotNet.NativeHandles.RecordHandle@)"/>.</param>
            <param name="trackName">The name of the custom video track to be added.</param>
            <param name="codecId">
            A UTF8 null terminated string containing the codec ID of the track. Some of the existing formats are listed here:
            https://www.matroska.org/technical/specs/codecid/index.html. The codec ID can also be custom defined by the user.
            Video codec ID's should start with 'V_'.
            </param>
            <param name="codecContext">
            The codec context is a codec-specific buffer that contains any required codec metadata that is only known to the
            codec. It is mapped to the matroska <c>CodecPrivate</c> element.
            </param>
            <param name="codecContextSize">The size of the codec context buffer.</param>
            <param name="trackSettings">Additional metadata for the video track such as resolution and frame rate.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> is returned on success.</returns>
            <remarks>
            Built-in video tracks like the DEPTH, IR, and COLOR tracks will be created automatically when the <see cref="M:K4AdotNet.Record.NativeApi.RecordCreate(System.Byte[],K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DeviceConfiguration,K4AdotNet.NativeHandles.RecordHandle@)"/>
            API is called. This API can be used to add additional video tracks to save custom data.
            
            Track names must be ALL CAPS and may only contain A-Z, 0-9, '-' and '_'.
            
            All tracks need to be added before the recording header is written.
            
            Call <see cref="M:K4AdotNet.Record.NativeApi.RecordWriteCustomTrackData(K4AdotNet.NativeHandles.RecordHandle,System.Byte[],K4AdotNet.Microseconds64,System.Byte[],System.UIntPtr)"/> with the same <paramref name="trackName"/> to write data to this track.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.RecordAddCustomSubtitleTrack(K4AdotNet.NativeHandles.RecordHandle,System.Byte[],System.Byte[],System.Byte[],System.UIntPtr,K4AdotNet.Record.RecordSubtitleSettings@)">
            <summary>Adds custom subtitle tracks to the recording.</summary>
            <param name="recordingHandle">The handle of a new recording, obtained by <see cref="M:K4AdotNet.Record.NativeApi.RecordCreate(System.Byte[],K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DeviceConfiguration,K4AdotNet.NativeHandles.RecordHandle@)"/>.</param>
            <param name="trackName">The name of the custom subtitle track to be added.</param>
            <param name="codecId">
            A UTF8 null terminated string containing the codec ID of the track. Some of the existing formats are listed here:
            https://www.matroska.org/technical/specs/codecid/index.html. The codec ID can also be custom defined by the user.
            Subtitle codec ID's should start with 'S_'.
            </param>
            <param name="codecContext">
            The codec context is a codec-specific buffer that contains any required codec metadata that is only known to the
            codec. It is mapped to the matroska <c>CodecPrivate</c> element.
            </param>
            <param name="codecContextSize">The size of the codec context buffer.</param>
            <param name="trackSettings">Additional metadata for the subtitle track.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> is returned on success.</returns>
            <remarks>
            Built-in subtitle tracks like the IMU track will be created automatically when the <see cref="M:K4AdotNet.Record.NativeApi.RecordAddImuTrack(K4AdotNet.NativeHandles.RecordHandle)"/> API is
            called. This API can be used to add additional subtitle tracks to save custom data.
            
            Track names must be ALL CAPS and may only contain A-Z, 0-9, '-' and '_'.
            
            All tracks need to be added before the recording header is written.
            
            Call <see cref="M:K4AdotNet.Record.NativeApi.RecordWriteCustomTrackData(K4AdotNet.NativeHandles.RecordHandle,System.Byte[],K4AdotNet.Microseconds64,System.Byte[],System.UIntPtr)"/> with the same <paramref name="trackName"/> to write data to this track.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.RecordWriteHeader(K4AdotNet.NativeHandles.RecordHandle)">
            <summary>Writes the recording header and metadata to file.</summary>
            <param name="recordingHandle">The handle of a new recording, obtained by <see cref="M:K4AdotNet.Record.NativeApi.RecordCreate(System.Byte[],K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DeviceConfiguration,K4AdotNet.NativeHandles.RecordHandle@)"/>.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> is returned on success.</returns>
            <remarks>This must be called before captures can be written.</remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.RecordWriteCapture(K4AdotNet.NativeHandles.RecordHandle,K4AdotNet.NativeHandles.CaptureHandle)">
            <summary>Writes a camera capture to file.</summary>
            <param name="recordingHandle">The handle of recording, obtained by <see cref="M:K4AdotNet.Record.NativeApi.RecordCreate(System.Byte[],K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DeviceConfiguration,K4AdotNet.NativeHandles.RecordHandle@)"/>.</param>
            <param name="captureHandle">The handle of a capture to write to file.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> is returned on success.</returns>
            <remarks>
            This method will write all images in the capture to the corresponding tracks in the recording file.
            If any of the images fail to write, other images will still be written before a failure is returned.
            
            Captures must be written in increasing order of timestamp, and the file's header must already be written.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.RecordWriteImuSample(K4AdotNet.NativeHandles.RecordHandle,K4AdotNet.Sensor.ImuSample)">
            <summary>Writes an IMU sample to file.</summary>
            <param name="recordingHandle">The handle of recording, obtained by <see cref="M:K4AdotNet.Record.NativeApi.RecordCreate(System.Byte[],K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DeviceConfiguration,K4AdotNet.NativeHandles.RecordHandle@)"/>.</param>
            <param name="imuSample">A structure containing the IMU sample data and time stamps.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> is returned on success.</returns>
            <remarks>
            Samples must be written in increasing order of timestamp, and the file's header must already be written.
            When writing IMU samples at the same time as captures, the samples should be within 1 second of the most recently
            written capture.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.RecordWriteCustomTrackData(K4AdotNet.NativeHandles.RecordHandle,System.Byte[],K4AdotNet.Microseconds64,System.Byte[],System.UIntPtr)">
            <summary>Writes data for a custom track to file.</summary>
            <param name="recordingHandle">The handle of a new recording, obtained by <see cref="M:K4AdotNet.Record.NativeApi.RecordCreate(System.Byte[],K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DeviceConfiguration,K4AdotNet.NativeHandles.RecordHandle@)"/>.</param>
            <param name="trackName">The name of the custom track that the data is going to be written to.</param>
            <param name="deviceTimestamp">
            The timestamp in microseconds for the custom track data. This timestamp should be in the same time domain as the
            device timestamp used for recording.
            </param>
            <param name="customData">The buffer of custom track data.</param>
            <param name="customDataSize">The size of the custom track data buffer.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> is returned on success.</returns>
            <remarks>
            Custom track data must be written in increasing order of timestamp, and the file's header must already be written.
            When writing custom track data at the same time as captures or IMU data, the custom data should be within 1 second of
            the most recently written timestamp.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.RecordFlush(K4AdotNet.NativeHandles.RecordHandle)">
            <summary>Flushes all pending recording data to disk.</summary>
            <param name="recordingHandle">The handle of recording, obtained by <see cref="M:K4AdotNet.Record.NativeApi.RecordCreate(System.Byte[],K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DeviceConfiguration,K4AdotNet.NativeHandles.RecordHandle@)"/>.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> is returned on success.</returns>
            <remarks>
            This method ensures that all data passed to the recording API prior to calling flush is written to disk.
            If continuing to write recording data, care must be taken to ensure no new time stamps are added from before the flush.
            
            If an error occurs, best effort is made to flush as much data to disk as possible, but the integrity of the file is
            not guaranteed.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)">
            <summary>Opens an existing recording file for reading.</summary>
            <param name="path">File system path of the existing recording.</param>
            <param name="playbackHandle">If successful, this contains a pointer to the recording handle.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> is returned on success.</returns>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackGetRawCalibration(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[],System.UIntPtr@)">
            <summary>Get the raw calibration blob for the Azure Kinect device used during recording.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="data">
            Location to write the calibration data to. This field may optionally be set to <see langword="null"/>
            if the caller wants to query for the needed data size.
            </param>
            <param name="dataSize">
            On passing <paramref name="dataSize"/> into the function this variable represents the available size to write the raw data to. On
            return this variable is updated with the amount of data actually written to the buffer.
            </param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Succeeded"/> if <paramref name="data"/> was successfully written.
            If <paramref name="dataSize"/> points to a buffer size that is too small to hold the output,
            <see cref="F:K4AdotNet.NativeCallResults.BufferResult.TooSmall"/> is returned and <paramref name="dataSize"/> is updated to contain the
            minimum buffer size needed to capture the calibration data.
            </returns>
            <remarks>The raw calibration may not exist if the device was not specified during recording.</remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackGetCalibration(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Sensor.Calibration@)">
            <summary>
            Get the camera calibration for Azure Kinect device used during recording.
            The output struct is used as input to all transformation functions.
            </summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="calibration">Output: calibration data.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> is returned on success.</returns>
            <remarks>The calibration may not exist if the device was not specified during recording.</remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackGetRecordConfiguration(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Record.RecordConfiguration@)">
            <summary>Get the device configuration used during recording.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="config">Output: recording configuration.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if <paramref name="config"/> was successfully written. <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> otherwise.</returns>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackCheckTrackExists(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[])">
            <summary>Checks whether a track with the given track name exists in the playback file.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="trackName">The track name to be checked to see whether it exists or not.</param>
            <returns><see langword="true"/> if the track exists.</returns>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackGetTrackCount(K4AdotNet.NativeHandles.PlaybackHandle)">
            <summary>Get the number of tracks in a playback file.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <returns>The number of tracks in the playback file.</returns>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackGetTrackName(K4AdotNet.NativeHandles.PlaybackHandle,System.UIntPtr,System.Byte[],System.UIntPtr@)">
            <summary>Gets the name of a track at a specific index.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="trackIndex">The index of the track to read the name form.</param>
            <param name="trackName">
            Location to write the track name. This will be a UTF8 null terminated string. If a <see langword="null"/> buffer is specified,
            <paramref name="trackNameSize"/> will be set to the size of buffer needed to store the string.
            </param>
            <param name="trackNameSize">
            On input, the size of the <paramref name="trackName"/> buffer. On output, this is set to the length of the <paramref name="trackName"/> value
            (including the 0 terminator).
            </param>
            <returns>
            A return of <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Succeeded"/> means that the <paramref name="trackName"/> has been filled in.
            If the buffer is too small the function returns <see cref="F:K4AdotNet.NativeCallResults.BufferResult.TooSmall"/>
            and the needed size of the <paramref name="trackName"/> buffer is returned in the <paramref name="trackNameSize"/> parameter.
            <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Failed"/> is returned if the track index does not exist.
            All other failures return <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Failed"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackTrackIsBuiltIn(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[])">
            <summary>Checks whether a track is one of the built-in tracks: "COLOR", "DEPTH", etc...</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="trackName">The track name to be checked to see whether it is a built-in track.</param>
            <returns><see langword="true"/> if the track is built-in. If the provided track name does not exist, <see langword="false"/> will be returned.</returns>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackTrackGetVideoSetting(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[],K4AdotNet.Record.RecordVideoSettings@)">
            <summary>Gets the video-specific track information for a particular video track.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="trackName">The track name to read video settings from.</param>
            <param name="videoSettings">Location to write the track's video settings.</param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> is returned on success,
            <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> is returned if the specified track does not exist or is not a video track.</returns>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackTrackGetCodecId(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[],System.Byte[],System.UIntPtr@)">
            <summary>Gets the codec id string for a particular track.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="trackName">The track name to read the codec id from.</param>
            <param name="codecId">
            Location to write the codec id. This will be a UTF8 null terminated string. If a <see langword="null"/> buffer is specified,
            <paramref name="codecIdSize"/> will be set to the size of buffer needed to store the string.
            </param>
            <param name="codecIdSize">
            On input, the size of the <paramref name="codecId"/> buffer. On output, this is set to the length of the <paramref name="codecId"/> value
            (including the 0 terminator).
            </param>
            <returns>
            A return of <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Succeeded"/> means that the <paramref name="codecId"/> has been filled in.
            If the buffer is too small the function returns <see cref="F:K4AdotNet.NativeCallResults.BufferResult.TooSmall"/>
            and the needed size of the <paramref name="codecId"/> buffer is returned in the <paramref name="codecIdSize"/> parameter.
            <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Failed"/> is returned if the <paramref name="trackName"/> does not exist.
            All other failures return <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Failed"/>.
            </returns>
            <remarks>
            The codec ID is a string that corresponds to the codec of the track's data. Some of the existing formats are listed
            here: https://www.matroska.org/technical/specs/codecid/index.html. It can also be custom defined by the user.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackTrackGetCodecContext(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[],System.Byte[],System.UIntPtr@)">
            <summary>Gets the codec context for a particular track.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="trackName">The track name to read the codec id from.</param>
            <param name="codecContext">
            Location to write the codec context data. If a <see langword="null"/> buffer is specified,
            <paramref name="codecContextSize"/> will be set to the size of buffer needed to store the data.
            </param>
            <param name="codecContextSize">
            On input, the size of the <paramref name="codecContext"/> buffer. On output, this is set to the length of the <paramref name="codecContext"/> data.
            </param>
            <returns>
            A return of <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Succeeded"/> means that the <paramref name="codecContext"/> has been filled in.
            If the buffer is too small the function returns <see cref="F:K4AdotNet.NativeCallResults.BufferResult.TooSmall"/>
            and the needed size of the <paramref name="codecContext"/> buffer is returned in the <paramref name="codecContextSize"/> parameter.
            <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Failed"/> is returned if the <paramref name="trackName"/> does not exist.
            All other failures return <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Failed"/>.
            </returns>
            <remarks>
            The codec context is a codec-specific buffer that contains any required codec metadata that is only known to the
            codec.It is mapped to the matroska Codec Private field.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackGetTag(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[],System.Byte[],System.UIntPtr@)">
            <summary>Read the value of a tag from a recording.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="name">The name of the tag to read.</param>
            <param name="value">
            Location to write the tag value. If a <see langword="null"/> buffer is specified,
            <paramref name="valueSize"/> will be set to the size of buffer needed to store the string.
            </param>
            <param name="valueSize">
            On input, the size of the <paramref name="value"/> buffer. On output, this is set to the length of the tag value (including the null
            terminator).
            </param>
            <returns>
            A return of <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Succeeded"/> means that the <paramref name="value"/> has been filled in.
            If the buffer is too small the function returns <see cref="F:K4AdotNet.NativeCallResults.BufferResult.TooSmall"/> and the needed size of the <paramref name="value"/>
            buffer is returned in the <paramref name="valueSize"/> parameter.
            <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Failed"/> is returned if the tag does not exist.
            All other failures return <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Failed"/>.
            </returns>
            <remarks>
            Tags are global to a file, and should store data related to the entire recording, such as camera configuration or
            recording location.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackSetColorConversion(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Sensor.ImageFormat)">
            <summary>
            Set the image format that color captures will be converted to. By default the conversion format will be the same as
            the image format stored in the recording file, and no conversion will occur.
            </summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="targetFormat">The target image format to be returned in captures.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if the format conversion is supported. <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> otherwise.</returns>
            <remarks>
            After the color conversion format is set, all <see cref="T:K4AdotNet.NativeHandles.CaptureHandle"/> objects returned from the playback handle will have
            their color images converted to the <paramref name="targetFormat"/>.
            
            Color format conversion occurs in the user-thread, so setting <paramref name="targetFormat"/> to anything other than the format
            stored in the file may significantly increase the latency of <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetNextCapture(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.NativeHandles.CaptureHandle@)"/> and
            <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetPreviousCapture(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.NativeHandles.CaptureHandle@)"/>.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackGetAttachment(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[],System.Byte[],System.UIntPtr@)">
            <summary>Reads an attachment file from a recording.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="fileName">Attachment file name.</param>
            <param name="data">
            Location to write the attachment data. If a <see langword="null"/> buffer is specified, <paramref name="dataSize"/> will be set to the size of
            buffer needed to store the data.
            </param>
            <param name="dataSize">
            On input, the size of the <paramref name="data"/> buffer. On output, this is set to the length of the attachment data.
            </param>
            <returns>
            A return of <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Succeeded"/> means that the <paramref name="data"/> has been filled in.
            If the buffer is too small the function returns <see cref="F:K4AdotNet.NativeCallResults.BufferResult.TooSmall"/>
            and the needed size of the <paramref name="data"/> buffer is returned in the <paramref name="dataSize"/> parameter.
            <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Failed"/> is returned if the attachment <paramref name="fileName"/> does not exist.
            All other failures return <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Failed"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackGetNextCapture(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.NativeHandles.CaptureHandle@)">
            <summary>Read the next capture in the recording sequence.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="captureHandle">If successful this contains a handle to a capture object.</param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Succeeded"/> if a capture is returned, or <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Eof"/>
            if the end of the recording is reached. All other failures will return <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Failed"/>.
            </returns>
            <remarks>
            This method always returns the next capture in sequence after the most recently returned capture.
            
            The first call to this method after <see cref="M:K4AdotNet.Record.NativeApi.PlaybackSeekTimestamp(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/> will return the capture
            in the recording closest to the seek time with an image timestamp greater than or equal to the seek time.
            
            If a call was made to <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetPreviousCapture(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.NativeHandles.CaptureHandle@)"/> that returned <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Eof"/>, the playback
            position is at the beginning of the stream and this method will return the first capture in the recording.
            
            Capture objects returned by the playback API will always contain at least one image, but may have images missing if
            frames were dropped in the original recording. When calling <see cref="M:K4AdotNet.Sensor.NativeApi.CaptureGetColorImage(K4AdotNet.NativeHandles.CaptureHandle)"/>,
            <see cref="M:K4AdotNet.Sensor.NativeApi.CaptureGetDepthImage(K4AdotNet.NativeHandles.CaptureHandle)"/>, or <see cref="M:K4AdotNet.Sensor.NativeApi.CaptureGetIRImage(K4AdotNet.NativeHandles.CaptureHandle)"/>,
            the image should be checked for <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackGetPreviousCapture(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.NativeHandles.CaptureHandle@)">
            <summary>Read the previous capture in the recording sequence.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="captureHandle">If successful this contains a handle to a capture object.</param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Succeeded"/> if a capture is returned, or <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Eof"/>
            if the start of the recording is reached. All other failures will return <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Failed"/>.
            </returns>
            <remarks>
            This method always returns the previous capture in sequence before the most recently returned capture.
            
            The first call to this method after <see cref="M:K4AdotNet.Record.NativeApi.PlaybackSeekTimestamp(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/> will return the capture
            in the recording closest to the seek time with all image time stamps less than the seek time.
            
            If a call was made to <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetNextCapture(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.NativeHandles.CaptureHandle@)"/> that returned <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Eof"/>, the playback
            position is at the end of the stream and this method will return the last capture in the recording.
            
            Capture objects returned by the playback API will always contain at least one image, but may have images missing if
            frames were dropped in the original recording. When calling <see cref="M:K4AdotNet.Sensor.NativeApi.CaptureGetColorImage(K4AdotNet.NativeHandles.CaptureHandle)"/>,
            <see cref="M:K4AdotNet.Sensor.NativeApi.CaptureGetDepthImage(K4AdotNet.NativeHandles.CaptureHandle)"/>, or <see cref="M:K4AdotNet.Sensor.NativeApi.CaptureGetIRImage(K4AdotNet.NativeHandles.CaptureHandle)"/>,
            the image should be checked for <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackGetNextImuSample(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Sensor.ImuSample@)">
            <summary>Read the next IMU sample in the recording sequence.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="imuSample">If successful this contains IMU sample.</param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Succeeded"/> if a sample is returned, or <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Eof"/>
            if the end of the recording is reached. All other failures will return <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Failed"/>.
            </returns>
            <remarks>
            This method always returns the next IMU sample in sequence after the most recently returned sample.
            
            The first call to this method after <see cref="M:K4AdotNet.Record.NativeApi.PlaybackSeekTimestamp(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/> will return the IMU sample
            in the recording closest to the seek time with timestamp greater than or equal to the seek time.
            
            If a call was made to <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetPreviousImuSample(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Sensor.ImuSample@)"/> that returned <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Eof"/>, the playback
            position is at the beginning of the stream and this method will return the first IMU sample in the recording.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackGetPreviousImuSample(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Sensor.ImuSample@)">
            <summary>Read the previous IMU sample in the recording sequence.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="imuSample">If successful this contains IMU sample.</param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Succeeded"/> if a sample is returned, or <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Eof"/>
            if the start of the recording is reached. All other failures will return <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Failed"/>.
            </returns>
            <remarks>
            This method always returns the previous IMU sample in sequence before the most recently returned sample.
            
            The first call to this method after <see cref="M:K4AdotNet.Record.NativeApi.PlaybackSeekTimestamp(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/> will return the IMU sample
            in the recording closest to the seek time with timestamp less than the seek time.
            
            If a call was made to <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetPreviousImuSample(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Sensor.ImuSample@)"/> that returned <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Eof"/>, the playback
            position is at the beginning of the stream and this method will return the first IMU sample in the recording.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackGetNextDataBlock(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[],K4AdotNet.NativeHandles.PlaybackDataBlockHandle@)">
            <summary>Read the next data block for a particular track.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="trackName">The name of the track to read the next data block from.</param>
            <param name="dataHandle">The location to write the data block handle.</param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Succeeded"/> if a data block is returned,
            or <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Eof"/> if the end of the recording is reached.
            All other failures will return <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Failed"/>.
            </returns>
            <remarks>
            This method always returns the data block after the most recently returned data block for a particular track.
            
            If a call was made to <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetPreviousDataBlock(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[],K4AdotNet.NativeHandles.PlaybackDataBlockHandle@)"/> which returned <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Eof"/>, then the
            playback position is at the beginning of the recording and calling this method with the same
            track will return the first data block in the track.
            
            The first call to this method after <see cref="M:K4AdotNet.Record.NativeApi.PlaybackSeekTimestamp(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/>
            will return the data block in the recording closest to the seek time with a timestamp greater than or equal to the seek time.
            
            This method cannot be used with the built-in tracks: "COLOR", "DEPTH", etc...
            <see cref="M:K4AdotNet.Record.NativeApi.PlaybackTrackIsBuiltIn(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[])"/> can be used to determine if a track is a built-in track.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackGetPreviousDataBlock(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[],K4AdotNet.NativeHandles.PlaybackDataBlockHandle@)">
            <summary>Read the previous data block for a particular track.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <param name="trackName">The name of the track to read the previous data block from.</param>
            <param name="dataHandle">The location to write the data block handle.</param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Succeeded"/> if a data block is returned,
            or <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Eof"/> if the start of the recording is reached.
            All other failures will return <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Failed"/>.
            </returns>
            <remarks>
            This method always returns the data block before the most recently returned data block for a particular track.
            
            If a call was made to <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetNextDataBlock(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[],K4AdotNet.NativeHandles.PlaybackDataBlockHandle@)"/> which returned <see cref="F:K4AdotNet.NativeCallResults.StreamResult.Eof"/>, then the
            playback position is at the end of the recording and calling this method with the same
            track will return the last data block in the track.
            
            The first call to this method after <see cref="M:K4AdotNet.Record.NativeApi.PlaybackSeekTimestamp(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/>
            will return the data block in the recording closest to the seek time with a timestamp less than the seek time.
            
            This method cannot be used with the built-in tracks: "COLOR", "DEPTH", etc...
            <see cref="M:K4AdotNet.Record.NativeApi.PlaybackTrackIsBuiltIn(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[])"/> can be used to determine if a track is a built-in track.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackDataBlockGetDeviceTimestamp(K4AdotNet.NativeHandles.PlaybackDataBlockHandle)">
            <summary>Get the device timestamp of a data block in microseconds.</summary>
            <param name="dataBlockHandle">
            Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetNextDataBlock(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[],K4AdotNet.NativeHandles.PlaybackDataBlockHandle@)"/>
            or <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetPreviousDataBlock(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[],K4AdotNet.NativeHandles.PlaybackDataBlockHandle@)"/>.
            </param>
            <returns>
            Returns the device timestamp of the data block. If the <paramref name="dataBlockHandle"/> is invalid this function will return <see cref="F:K4AdotNet.Microseconds64.Zero"/>.
            It is also possible for <see cref="F:K4AdotNet.Microseconds64.Zero"/> to be a valid timestamp originating from when a device was first powered on.
            </returns>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackDataBlockGetBufferSize(K4AdotNet.NativeHandles.PlaybackDataBlockHandle)">
            <summary>Get the buffer size of a data block.</summary>
            <param name="dataBlockHandle">
            Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetNextDataBlock(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[],K4AdotNet.NativeHandles.PlaybackDataBlockHandle@)"/>
            or <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetPreviousDataBlock(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[],K4AdotNet.NativeHandles.PlaybackDataBlockHandle@)"/>.
            </param>
            <returns>
            Returns the buffer size of the data block, or 0 if the data block is invalid.
            </returns>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackDataBlockGetBuffer(K4AdotNet.NativeHandles.PlaybackDataBlockHandle)">
            <summary>Get the buffer of a data block.</summary>
            <param name="dataBlockHandle">
            Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetNextDataBlock(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[],K4AdotNet.NativeHandles.PlaybackDataBlockHandle@)"/>
            or <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetPreviousDataBlock(K4AdotNet.NativeHandles.PlaybackHandle,System.Byte[],K4AdotNet.NativeHandles.PlaybackDataBlockHandle@)"/>.
            </param>
            <returns>
            Returns a pointer to the data block buffer, or <see cref="F:System.IntPtr.Zero"/> if the data block is invalid.
            </returns>
            <remarks>Use this buffer to access the data written to a custom recording track.</remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackSeekTimestamp(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)">
             <summary>Seek to a specific timestamp within a recording.</summary>
             <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
             <param name="offset">The timestamp offset to seek to relative to <paramref name="origin"/>.</param>
             <param name="origin">
             Specifies how the given timestamp should be interpreted. Seek can be done relative to the beginning or end of the
             recording, or using an absolute device timestamp.
             </param>
             <returns>
             <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if the seek operation was successful, or <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/>
             if an error occurred. The current seek position is left unchanged if a failure is returned.
             </returns>
             <remarks>
             The first device timestamp in a recording is usually non-zero. The recording file starts at the device timestamp
             defined by <see cref="F:K4AdotNet.Record.RecordConfiguration.StartTimeOffset"/>,
             which is accessible via <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetRecordConfiguration(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Record.RecordConfiguration@)"/>.
            
             The first call to <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetNextCapture(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.NativeHandles.CaptureHandle@)"/> after this method
             will return the first capture containing an image timestamp greater than or equal to the seek time.
             
             The first call to <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetPreviousCapture(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.NativeHandles.CaptureHandle@)"/> after this method
             will return the firs capture with all image timestamps less than the seek time.
             
             The first call to <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetNextImuSample(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Sensor.ImuSample@)"/> after this method
             will return the first IMU sample with a timestamp greater than or equal to the seek time.
             
             The first call to <see cref="M:K4AdotNet.Record.NativeApi.PlaybackGetPreviousImuSample(K4AdotNet.NativeHandles.PlaybackHandle,K4AdotNet.Sensor.ImuSample@)"/> after this method
             will return the first IMU sample with a timestamp less than the seek time.
             </remarks>
        </member>
        <member name="M:K4AdotNet.Record.NativeApi.PlaybackGetRecordingLength(K4AdotNet.NativeHandles.PlaybackHandle)">
            <summary>Returns the length of the recording in microseconds.</summary>
            <param name="playbackHandle">Handle obtained by <see cref="M:K4AdotNet.Record.NativeApi.PlaybackOpen(System.Byte[],K4AdotNet.NativeHandles.PlaybackHandle@)"/>.</param>
            <returns>The recording length, calculated as the difference between the first and last timestamp in the file.</returns>
            <remarks>
            The recording length may be longer than an individual track if, for example, the IMU continues to run after the last
            color image is recorded.
            </remarks>
        </member>
        <member name="T:K4AdotNet.Record.Playback">
            <summary>Kinect for Azure recording opened for playback.</summary>
            <seealso cref="T:K4AdotNet.Record.Recorder"/>
        </member>
        <member name="M:K4AdotNet.Record.Playback.#ctor(System.String)">
            <summary>Opens an existing recording file for reading.</summary>
            <param name="filePath">File system path of the existing recording. Not <see langword="null"/>. Not empty.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> contains some invalid character. Also, right now non-Latin letters are not supported in <paramref name="filePath"/> under Windows.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Files specified in <paramref name="filePath"/> does not exist.</exception>
            <exception cref="T:K4AdotNet.Record.PlaybackException">Cannot open file specified in <paramref name="filePath"/> for playback. See logs for details.</exception>
        </member>
        <member name="M:K4AdotNet.Record.Playback.Dispose">
            <summary>
            Call this method to close file and free all unmanaged resources associated with current instance.
            </summary>
            <seealso cref="E:K4AdotNet.Record.Playback.Disposed"/>
            <seealso cref="P:K4AdotNet.Record.Playback.IsDisposed"/>
        </member>
        <member name="P:K4AdotNet.Record.Playback.IsDisposed">
            <summary>Gets a value indicating whether the object has been disposed of.</summary>
            <seealso cref="M:K4AdotNet.Record.Playback.Dispose"/>
        </member>
        <member name="E:K4AdotNet.Record.Playback.Disposed">
            <summary>Raised on object disposing (only once).</summary>
            <seealso cref="M:K4AdotNet.Record.Playback.Dispose"/>
        </member>
        <member name="P:K4AdotNet.Record.Playback.FilePath">
            <summary>File system path to recording opened for playback. Not <see langword="null"/>. Not empty.</summary>
        </member>
        <member name="P:K4AdotNet.Record.Playback.RecordLength">
            <summary>Gets the length of the recording in microseconds (the difference between the first and last timestamp in the file).</summary>
            <remarks>
            The recording length may be longer than an individual track if, for example, the IMU continues to run after the last
            color image is recorded.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be asked for disposed object.</exception>
            <seealso cref="P:K4AdotNet.Sensor.Image.DeviceTimestamp"/>
        </member>
        <member name="P:K4AdotNet.Record.Playback.LastTimestamp">
            <summary>Gets the last timestamp in a recording, relative to the start of the recording.</summary>
            <remarks>
            This function returns a file timestamp, not an absolute device timestamp, meaning it is relative to the start of the
            recording. This function is equivalent to the length of the recording.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be asked for disposed object.</exception>
            <seealso cref="P:K4AdotNet.Sensor.Image.DeviceTimestamp"/>
        </member>
        <member name="P:K4AdotNet.Record.Playback.Tracks">
            <summary>Gets the list of tracks in the playback file. Not <see langword="null"/>.</summary>
            <remarks>
            This collection includes information about built-in and custom tracks.
            To check if track is built-in, use <see cref="P:K4AdotNet.Record.PlaybackTrack.IsBuiltIn"/> property.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be asked for disposed object.</exception>
            <seealso cref="T:K4AdotNet.Record.PlaybackTrack"/>
            <seealso cref="P:K4AdotNet.Record.Recorder.CustomTracks"/>
        </member>
        <member name="M:K4AdotNet.Record.Playback.ToString">
            <summary>Convenient string representation of object.</summary>
            <returns><c>Playback from {FilePath}</c></returns>
        </member>
        <member name="M:K4AdotNet.Record.Playback.GetRawCalibration">
            <summary>Get the raw calibration blob for the Azure Kinect device used during recording.</summary>
            <returns>Raw calibration data terminated by <c>0</c> byte. Not <see langword="null"/>.</returns>
            <remarks>The raw calibration may not exist if the device was not specified during recording.</remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Record.PlaybackException">Cannot read calibration data from recording. See logs for details.</exception>
            <seealso cref="M:K4AdotNet.Sensor.Device.GetRawCalibration"/>
        </member>
        <member name="M:K4AdotNet.Record.Playback.GetCalibration(K4AdotNet.Sensor.Calibration@)">
            <summary>Get the camera calibration for Azure Kinect device used during recording.</summary>
            <param name="calibration">Output: calibration data.</param>
            <remarks>The calibration may not exist if the device was not specified during recording.</remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Record.PlaybackException">Cannot read calibration data from recording. See logs for details.</exception>
        </member>
        <member name="M:K4AdotNet.Record.Playback.GetRecordConfiguration(K4AdotNet.Record.RecordConfiguration@)">
            <summary>Get the device configuration used during recording.</summary>
            <param name="config">Output: recording configuration.</param>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Record.PlaybackException">Cannot read configuration from recording. See logs for details.</exception>
        </member>
        <member name="M:K4AdotNet.Record.Playback.TryGetTag(System.String,System.String@)">
            <summary>Reads the value of a tag from a recording.</summary>
            <param name="name">The name of the tag to read. Not <see langword="null"/> and not empty. Can contain only ASCII characters.</param>
            <param name="value">Output: tag value on success.</param>
            <returns>
            <see langword="true"/> tag value successfully read,
            <see langword="false"/> if tag value cannot be read (most likely, tag doesn't exist in recording).
            </returns>
            <remarks>
            Tags are global to a file, and should store data related to the entire recording, such as camera configuration or
            recording location.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/> or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> contains non-ASCII characters.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <seealso cref="M:K4AdotNet.Record.Recorder.AddTag(System.String,System.String)"/>
        </member>
        <member name="M:K4AdotNet.Record.Playback.TryGetAttachment(System.String,System.Byte[]@)">
            <summary>Reads an attachment file from a recording.</summary>
            <param name="attachmentName">Attachment file name. Not <see langword="null"/>, not empty.</param>
            <param name="attachmentData">Output: attachment data.</param>
            <returns>
            <see langword="true"/> attachment successfully read,
            <see langword="false"/> if attachment cannot be read (most likely, attachment with specified name doesn't exist in recording).
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="attachmentName"/> is <see langword="null"/> or empty.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <seealso cref="M:K4AdotNet.Record.Recorder.AddAttachment(System.String,System.Byte[])"/>
        </member>
        <member name="M:K4AdotNet.Record.Playback.SetColorConversion(K4AdotNet.Sensor.ImageFormat)">
            <summary>
            Sets the image format that color captures will be converted to. By default the conversion format will be the same as
            the image format stored in the recording file, and no conversion will occur.
            </summary>
            <param name="format">The target image format to be returned in captures.</param>
            <remarks><para>
            After the color conversion format is set, all <see cref="T:K4AdotNet.Sensor.Capture"/> objects returned from the playback handle will have
            their color images converted to the <paramref name="format"/>.
            </para><para>
            Color format conversion occurs in the user-thread, so setting <paramref name="format"/> to anything other than the format
            stored in the file may significantly increase the latency of <see cref="M:K4AdotNet.Record.Playback.TryGetNextCapture(K4AdotNet.Sensor.Capture@)"/> and
            <see cref="M:K4AdotNet.Record.Playback.TryGetPreviousCapture(K4AdotNet.Sensor.Capture@)"/>.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:System.InvalidOperationException">Format <paramref name="format"/> is not supported for color conversion.</exception>
        </member>
        <member name="M:K4AdotNet.Record.Playback.TrySeekTimestamp(K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)">
            <summary>
            Seeks to a specific timestamp within a recording.
            Like <see cref="M:K4AdotNet.Record.Playback.SeekTimestamp(K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/> but returns <see langword="false"/> in case of failure.
            </summary>
            <param name="offset">The timestamp offset to seek to relative to <paramref name="origin"/>.</param>
            <param name="origin">
            Specifies how the given timestamp should be interpreted. Seek can be done relative to the beginning or end of the
            recording, or using an absolute device timestamp.
            </param>
            <returns>
            <see langword="true"/> if the seek operation was successful, or <see langword="false"/>
            if an error occurred. The current seek position is left unchanged if <see langword="false"/> is returned.
            </returns>
            <remarks><para>
            The first device timestamp in a recording is usually non-zero. The recording file starts at the device timestamp
            defined by <see cref="F:K4AdotNet.Record.RecordConfiguration.StartTimeOffset"/>,
            which is accessible via <see cref="M:K4AdotNet.Record.Playback.GetRecordConfiguration(K4AdotNet.Record.RecordConfiguration@)"/>.
            </para><para>
            The first call to <see cref="M:K4AdotNet.Record.Playback.TryGetNextCapture(K4AdotNet.Sensor.Capture@)"/> after this method
            will return the first capture containing an image timestamp greater than or equal to the seek time.
            </para><para>
            The first call to <see cref="M:K4AdotNet.Record.Playback.TryGetPreviousCapture(K4AdotNet.Sensor.Capture@)"/> after this method
            will return the firs capture with all image timestamps less than the seek time.
            </para><para>
            The first call to <see cref="M:K4AdotNet.Record.Playback.TryGetNextImuSample(K4AdotNet.Sensor.ImuSample@)"/> after this method
            will return the first IMU sample with a timestamp greater than or equal to the seek time.
            </para><para>
            The first call to <see cref="M:K4AdotNet.Record.Playback.TryGetPreviousImuSample(K4AdotNet.Sensor.ImuSample@)"/> after this method
            will return the first IMU sample with a timestamp less than the seek time.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <seealso cref="M:K4AdotNet.Record.Playback.SeekTimestamp(K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/>
        </member>
        <member name="M:K4AdotNet.Record.Playback.SeekTimestamp(K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)">
            <summary>
            Seeks to a specific timestamp within a recording.
            Like <see cref="M:K4AdotNet.Record.Playback.TrySeekTimestamp(K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/> but throws exception in case of failure.
            </summary>
            <param name="offset">The timestamp offset to seek to relative to <paramref name="origin"/>.</param>
            <param name="origin">
            Specifies how the given timestamp should be interpreted. Seek can be done relative to the beginning or end of the
            recording, or using an absolute device timestamp.
            </param>
            <remarks><para>
            The first device timestamp in a recording is usually non-zero. The recording file starts at the device timestamp
            defined by <see cref="F:K4AdotNet.Record.RecordConfiguration.StartTimeOffset"/>,
            which is accessible via <see cref="M:K4AdotNet.Record.Playback.GetRecordConfiguration(K4AdotNet.Record.RecordConfiguration@)"/>.
            </para><para>
            The first call to <see cref="M:K4AdotNet.Record.Playback.TryGetNextCapture(K4AdotNet.Sensor.Capture@)"/> after this method
            will return the first capture containing an image timestamp greater than or equal to the seek time.
            </para><para>
            The first call to <see cref="M:K4AdotNet.Record.Playback.TryGetPreviousCapture(K4AdotNet.Sensor.Capture@)"/> after this method
            will return the firs capture with all image timestamps less than the seek time.
            </para><para>
            The first call to <see cref="M:K4AdotNet.Record.Playback.TryGetNextImuSample(K4AdotNet.Sensor.ImuSample@)"/> after this method
            will return the first IMU sample with a timestamp greater than or equal to the seek time.
            </para><para>
            The first call to <see cref="M:K4AdotNet.Record.Playback.TryGetPreviousImuSample(K4AdotNet.Sensor.ImuSample@)"/> after this method
            will return the first IMU sample with a timestamp less than the seek time.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Record.PlaybackException">Cannot seek playback to position specified.</exception>
            <seealso cref="M:K4AdotNet.Record.Playback.TrySeekTimestamp(K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/>
        </member>
        <member name="M:K4AdotNet.Record.Playback.TryGetNextCapture(K4AdotNet.Sensor.Capture@)">
            <summary>Reads the next capture in the recording sequence.</summary>
            <param name="capture">If successful this contains capture data read from playback. Don't forget to dispose this object after usage.</param>
            <returns>
            <see langword="true"/> - if a capture is returned,
            <see langword="false"/> - if the end of the recording is reached.
            All other failures will throw <see cref="T:K4AdotNet.Record.PlaybackException"/> exception.
            </returns>
            <remarks><para>
            This method always returns the next capture in sequence after the most recently returned capture.
            </para><para>
            The first call to this method after <see cref="M:K4AdotNet.Record.Playback.SeekTimestamp(K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/> will return the capture
            in the recording closest to the seek time with an image timestamp greater than or equal to the seek time.
            </para><para>
            If a call was made to <see cref="M:K4AdotNet.Record.Playback.TryGetPreviousCapture(K4AdotNet.Sensor.Capture@)"/> that returned <see langword="false"/> (which means EOF), the playback
            position is at the beginning of the stream and this method will return the first capture in the recording.
            </para><para>
            Capture objects returned by the playback API will always contain at least one image, but may have images missing if
            frames were dropped in the original recording. When calling <see cref="P:K4AdotNet.Sensor.Capture.ColorImage"/>,
            <see cref="P:K4AdotNet.Sensor.Capture.DepthImage"/>, or <see cref="P:K4AdotNet.Sensor.Capture.IRImage"/>,
            the image should be checked for <see langword="null"/>.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Record.PlaybackException">Error during reading from recording. See logs for details.</exception>
        </member>
        <member name="M:K4AdotNet.Record.Playback.TryGetPreviousCapture(K4AdotNet.Sensor.Capture@)">
            <summary>Reads the previous capture in the recording sequence.</summary>
            <param name="capture">If successful this contains capture data read from playback. Don't forget to dispose this object after usage.</param>
            <returns>
            <see langword="true"/> - if a capture is returned,
            <see langword="false"/> - if the start of the recording is reached.
            All other failures will throw <see cref="T:K4AdotNet.Record.PlaybackException"/> exception.
            </returns>
            <remarks><para>
            This method always returns the previous capture in sequence before the most recently returned capture.
            </para><para>
            The first call to this method after <see cref="M:K4AdotNet.Record.Playback.SeekTimestamp(K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/> will return the capture
            in the recording closest to the seek time with all image time stamps less than the seek time.
            </para><para>
            If a call was made to <see cref="M:K4AdotNet.Record.Playback.TryGetNextCapture(K4AdotNet.Sensor.Capture@)"/> that returned <see langword="false"/> (which means EOF), the playback
            position is at the end of the stream and this method will return the last capture in the recording.
            </para><para>
            Capture objects returned by the playback API will always contain at least one image, but may have images missing if
            frames were dropped in the original recording. When calling <see cref="P:K4AdotNet.Sensor.Capture.ColorImage"/>,
            <see cref="P:K4AdotNet.Sensor.Capture.DepthImage"/>, or <see cref="P:K4AdotNet.Sensor.Capture.IRImage"/>,
            the image should be checked for <see langword="null"/>.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Record.PlaybackException">Error during reading from recording. See logs for details.</exception>
        </member>
        <member name="M:K4AdotNet.Record.Playback.TryGetNextImuSample(K4AdotNet.Sensor.ImuSample@)">
            <summary>Reads the next IMU sample in the recording sequence.</summary>
            <param name="imuSample">If successful this contains IMU sample.</param>
            <returns>
            <see langword="true"/> - if a sample is returned,
            <see langword="false"/> - if the end of the recording is reached.
            All other failures will throw <see cref="T:K4AdotNet.Record.PlaybackException"/> exception.
            </returns>
            <remarks><para>
            This method always returns the next IMU sample in sequence after the most recently returned sample.
            </para><para>
            The first call to this method after <see cref="M:K4AdotNet.Record.Playback.SeekTimestamp(K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/> will return the IMU sample
            in the recording closest to the seek time with timestamp greater than or equal to the seek time.
            </para><para>
            If a call was made to <see cref="M:K4AdotNet.Record.Playback.TryGetPreviousImuSample(K4AdotNet.Sensor.ImuSample@)"/> that returned <see langword="false"/> (which means EOF), the playback
            position is at the beginning of the stream and this method will return the first IMU sample in the recording.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Record.PlaybackException">Error during reading from recording. See logs for details.</exception>
        </member>
        <member name="M:K4AdotNet.Record.Playback.TryGetPreviousImuSample(K4AdotNet.Sensor.ImuSample@)">
            <summary>Reads the previous IMU sample in the recording sequence.</summary>
            <param name="imuSample">If successful this contains IMU sample.</param>
            <returns>
            <see langword="true"/> - if a sample is returned,
            <see langword="false"/> - if the start of the recording is reached.
            All other failures will throw <see cref="T:K4AdotNet.Record.PlaybackException"/> exception.
            </returns>
            <remarks><para>
            This method always returns the previous IMU sample in sequence before the most recently returned sample.
            </para><para>
            The first call to this method after <see cref="M:K4AdotNet.Record.Playback.SeekTimestamp(K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/> will return the IMU sample
            in the recording closest to the seek time with timestamp less than the seek time.
            </para><para>
            If a call was made to <see cref="M:K4AdotNet.Record.Playback.TryGetNextImuSample(K4AdotNet.Sensor.ImuSample@)"/> that returned <see langword="false"/> (which means EOF), the playback
            position is at the end of the stream and this method will return the last IMU sample in the recording.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Record.PlaybackException">Error during reading from recording. See logs for details.</exception>
        </member>
        <member name="T:K4AdotNet.Record.PlaybackDataBlock">
            <summary>Data block read from custom track in recording.</summary>
            <seealso cref="T:K4AdotNet.Record.PlaybackTrack"/>
        </member>
        <member name="M:K4AdotNet.Record.PlaybackDataBlock.Dispose">
            <summary>
            Call this method to release data block and free all unmanaged resources associated with current instance.
            </summary>
            <seealso cref="E:K4AdotNet.Record.PlaybackDataBlock.Disposed"/>
            <seealso cref="P:K4AdotNet.Record.PlaybackDataBlock.IsDisposed"/>
        </member>
        <member name="P:K4AdotNet.Record.PlaybackDataBlock.IsDisposed">
            <summary>Gets a value indicating whether the data block has been disposed of.</summary>
            <seealso cref="M:K4AdotNet.Record.PlaybackDataBlock.Dispose"/>
        </member>
        <member name="E:K4AdotNet.Record.PlaybackDataBlock.Disposed">
            <summary>Raised on object disposing (only once).</summary>
            <seealso cref="M:K4AdotNet.Record.PlaybackDataBlock.Dispose"/>
        </member>
        <member name="P:K4AdotNet.Record.PlaybackDataBlock.DeviceTimestamp">
            <summary>Gets the device timestamp of a data block in microseconds.</summary>
            <exception cref="T:System.ObjectDisposedException">This property cannot be asked for disposed object.</exception>
        </member>
        <member name="P:K4AdotNet.Record.PlaybackDataBlock.SizeBytes">
            <summary>Gets the buffer size of a data block in bytes.</summary>
            <exception cref="T:System.ObjectDisposedException">This property cannot be asked for disposed object.</exception>
        </member>
        <member name="P:K4AdotNet.Record.PlaybackDataBlock.Buffer">
            <summary>Gets the buffer of a data block.</summary>
            <remarks>Use this buffer to access the data written to a custom recording track.</remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be asked for disposed object.</exception>
        </member>
        <member name="M:K4AdotNet.Record.PlaybackDataBlock.CopyTo(System.Byte[])">
            <summary>Copies block data from <see cref="P:K4AdotNet.Record.PlaybackDataBlock.Buffer"/> to <paramref name="dst"/> array.</summary>
            <param name="dst">Destination array for block data. Cannot be <see langword="null"/>. Must be long enough (see <see cref="P:K4AdotNet.Record.PlaybackDataBlock.SizeBytes"/>).</param>
            <returns>Number of copied array elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dst"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="dst"/> array is too small.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
        </member>
        <member name="M:K4AdotNet.Record.PlaybackDataBlock.CopyTo(System.Int16[])">
            <summary>Copies block data from <see cref="P:K4AdotNet.Record.PlaybackDataBlock.Buffer"/> to <paramref name="dst"/> array.</summary>
            <param name="dst">Destination array for block data. Cannot be <see langword="null"/>. Must be long enough (see <see cref="P:K4AdotNet.Record.PlaybackDataBlock.SizeBytes"/>).</param>
            <returns>Number of copied array elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dst"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="dst"/> array is too small.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
        </member>
        <member name="M:K4AdotNet.Record.PlaybackDataBlock.CopyTo(System.Single[])">
            <summary>Copies block data from <see cref="P:K4AdotNet.Record.PlaybackDataBlock.Buffer"/> to <paramref name="dst"/> array.</summary>
            <param name="dst">Destination array for block data. Cannot be <see langword="null"/>. Must be long enough (see <see cref="P:K4AdotNet.Record.PlaybackDataBlock.SizeBytes"/>).</param>
            <returns>Number of copied array elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dst"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="dst"/> array is too small.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
        </member>
        <member name="M:K4AdotNet.Record.PlaybackDataBlock.CopyTo(System.Int32[])">
            <summary>Copies block data from <see cref="P:K4AdotNet.Record.PlaybackDataBlock.Buffer"/> to <paramref name="dst"/> array.</summary>
            <param name="dst">Destination array for block data. Cannot be <see langword="null"/>. Must be long enough (see <see cref="P:K4AdotNet.Record.PlaybackDataBlock.SizeBytes"/>).</param>
            <returns>Number of copied array elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dst"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="dst"/> array is too small.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
        </member>
        <member name="T:K4AdotNet.Record.PlaybackException">
            <summary>Class for all playback-related exceptions.</summary>
            <seealso cref="T:K4AdotNet.Record.Playback"/>
        </member>
        <member name="P:K4AdotNet.Record.PlaybackException.FilePath">
            <summary>File system path to recording.</summary>
            <seealso cref="P:K4AdotNet.Record.Playback.FilePath"/>
        </member>
        <member name="M:K4AdotNet.Record.PlaybackException.#ctor(System.String)">
            <summary>Creates exception with default message.</summary>
            <param name="filePath">File system path to recording.</param>
        </member>
        <member name="M:K4AdotNet.Record.PlaybackException.#ctor(System.String,System.String)">
            <summary>Creates exception with specified message.</summary>
            <param name="message">Message for exception. Can be reached then via <see cref="P:System.Exception.Message"/> property.</param>
            <param name="filePath">File system path to recording.</param>
        </member>
        <member name="M:K4AdotNet.Record.PlaybackException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor for deserialization needs.</summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:K4AdotNet.Record.PlaybackException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization needs.</summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:K4AdotNet.Record.PlaybackSeekOrigin">
            <summary>Playback seeking positions.</summary>
        </member>
        <member name="F:K4AdotNet.Record.PlaybackSeekOrigin.Begin">
            <summary>Seek relative to the beginning of a recording.</summary>
        </member>
        <member name="F:K4AdotNet.Record.PlaybackSeekOrigin.End">
            <summary>Seek relative to the end of a recording.</summary>
        </member>
        <member name="F:K4AdotNet.Record.PlaybackSeekOrigin.DeviceTime">
            <summary>Seek to an absolute device timestamp.</summary>
        </member>
        <member name="T:K4AdotNet.Record.PlaybackTrack">
            <summary>Information about track in <see cref="T:K4AdotNet.Record.Playback"/>.</summary>
            <seealso cref="P:K4AdotNet.Record.Playback.Tracks"/>
            <seealso cref="T:K4AdotNet.Record.PlaybackTrackCollection"/>
        </member>
        <member name="M:K4AdotNet.Record.PlaybackTrack.#ctor(K4AdotNet.Record.Playback,System.Int32)">
            <summary>Creates track object with specified <paramref name="index"/> for specified <paramref name="playback"/>.</summary>
            <param name="playback">Owner. Not <see langword="null"/>.</param>
            <param name="index">Zero-based index of track.</param>
            <exception cref="T:K4AdotNet.Record.PlaybackException">Cannot get name of track with specified index.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed <paramref name="playback"/> object.</exception>
        </member>
        <member name="P:K4AdotNet.Record.PlaybackTrack.Index">
            <summary>Zero-based index of track.</summary>
        </member>
        <member name="P:K4AdotNet.Record.PlaybackTrack.Name">
            <summary>Name of track. Not <see langword="null"/> and empty.</summary>
        </member>
        <member name="P:K4AdotNet.Record.PlaybackTrack.IsBuiltIn">
            <summary>Checks whether a track is one of the built-in tracks: "COLOR", "DEPTH", etc...</summary>
            <exception cref="T:System.ObjectDisposedException">Appropriated <see cref="T:K4AdotNet.Record.Playback"/> object was disposed object.</exception>
        </member>
        <member name="P:K4AdotNet.Record.PlaybackTrack.VideoSettings">
            <summary>Gets the video-specific track information for this track.</summary>
            <exception cref="T:System.InvalidOperationException">This is not a video track.</exception>
            <exception cref="T:System.ObjectDisposedException">Appropriated <see cref="T:K4AdotNet.Record.Playback"/> object was disposed object.</exception>
        </member>
        <member name="P:K4AdotNet.Record.PlaybackTrack.CodecId">
            <summary>Gets the codec id string for this track.</summary>
            <remarks>
            The codec ID is a string that corresponds to the codec of the track's data. Some of the existing formats are listed
            here: https://www.matroska.org/technical/specs/codecid/index.html. It can also be custom defined by the user.
            </remarks>
            <exception cref="T:K4AdotNet.Record.PlaybackException">Cannot get coded ID for this track for some reason. See logs for details.</exception>
            <exception cref="T:System.ObjectDisposedException">Appropriated <see cref="T:K4AdotNet.Record.Playback"/> object was disposed object.</exception>
        </member>
        <member name="P:K4AdotNet.Record.PlaybackTrack.CodecContext">
            <summary>Gets the codec context for this track.</summary>
            <remarks>
            The codec context is a codec-specific buffer that contains any required codec metadata that is only known to the
            codec. It is mapped to the matroska <c>CodecPrivate</c> element. Not <see langword="null"/>.
            </remarks>
            <exception cref="T:K4AdotNet.Record.PlaybackException">Cannot get coded context for this track for some reason. See logs for details.</exception>
            <exception cref="T:System.ObjectDisposedException">Appropriated <see cref="T:K4AdotNet.Record.Playback"/> object was disposed object.</exception>
        </member>
        <member name="M:K4AdotNet.Record.PlaybackTrack.TryGetNextDataBlock(K4AdotNet.Record.PlaybackDataBlock@)">
            <summary>Reads the next data block for this track.</summary>
            <param name="dataBlock">Output: data block object on success or <see langword="null"/> on EOF. Don't forget to dispose this object after usage.</param>
            <returns>
            <see langword="true"/> - if a data block is returned,
            <see langword="false"/> - if the end of the recording is reached.
            All other failures will throw <see cref="T:K4AdotNet.Record.PlaybackException"/> exception.
            </returns>
            <remarks><para>
            This method always returns the data block after the most recently returned data block for a particular track.
            </para><para>
            If a call was made to <see cref="M:K4AdotNet.Record.PlaybackTrack.TryGetPreviousDataBlock(K4AdotNet.Record.PlaybackDataBlock@)"/> which returned <see langword="false"/>, then the
            playback position is at the beginning of the recording and calling this method will return the first data block in the track.
            </para><para>
            The first call to this method after <see cref="M:K4AdotNet.Record.Playback.SeekTimestamp(K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/>
            will return the data block in the recording closest to the seek time with a timestamp greater than or equal to the seek time.
            </para><para>
            This method cannot be used with the built-in tracks: "COLOR", "DEPTH", etc...
            <see cref="P:K4AdotNet.Record.PlaybackTrack.IsBuiltIn"/> property can be used to determine if a track is a built-in track.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed playback object.</exception>
            <exception cref="T:K4AdotNet.Record.PlaybackException">Error during reading from recording. See logs for details.</exception>
            <exception cref="T:System.InvalidOperationException">This method cannot be used with the built-in tracks: "COLOR", "DEPTH", etc...</exception>
        </member>
        <member name="M:K4AdotNet.Record.PlaybackTrack.TryGetPreviousDataBlock(K4AdotNet.Record.PlaybackDataBlock@)">
            <summary>Reads the previous data block for this track.</summary>
            <param name="dataBlock">Output: data block object on success or <see langword="null"/> on EOF. Don't forget to dispose this object after usage.</param>
            <returns>
            <see langword="true"/> - if a data block is returned,
            <see langword="false"/> - if the start of the recording is reached.
            All other failures will throw <see cref="T:K4AdotNet.Record.PlaybackException"/> exception.
            </returns>
            <remarks><para>
            This method always returns the data block before the most recently returned data block for a particular track.
            </para><para>
            If a call was made to <see cref="M:K4AdotNet.Record.PlaybackTrack.TryGetNextDataBlock(K4AdotNet.Record.PlaybackDataBlock@)"/> which returned <see langword="false"/>, then the
            playback position is at the end of the recording and calling this method will return the last data block in the track.
            </para><para>
            The first call to this method after <see cref="M:K4AdotNet.Record.Playback.SeekTimestamp(K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/>
            will return the data block in the recording closest to the seek time with a timestamp less than the seek time.
            </para><para>
            This method cannot be used with the built-in tracks: "COLOR", "DEPTH", etc...
            <see cref="P:K4AdotNet.Record.PlaybackTrack.IsBuiltIn"/> property can be used to determine if a track is a built-in track.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed playback object.</exception>
            <exception cref="T:K4AdotNet.Record.PlaybackException">Error during reading from recording. See logs for details.</exception>
            <exception cref="T:System.InvalidOperationException">This method cannot be used with the built-in tracks: "COLOR", "DEPTH", etc...</exception>
        </member>
        <member name="T:K4AdotNet.Record.PlaybackTrackCollection">
            <summary>Collection of information about all tracks in <see cref="T:K4AdotNet.Record.Playback"/>, including built-in tracks.</summary>
            <seealso cref="P:K4AdotNet.Record.Playback.Tracks"/>
            <seealso cref="T:K4AdotNet.Record.PlaybackTrack"/>
        </member>
        <member name="P:K4AdotNet.Record.PlaybackTrackCollection.Item(System.Int32)">
            <summary>Gets information about track in <see cref="T:K4AdotNet.Record.Playback"/> by its zero-bases index.</summary>
            <param name="index">Zero-based index of track in <see cref="T:K4AdotNet.Record.Playback"/>.</param>
            <returns>Information about track in <see cref="T:K4AdotNet.Record.Playback"/> with a given index. Not <see langword="null"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is less than zero or is greater than or equal to <see cref="P:K4AdotNet.Record.PlaybackTrackCollection.Count"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Appropriate <see cref="T:K4AdotNet.Record.Playback"/> object was disposed.</exception>
        </member>
        <member name="P:K4AdotNet.Record.PlaybackTrackCollection.Item(System.String)">
            <summary>Gets information about track in <see cref="T:K4AdotNet.Record.Playback"/> by its name.</summary>
            <param name="name">Name of track.</param>
            <returns>Information about track with a given name or <see langword="null"/> if there is no track with such name in <see cref="T:K4AdotNet.Record.Playback"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">Appropriate <see cref="T:K4AdotNet.Record.Playback"/> object was disposed.</exception>
            <seealso cref="M:K4AdotNet.Record.PlaybackTrackCollection.Exists(System.String)"/>
        </member>
        <member name="P:K4AdotNet.Record.PlaybackTrackCollection.Count">
            <summary>Get the number of tracks in a playback file.</summary>
        </member>
        <member name="M:K4AdotNet.Record.PlaybackTrackCollection.GetEnumerator">
            <summary>Implementation of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <returns>All tracks in this collection.</returns>
            <exception cref="T:System.ObjectDisposedException">Appropriate <see cref="T:K4AdotNet.Record.Playback"/> object was disposed.</exception>
        </member>
        <member name="M:K4AdotNet.Record.PlaybackTrackCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Implementation of <see cref="T:System.Collections.IEnumerable"/>.</summary>
            <returns>All tracks in this collection.</returns>
            <exception cref="T:System.ObjectDisposedException">Appropriate <see cref="T:K4AdotNet.Record.Playback"/> object was disposed.</exception>
        </member>
        <member name="M:K4AdotNet.Record.PlaybackTrackCollection.Exists(System.String)">
            <summary>Checks whether a track with the given track name exists in the playback file.</summary>
            <param name="trackName">The track name to be checked to see whether it exists or not. Not <see langword="null"/> and not empty.</param>
            <returns><see langword="true"/> if the track exists.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackName"/> is <see langword="null"/> or empty.</exception>
            <exception cref="T:System.ObjectDisposedException">Appropriate <see cref="T:K4AdotNet.Record.Playback"/> object was disposed.</exception>
        </member>
        <member name="T:K4AdotNet.Record.RecordConfiguration">
            <summary>Structure containing the device configuration used to record.</summary>
        </member>
        <member name="F:K4AdotNet.Record.RecordConfiguration.ColorFormat">
            <summary>Image format used to record the color camera.</summary>
        </member>
        <member name="F:K4AdotNet.Record.RecordConfiguration.ColorResolution">
            <summary>Image resolution used to record the color camera.</summary>
        </member>
        <member name="F:K4AdotNet.Record.RecordConfiguration.DepthMode">
            <summary>Mode used to record the depth camera.</summary>
        </member>
        <member name="F:K4AdotNet.Record.RecordConfiguration.CameraFps">
            <summary>Frame rate used to record the color and depth camera.</summary>
        </member>
        <member name="F:K4AdotNet.Record.RecordConfiguration.ColorTrackEnabled">
            <summary><see langword="true"/> if the recording contains Color camera frames.</summary>
        </member>
        <member name="F:K4AdotNet.Record.RecordConfiguration.DepthTrackEnabled">
            <summary><see langword="true"/> if the recording contains Depth camera frames.</summary>
        </member>
        <member name="F:K4AdotNet.Record.RecordConfiguration.IRTrackEnabled">
            <summary><see langword="true"/> if the recording contains IR camera frames.</summary>
        </member>
        <member name="F:K4AdotNet.Record.RecordConfiguration.ImuTrackEnabled">
            <summary><see langword="true"/> if the recording contains IMU sample data.</summary>
        </member>
        <member name="F:K4AdotNet.Record.RecordConfiguration.DepthDelayOffColor">
            <summary>
            The delay between color and depth images in the recording.
            A negative delay means depth images are first, and a positive delay means color images are first.
            </summary>
        </member>
        <member name="F:K4AdotNet.Record.RecordConfiguration.WiredSyncMode">
            <summary>External synchronization mode.</summary>
        </member>
        <member name="F:K4AdotNet.Record.RecordConfiguration.SubordinateDelayOffMaster">
            <summary>
            The timestamp offset of the start of the recording. All recorded time stamps are offset by this value such that
            the recording starts at timestamp <see cref="F:K4AdotNet.Microseconds32.Zero"/>. This value can be used to synchronize time stamps between two recording files.
            </summary>
        </member>
        <member name="F:K4AdotNet.Record.RecordConfiguration.StartTimeOffset">
            <summary>
            The timestamp offset of the start of the recording. All recorded timestamps are offset by this value such that
            the recording starts at timestamp <see cref="F:K4AdotNet.Microseconds32.Zero"/>. This value can be used to synchronize timestamps between two recording files.
            </summary>
        </member>
        <member name="T:K4AdotNet.Record.Recorder">
            <summary>Kinect for Azure recording opened for writing.</summary>
            <seealso cref="T:K4AdotNet.Record.Playback"/>
        </member>
        <member name="M:K4AdotNet.Record.Recorder.#ctor(System.String,K4AdotNet.Sensor.Device,K4AdotNet.Sensor.DeviceConfiguration)">
            <summary>
            Opens a new recording file for writing.
            </summary>
            <param name="filePath">File system path for the new recording. Not <see langword="null"/>, not empty.</param>
            <param name="device">The Azure Kinect device that is being recorded. The device is used to store device calibration and serial
            number information. May be <see langword="null"/> if recording user-generated data.</param>
            <param name="config">The configuration the Azure Kinect device was started with. Must be valid: see <see cref="M:K4AdotNet.Sensor.DeviceConfiguration.IsValid(System.String@)"/>.</param>
            <remarks><para>
            The file will be created if it doesn't exist, or overwritten if an existing file is specified.
            </para><para>
            Streaming does not need to be started on the device at the time this function is called, but when it is started
            it should be started with the same configuration provided in <paramref name="config"/>.
            </para><para>
            Subsequent calls to <see cref="M:K4AdotNet.Record.Recorder.WriteCapture(K4AdotNet.Sensor.Capture)"/> will need to have images in the resolution and format defined
            in <paramref name="config"/>.
            </para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="config"/> is invalid or <paramref name="filePath"/> contains some invalid character. Also, right now non-Latin letters are not supported in <paramref name="filePath"/> under Windows.</exception>
        </member>
        <member name="M:K4AdotNet.Record.Recorder.Dispose">
            <summary>
            Call this method to flush all data to disk, close file and free all unmanaged resources associated with current instance.
            </summary>
            <seealso cref="E:K4AdotNet.Record.Recorder.Disposed"/>
            <seealso cref="P:K4AdotNet.Record.Recorder.IsDisposed"/>
        </member>
        <member name="P:K4AdotNet.Record.Recorder.IsDisposed">
            <summary>Gets a value indicating whether the object has been disposed of.</summary>
            <seealso cref="M:K4AdotNet.Record.Recorder.Dispose"/>
        </member>
        <member name="E:K4AdotNet.Record.Recorder.Disposed">
            <summary>Raised on object disposing (only once).</summary>
            <seealso cref="M:K4AdotNet.Record.Recorder.Dispose"/>
        </member>
        <member name="P:K4AdotNet.Record.Recorder.FilePath">
            <summary>File system path to recording. Not <see langword="null"/>. Not empty.</summary>
        </member>
        <member name="F:K4AdotNet.Record.Recorder.DeviceConfiguration">
            <summary>Device configuration for which this recorder has been created.</summary>
        </member>
        <member name="P:K4AdotNet.Record.Recorder.CustomTracks">
            <summary>Collection of custom tracks to be recorded to destination file. Not <see langword="null"/>.</summary>
            <remarks><para>
            Unlike <see cref="P:K4AdotNet.Record.Playback.Tracks"/> this collection contains information only about custom tracks.
            </para><para>
            Use <see cref="M:K4AdotNet.Record.RecorderCustomTrackCollection.AddVideoTrack(System.String,System.String,System.Byte[],K4AdotNet.Record.RecordVideoSettings)"/> and <see cref="M:K4AdotNet.Record.RecorderCustomTrackCollection.AddCustomSubtitleTrack(System.String,System.String,System.Byte[],K4AdotNet.Record.RecordSubtitleSettings)"/>
            to add new custom tracks to recording.
            </para></remarks>
            <seealso cref="T:K4AdotNet.Record.RecorderCustomTrack"/>
            <seealso cref="P:K4AdotNet.Record.Playback.Tracks"/>
        </member>
        <member name="M:K4AdotNet.Record.Recorder.AddTag(System.String,System.String)">
            <summary>Adds a tag to the recording.</summary>
            <param name="tagName">The name of the tag to write. Not <see langword="null"/>, not empty. Must be ALL CAPS and may only contain A-Z, 0-9, '-' and '_'.</param>
            <param name="tagValue">The string value to store in the tag. Not <see langword="null"/>. UTF-8 encoding is used to store.</param>
            <remarks><para>
            Tags are global to a file, and should store data related to the entire recording, such as camera configuration or
            recording location.
            </para><para>
            All tags need to be added before the recording header is written.
            </para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="tagName"/> is <see langword="null"/> or empty, or <paramref name="tagValue"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="tagName"/> contains invalid characters.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:K4AdotNet.Record.Recorder.AddTag(System.String,System.String)"/> must be called before <see cref="M:K4AdotNet.Record.Recorder.WriteHeader"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <seealso cref="M:K4AdotNet.Record.Playback.TryGetTag(System.String,System.String@)"/>
        </member>
        <member name="M:K4AdotNet.Record.Recorder.AddImuTrack">
            <summary>Adds the track header for recording IMU.</summary>
            <remarks>The track needs to be added before the recording header is written.</remarks>
            <exception cref="T:System.InvalidOperationException"><see cref="M:K4AdotNet.Record.Recorder.AddImuTrack"/> must be called before <see cref="M:K4AdotNet.Record.Recorder.WriteHeader"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
        </member>
        <member name="M:K4AdotNet.Record.Recorder.AddAttachment(System.String,System.Byte[])">
            <summary>Adds an attachment to the recording.</summary>
            <param name="attachmentName">The name of the attachment to be stored in the recording file. This name should be a valid filename with an extension. Not <see langword="null"/>.</param>
            <param name="attachmentData">The attachment data to be added to recording. Not <see langword="null"/>.</param>
            <remarks>All attachments need to be added before the recording header is written.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="attachmentName"/> or <paramref name="attachmentData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="attachmentName"/> is not a valid file name.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:K4AdotNet.Record.Recorder.AddAttachment(System.String,System.Byte[])"/> must be called before <see cref="M:K4AdotNet.Record.Recorder.WriteHeader"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <seealso cref="M:K4AdotNet.Record.Playback.TryGetAttachment(System.String,System.Byte[]@)"/>
        </member>
        <member name="M:K4AdotNet.Record.Recorder.WriteHeader">
            <summary>Writes the recording header and metadata to file.</summary>
            <remarks>This must be called before captures can be written.</remarks>
            <exception cref="T:K4AdotNet.Record.RecordingException">Some error during recording to file. See logs for details.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
        </member>
        <member name="M:K4AdotNet.Record.Recorder.WriteCapture(K4AdotNet.Sensor.Capture)">
            <summary>
            Writes a camera capture to file.
            </summary>
            <remarks><para>
            This method will write all images in the capture to the corresponding tracks in the recording file.
            If any of the images fail to write, other images will still be written before throwing an exception.
            </para><para>
            Captures must be written in increasing order of timestamp, and the file's header must already be written.
            </para></remarks>
            <param name="capture">Capture to write to file. Not <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="capture"/> is <see langword="null"/>.</exception>
            <exception cref="T:K4AdotNet.Record.RecordingException">Some error during recording to file. See logs for details.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
        </member>
        <member name="M:K4AdotNet.Record.Recorder.WriteImuSample(K4AdotNet.Sensor.ImuSample)">
            <summary>Writes an IMU sample to file.</summary>
            <param name="imuSample">A structure containing the IMU sample data and time stamps.</param>
            <remarks>
            Samples must be written in increasing order of timestamp, and the file's header must already be written.
            When writing IMU samples at the same time as captures, the samples should be within 1 second of the most recently
            written capture.
            </remarks>
            <exception cref="T:K4AdotNet.Record.RecordingException">Some error during recording to file. See logs for details.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
        </member>
        <member name="M:K4AdotNet.Record.Recorder.Flush">
            <summary>Flushes all pending recording data to disk.</summary>
            <remarks><para>
            This method ensures that all data passed to the recording API prior to calling flush is written to disk.
            If continuing to write recording data, care must be taken to ensure no new time stamps are added from before the flush.
            <para></para>
            If an error occurs, best effort is made to flush as much data to disk as possible, but the integrity of the file is
            not guaranteed.
            </para></remarks>
            <exception cref="T:K4AdotNet.Record.RecordingException">Some error during recording to file. See logs for details.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
        </member>
        <member name="T:K4AdotNet.Record.RecorderCustomTrack">
            <summary>Custom track to be recorded using <see cref="T:K4AdotNet.Record.Recorder"/>.</summary>
            <remarks>
            Use <see cref="M:K4AdotNet.Record.RecorderCustomTrack.WriteData(K4AdotNet.Microseconds64,System.Byte[])"/> to write data for custom tracks.
            </remarks>
            <seealso cref="P:K4AdotNet.Record.Recorder.CustomTracks"/>
        </member>
        <member name="P:K4AdotNet.Record.RecorderCustomTrack.Name">
            <summary>The name of the custom track.</summary>
        </member>
        <member name="P:K4AdotNet.Record.RecorderCustomTrack.CodecId">
            <summary>Gets the codec id string for this track.</summary>
            <remarks>
            The codec ID is a string that corresponds to the codec of the track's data. Some of the existing formats are listed
            here: https://www.matroska.org/technical/specs/codecid/index.html. It can also be custom defined by the user.
            </remarks>
        </member>
        <member name="P:K4AdotNet.Record.RecorderCustomTrack.CodecContext">
            <summary>Gets the codec context for this track.</summary>
            <remarks>
            The codec context is a codec-specific buffer that contains any required codec metadata that is only known to the
            codec. It is mapped to the matroska <c>CodecPrivate</c> element. Not <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Record.RecorderCustomTrack.WriteData(K4AdotNet.Microseconds64,System.Byte[])">
            <summary>Writes data for the custom track to file.</summary>
            <param name="deviceTimestamp">
            The timestamp in microseconds for the custom track data. This timestamp should be in the same time domain as the
            device timestamp used for recording.
            </param>
            <param name="customData">The buffer of custom track data. Not <see langword="null"/>.</param>
            <remarks>
            Custom track data must be written in increasing order of timestamp, and the file's header must already be written.
            When writing custom track data at the same time as captures or IMU data, the custom data should be within 1 second of
            the most recently written timestamp.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="customData"/> is <see langword="null"/>.</exception>
            <exception cref="T:K4AdotNet.Record.RecordingException">Some error during recording to file. See logs for details.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed <see cref="T:K4AdotNet.Record.Recorder"/>.</exception>
        </member>
        <member name="T:K4AdotNet.Record.RecorderCustomTrackCollection">
            <summary>Collection of <see cref="T:K4AdotNet.Record.RecorderCustomTrack"/> to be written using <see cref="T:K4AdotNet.Record.Recorder"/>.</summary>
            <remarks>
            Use <see cref="M:K4AdotNet.Record.RecorderCustomTrackCollection.AddVideoTrack(System.String,System.String,System.Byte[],K4AdotNet.Record.RecordVideoSettings)"/> and <see cref="M:K4AdotNet.Record.RecorderCustomTrackCollection.AddCustomSubtitleTrack(System.String,System.String,System.Byte[],K4AdotNet.Record.RecordSubtitleSettings)"/>
            to add new custom tracks to recording.
            </remarks>
            <seealso cref="P:K4AdotNet.Record.Recorder.CustomTracks"/>
            <seealso cref="T:K4AdotNet.Record.RecorderCustomTrack"/>
        </member>
        <member name="P:K4AdotNet.Record.RecorderCustomTrackCollection.Item(System.Int32)">
            <summary>Gets custom track to be recorded by zero-based index.</summary>
            <param name="index">Zero-based index of custom track.</param>
            <returns>Custom track with a given index. Not <see langword="null"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is less than zero or is greater than or equal to <see cref="P:K4AdotNet.Record.RecorderCustomTrackCollection.Count"/>.</exception>
            <remarks>
            Use <see cref="M:K4AdotNet.Record.RecorderCustomTrackCollection.AddVideoTrack(System.String,System.String,System.Byte[],K4AdotNet.Record.RecordVideoSettings)"/> and <see cref="M:K4AdotNet.Record.RecorderCustomTrackCollection.AddCustomSubtitleTrack(System.String,System.String,System.Byte[],K4AdotNet.Record.RecordSubtitleSettings)"/>
            to add new custom tracks to recording.
            </remarks>
        </member>
        <member name="P:K4AdotNet.Record.RecorderCustomTrackCollection.Item(System.String)">
            <summary>Gets custom track to be recorded by its name.</summary>
            <param name="name">Name of custom track.</param>
            <returns>Custom track with a given name or <see langword="null"/> if there is no custom track with a given name.</returns>
            <remarks>
            Use <see cref="M:K4AdotNet.Record.RecorderCustomTrackCollection.AddVideoTrack(System.String,System.String,System.Byte[],K4AdotNet.Record.RecordVideoSettings)"/> and <see cref="M:K4AdotNet.Record.RecorderCustomTrackCollection.AddCustomSubtitleTrack(System.String,System.String,System.Byte[],K4AdotNet.Record.RecordSubtitleSettings)"/>
            to add new custom tracks to recording.
            </remarks>
        </member>
        <member name="P:K4AdotNet.Record.RecorderCustomTrackCollection.Count">
            <summary>Count of added custom tracks.</summary>
        </member>
        <member name="M:K4AdotNet.Record.RecorderCustomTrackCollection.GetEnumerator">
            <summary>Implementation of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <returns>All added custom tracks.</returns>
        </member>
        <member name="M:K4AdotNet.Record.RecorderCustomTrackCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Implementation of <see cref="T:System.Collections.IEnumerable"/>.</summary>
            <returns>All added custom tracks.</returns>
        </member>
        <member name="M:K4AdotNet.Record.RecorderCustomTrackCollection.AddVideoTrack(System.String,System.String,System.Byte[],K4AdotNet.Record.RecordVideoSettings)">
            <summary>Adds custom video track to the recording.</summary>
            <param name="trackName">
            The name of the custom video track to be added. Not <see langword="null"/>.
            Track names must be ALL CAPS and may only contain A-Z, 0-9, '-' and '_'.
            </param>
            <param name="codecId">
            The codec ID of the track. Some of the existing formats are listed here:
            https://www.matroska.org/technical/specs/codecid/index.html. The codec ID can also be custom defined by the user.
            Video codec ID's should start with 'V_'.
            </param>
            <param name="codecContext">
            The codec context is a codec-specific buffer that contains any required codec metadata that is only known to the
            codec. It is mapped to the matroska <c>CodecPrivate</c> element. Not <see langword="null"/>.
            </param>
            <param name="trackSettings">Additional metadata for the video track such as resolution and frame rate.</param>
            <returns>Added custom video track. Non <see langword="null"/>. Call <see cref="M:K4AdotNet.Record.RecorderCustomTrack.WriteData(K4AdotNet.Microseconds64,System.Byte[])"/> to write data to this track.</returns>
            <remarks><para>
            Built-in video tracks like the DEPTH, IR, and COLOR tracks will be created automatically when the object of <see cref="T:K4AdotNet.Record.Recorder"/>
            class is constructed. This API can be used to add additional video tracks to save custom data.
            </para><para>
            All tracks need to be added before the recording header is written.
            </para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackName"/> or <paramref name="codecId"/> or <paramref name="codecContext"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="trackName"/> is not a valid track name (must be ALL CAPS and may only contain A-Z, 0-9, '-' and '_')
            or <paramref name="codecId"/> is not a valid video codec ID.
            </exception>
            <exception cref="T:System.InvalidOperationException">This method must be called before <see cref="M:K4AdotNet.Record.Recorder.WriteHeader"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed <see cref="T:K4AdotNet.Record.Recorder"/>.</exception>
        </member>
        <member name="M:K4AdotNet.Record.RecorderCustomTrackCollection.AddCustomSubtitleTrack(System.String,System.String,System.Byte[],K4AdotNet.Record.RecordSubtitleSettings)">
            <summary>Adds custom subtitle track to the recording.</summary>
            <param name="trackName">
            The name of the custom subtitle track to be added. Not <see langword="null"/>.
            Track names must be ALL CAPS and may only contain A-Z, 0-9, '-' and '_'.
            </param>
            <param name="codecId">
            The codec ID of the track. Some of the existing formats are listed here:
            https://www.matroska.org/technical/specs/codecid/index.html. The codec ID can also be custom defined by the user.
            Subtitle codec ID's should start with 'S_'.
            </param>
            <param name="codecContext">
            The codec context is a codec-specific buffer that contains any required codec metadata that is only known to the
            codec. It is mapped to the matroska <c>CodecPrivate</c> element. Not <see langword="null"/>.
            </param>
            <param name="trackSettings">Additional metadata for the video track such as resolution and frame rate.</param>
            <returns>Added custom subtitle track. Non <see langword="null"/>. Call <see cref="M:K4AdotNet.Record.RecorderCustomTrack.WriteData(K4AdotNet.Microseconds64,System.Byte[])"/> to write data to this track.</returns>
            <remarks><para>
            Built-in subtitle tracks like the IMU track will be created automatically when the <see cref="M:K4AdotNet.Record.Recorder.AddImuTrack"/> API is
            called. This API can be used to add additional subtitle tracks to save custom data.
            </para><para>
            All tracks need to be added before the recording header is written.
            </para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="trackName"/> or <paramref name="codecId"/> or <paramref name="codecContext"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="trackName"/> is not a valid track name (must be ALL CAPS and may only contain A-Z, 0-9, '-' and '_')
            or <paramref name="codecId"/> is not a valid subtitle codec ID.
            </exception>
            <exception cref="T:System.InvalidOperationException">This method must be called before <see cref="M:K4AdotNet.Record.Recorder.WriteHeader"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed <see cref="T:K4AdotNet.Record.Recorder"/>.</exception>
        </member>
        <member name="T:K4AdotNet.Record.RecordingException">
            <summary>Class for all recording-related exceptions.</summary>
            <seealso cref="T:K4AdotNet.Record.Playback"/>
        </member>
        <member name="P:K4AdotNet.Record.RecordingException.FilePath">
            <summary>File system path to recording.</summary>
            <seealso cref="P:K4AdotNet.Record.Playback.FilePath"/>
        </member>
        <member name="M:K4AdotNet.Record.RecordingException.#ctor(System.String)">
            <summary>Creates exception with default message.</summary>
            <param name="filePath">File system path to recording.</param>
        </member>
        <member name="M:K4AdotNet.Record.RecordingException.#ctor(System.String,System.String)">
            <summary>Creates exception with specified message.</summary>
            <param name="message">Message for exception. Can be reached then via <see cref="P:System.Exception.Message"/> property.</param>
            <param name="filePath">File system path to recording.</param>
        </member>
        <member name="M:K4AdotNet.Record.RecordingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor for deserialization needs.</summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:K4AdotNet.Record.RecordingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization needs.</summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:K4AdotNet.Record.RecordSubtitleSettings">
            <summary>Structure containing additional metadata specific to custom subtitle tracks.</summary>
        </member>
        <member name="F:K4AdotNet.Record.RecordSubtitleSettings.HighFreqData">
            <summary>
            If <see langword="true"/>, data will be grouped together in batches to reduce overhead. 
            If <see langword="false"/>, data will be stored as individual blocks with full timestamp information (Default).
            </summary>
            <remarks>
            If <see langword="true"/>, only a single timestamp will
            be stored per batch, and an estimated timestamp will be used by <see cref="M:K4AdotNet.Record.Playback.SeekTimestamp(K4AdotNet.Microseconds64,K4AdotNet.Record.PlaybackSeekOrigin)"/> and
            <see cref="P:K4AdotNet.Record.PlaybackDataBlock.DeviceTimestamp"/>. The estimated timestamp is calculated with the assumption that
            blocks are evenly spaced within a batch. If precise timestamps are required, the timestamp should be added to
            each data block itself.
            </remarks>
        </member>
        <member name="T:K4AdotNet.Record.RecordVideoSettings">
            <summary>Structure containing additional metadata specific to custom video tracks.</summary>
        </member>
        <member name="F:K4AdotNet.Record.RecordVideoSettings.Width">
            <summary>Frame width of the video.</summary>
        </member>
        <member name="F:K4AdotNet.Record.RecordVideoSettings.Height">
            <summary>Frame height of the video.</summary>
        </member>
        <member name="F:K4AdotNet.Record.RecordVideoSettings.FrameRate">
            <summary>Frame rate (frames-per-second) of the video.</summary>
        </member>
        <member name="T:K4AdotNet.Sdk">
            <summary>Static class with common basic things for Sensor, Record and Body Tracking APIs like logging, initializing, loading of dependencies, etc.</summary>
        </member>
        <member name="F:K4AdotNet.Sdk.SENSOR_DLL_NAME">
            <summary>Name of main library (DLL) from Azure Kinect Sensor SDK.</summary>
            <remarks>This library is required for the most of API including Record and Body Tracking parts.</remarks>
        </member>
        <member name="F:K4AdotNet.Sdk.DEPTHENGINE_DLL_NAME">
            <summary>Name of depth engine library (DLL) from Azure Kinect Sensor SDK.</summary>
            <remarks>This library is required for <see cref="M:K4AdotNet.Sensor.Device.StartCameras(K4AdotNet.Sensor.DeviceConfiguration)"/> and <see cref="M:K4AdotNet.Sensor.Transformation.#ctor(K4AdotNet.Sensor.Calibration@)"/>.</remarks>
        </member>
        <member name="F:K4AdotNet.Sdk.RECORD_DLL_NAME">
            <summary>Name of record library (DLL) from Azure Kinect Sensor SDK.</summary>
            <remarks>This library is required for Record part of API (see <c>K4AdotNet.Record</c> namespace).</remarks>
        </member>
        <member name="F:K4AdotNet.Sdk.BODY_TRACKING_DLL_NAME">
            <summary>Name of body tracking library (DLL) from Azure Kinect Body Tracking SDK.</summary>
            <remarks>This library is required for Body Tracking part of API (see <c>K4AdotNet.BodyTracking</c> namespace).</remarks>
        </member>
        <member name="F:K4AdotNet.Sdk.BODY_TRACKING_EXPECTED_VERSION_MAJOR">
            <summary>Expected major version of Body Tracking runtime. This version of K4AdotNet assembly is built and tested against this version of Body Tracking.</summary>
            <seealso cref="F:K4AdotNet.Sdk.BODY_TRACKING_EXPECTED_VERSION_MINOR"/>
        </member>
        <member name="F:K4AdotNet.Sdk.BODY_TRACKING_EXPECTED_VERSION_MINOR">
            <summary>Expected minor version of Body Tracking runtime. This version of K4AdotNet assembly is built and tested against this version of Body Tracking.</summary>
            <seealso cref="F:K4AdotNet.Sdk.BODY_TRACKING_EXPECTED_VERSION_MAJOR"/>
        </member>
        <member name="F:K4AdotNet.Sdk.ONNX_RUNTIME_DLL_NAME">
            <summary>Name of ONNX runtime library (DLL) which is used by <see cref="F:K4AdotNet.Sdk.BODY_TRACKING_DLL_NAME"/>.</summary>
            <remarks>This library is required for Body Tracking part of API (see <c>K4AdotNet.BodyTracking</c> namespace).</remarks>
        </member>
        <member name="F:K4AdotNet.Sdk.BODY_TRACKING_DNN_MODEL_FILE_NAME">
            <summary>Name of ONNX file with model of neural network used by <see cref="F:K4AdotNet.Sdk.BODY_TRACKING_DLL_NAME"/>.</summary>
            <remarks>This data file is required for Body Tracking part of API (see <c>K4AdotNet.BodyTracking</c> namespace).</remarks>
        </member>
        <member name="F:K4AdotNet.Sdk.BODY_TRACKING_DNN_MODEL_LITE_FILE_NAME">
            <summary>Name of ONNX file with model of lite neural network used by <see cref="F:K4AdotNet.Sdk.BODY_TRACKING_DLL_NAME"/>.</summary>
            <remarks>This data file is required for Body Tracking part of API (see <c>K4AdotNet.BodyTracking</c> namespace).</remarks>
        </member>
        <member name="F:K4AdotNet.Sdk.CUDNN_DLL_NAMES">
            <summary>ONNX runtime depends on NVIDIA cuDNN library. This list contains all required components for cuDNN under Windows.</summary>
        </member>
        <member name="F:K4AdotNet.Sdk.DLL_EXTENSION_WIN">
            <summary>Extension of Dynamic Link Libraries (DLL) under Windows.</summary>
        </member>
        <member name="P:K4AdotNet.Sdk.TraceLevel">
            <summary>
            The K4A.Net can log data to a regular .Net Trace.
            Use this property to choose the level of such logging, or set it to <see cref="F:System.Diagnostics.TraceLevel.Off"/> to turn it off.
            Default value is <see cref="F:System.Diagnostics.TraceLevel.Off"/>.
            </summary>
        </member>
        <member name="M:K4AdotNet.Sdk.ConfigureLogging(System.Diagnostics.TraceLevel,System.Boolean,System.String)">
            <summary>The Sensor SDK can log data to the console, files, or to a custom handler.</summary>
            <param name="level">Level of logging.</param>
            <param name="logToStdout">Log messages to STDOUT?</param>
            <param name="logToFile">
            Log all messages to the path and file specified.
            Must end in '.log' to be considered a valid entry.
            Use <see langword="null"/> or empty string to completely disable logging to a file.
            </param>
            <remarks><para>
            Call this method before any usage of Sensor API (classes from <c>K4AdotNet.Sensor</c> namespace).
            </para><para>
            Don't use one and the same destination log file for different parts of API (Sensor, Record, Body Tracking).
            Each part uses separate logger instance that do not allowed shared access to the file being written to.
            </para></remarks>
        </member>
        <member name="M:K4AdotNet.Sdk.ConfigureRecordLogging(System.Diagnostics.TraceLevel,System.Boolean,System.String)">
            <summary>Record part of Sensor SDK can log data to the console, files, or to a custom handler.</summary>
            <param name="level">Level of logging.</param>
            <param name="logToStdout">Log messages to STDOUT?</param>
            <param name="logToFile">
            Log all messages to the path and file specified.
            Must end in '.log' to be considered a valid entry.
            Use <see langword="null"/> or empty string to completely disable logging to a file.
            </param>
            <remarks><para>
            Call this method before any usage of Record API (classes from <c>K4AdotNet.Record</c> namespace).
            </para><para>
            Don't use one and the same destination log file for different parts of API (Sensor, Record, Body Tracking).
            Each part uses separate logger instance that do not allowed shared access to the file being written to.
            </para></remarks>
        </member>
        <member name="M:K4AdotNet.Sdk.ConfigureBodyTrackingLogging(System.Diagnostics.TraceLevel,System.Boolean,System.String)">
            <summary>The Body Tracking SDK can log data to the console, files, or to a custom handler.</summary>
            <param name="level">Level of logging.</param>
            <param name="logToStdout">Log messages to STDOUT?</param>
            <param name="logToFile">
            Log all messages to the path and file specified.
            Must end in '.log' to be considered a valid entry.
            Use <see langword="null"/> or empty string to completely disable logging to a file.
            </param>
            <remarks><para>
            Call this method before any usage of Body Tracking API (classes from <c>K4AdotNet.BodyTracking</c> namespace).
            </para><para>
            Don't use one and the same destination log file for different parts of API (Sensor, Record, Body Tracking).
            Each part uses separate logger instance that do not allowed shared access to the file being written to.
            </para></remarks>
        </member>
        <member name="F:K4AdotNet.Sdk.BodyTrackingSdkInstallationGuideUrl">
            <summary>URL to step-by-step instruction "How to set up Body Tracking SDK". Helpful for UI and user messages.</summary>
        </member>
        <member name="M:K4AdotNet.Sdk.IsBodyTrackingRuntimeAvailable(System.String@)">
            <summary>Checks that Body Tracking runtime is available.</summary>
            <param name="message">
            Detailed information about troubles with Body Tracking runtime if method returns <see langword="false"/>,
            or <see langword="null"/> if method returns <see langword="true"/>.
            </param>
            <returns>
            <see langword="true"/> if Body Tracking runtime is available and can be used, in this case <paramref name="message"/> is <see langword="null"/>,
            <see langword="false"/> if Body Tracking runtime is not available for some reason, in this case <paramref name="message"/> contains user-friendly description of this reason.
            </returns>
            <remarks><para>
            This method tries to find Body Tracking runtime in one of the following locations:
            directory with executable file,
            directory with <c>K4AdotNet</c> assembly,
            installation directory of Body Tracking SDK under <c>Program Files</c>.
            </para></remarks>
            <seealso cref="M:K4AdotNet.Sdk.TryInitializeBodyTrackingRuntime(K4AdotNet.BodyTracking.TrackerProcessingMode,System.String@)"/>
        </member>
        <member name="M:K4AdotNet.Sdk.TryInitializeBodyTrackingRuntime(K4AdotNet.BodyTracking.TrackerProcessingMode,System.String@)">
            <summary>Call this method to initialization of Body Tracking runtime.</summary>
            <param name="mode">
            Processing mode for which Body Tracking runtime should be initialized.
            </param>
            <param name="message">
            If Body Tracking runtime was initialized successfully, this parameter is <see langword="null"/>,
            otherwise it contains user-friendly description of failure reason.
            </param>
            <returns>
            <see langword="true"/> - if Body Tracking runtime was initialized successfully (in this case <paramref name="message"/> is <see langword="null"/>),
            <see langword="false"/> - otherwise and in this case <paramref name="message"/> contains user-friendly description of failure.
            </returns>
            <remarks><para>
            It is rather time consuming operation: initialization of ONNX runtime, loading and parsing of neural network model, etc.
            For this reason, it is recommended to initialize Body Tracking runtime in advance and show some progress window for user.
            But this initialization is optional. If it wasn't called explicitly, it will be called implicitly during first construction of
            <see cref="T:K4AdotNet.BodyTracking.Tracker"/> object.
            </para><para>
            This method tries to find Body Tracking runtime in one of the following locations:
            directory with executable file,
            directory with <c>K4AdotNet</c> assembly,
            installation directory of Body Tracking SDK under <c>Program Files</c>.
            </para></remarks>
            <seealso cref="M:K4AdotNet.Sdk.IsBodyTrackingRuntimeAvailable(System.String@)"/>
            <seealso cref="M:K4AdotNet.BodyTracking.Tracker.#ctor(K4AdotNet.Sensor.Calibration@,K4AdotNet.BodyTracking.TrackerConfiguration)"/>
        </member>
        <member name="T:K4AdotNet.Sensor.Calibration">
            <summary>Information about device calibration in particular depth mode and color resolution.</summary>
            <seealso cref="T:K4AdotNet.Sensor.Transformation"/>
        </member>
        <member name="F:K4AdotNet.Sensor.Calibration.DepthCameraCalibration">
            <summary>Depth camera calibration.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.Calibration.ColorCameraCalibration">
            <summary>Color camera calibration.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.Calibration.Extrinsics">
            <summary>Extrinsic transformation parameters.</summary>
            <remarks>
            The extrinsic parameters allow 3D coordinate conversions between depth camera, color camera, the IMU's gyroscope
            and accelerometer. To transform from a source to a target 3D coordinate system, use the parameters stored
            under <c>Extrinsics[source * (int)CalibrationSensor.Count + target]</c>.
            </remarks>
            <seealso cref="M:K4AdotNet.Sensor.Calibration.GetExtrinsics(K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry)"/>
            <seealso cref="M:K4AdotNet.Sensor.Calibration.SetExtrinsics(K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationExtrinsics)"/>
        </member>
        <member name="F:K4AdotNet.Sensor.Calibration.DepthMode">
            <summary>Depth camera mode for which calibration was obtained.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.Calibration.ColorResolution">
            <summary>Color camera resolution for which calibration was obtained.</summary>
        </member>
        <member name="P:K4AdotNet.Sensor.Calibration.IsValid">
            <summary>Does this calibration data look as valid?</summary>
            <remarks>
            WARNING! This property performs only some basic and simple checks.
            If it returns <see langword="true"/>, calibration data can still be meaningless/incorrect.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.Calibration.GetExtrinsics(K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry)">
            <summary>Helper method to get mutual extrinsics parameters for a given couple of sensors in Azure Kinect device.</summary>
            <param name="sourceSensor">Source coordinate system for transformation.</param>
            <param name="targetSensor">Destination coordinate system for transformation.</param>
            <returns>Extracted parameters of transformation from <paramref name="sourceSensor"/> to <paramref name="targetSensor"/>.</returns>
            <seealso cref="M:K4AdotNet.Sensor.Calibration.SetExtrinsics(K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationExtrinsics)"/>
            <seealso cref="F:K4AdotNet.Sensor.Calibration.Extrinsics"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Calibration.SetExtrinsics(K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationExtrinsics)">
            <summary>Helper method to set mutual extrinsics parameters for a given couple of sensors in Azure Kinect device.</summary>
            <param name="sourceSensor">Source coordinate system for transformation.</param>
            <param name="targetSensor">Destination coordinate system for transformation.</param>
            <param name="extrinsics">Parameters of source-to-destination transformation to be set.</param>
            <seealso cref="M:K4AdotNet.Sensor.Calibration.GetExtrinsics(K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry)"/>
            <seealso cref="F:K4AdotNet.Sensor.Calibration.Extrinsics"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Calibration.CreateDummy(K4AdotNet.Sensor.DepthMode,K4AdotNet.Sensor.ColorResolution,K4AdotNet.Sensor.Calibration@)">
            <summary>
            Creates dummy (no distortions, ideal pin-hole geometry, all sensors are aligned) but valid calibration data.
            This can be useful for testing and subbing needs.
            </summary>
            <param name="depthMode">Depth mode for which dummy calibration should be created. Can be <see cref="F:K4AdotNet.Sensor.DepthMode.Off"/>.</param>
            <param name="colorResolution">Color resolution for which dummy calibration should be created. Can be <see cref="F:K4AdotNet.Sensor.ColorResolution.Off"/>.</param>
            <param name="calibration">Result: created dummy calibration data for <paramref name="depthMode"/> and <paramref name="colorResolution"/> specified.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="depthMode"/> and <paramref name="colorResolution"/> cannot be equal to <c>Off</c> simultaneously.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Calibration.CreateDummy(K4AdotNet.Sensor.DepthMode,K4AdotNet.Sensor.ColorResolution,System.Single,K4AdotNet.Sensor.Calibration@)">
            <summary>
            Creates dummy (no distortions, ideal pin-hole geometry, all sensors are aligned, there is specified distance between depth and color cameras) but valid calibration data.
            This can be useful for testing and subbing needs.
            </summary>
            <param name="depthMode">Depth mode for which dummy calibration should be created. Can be <see cref="F:K4AdotNet.Sensor.DepthMode.Off"/>.</param>
            <param name="distanceBetweenDepthAndColorMm">Distance (horizontal) between depth and color cameras.</param>
            <param name="colorResolution">Color resolution for which dummy calibration should be created. Can be <see cref="F:K4AdotNet.Sensor.ColorResolution.Off"/>.</param>
            <param name="calibration">Result: created dummy calibration data for <paramref name="depthMode"/> and <paramref name="colorResolution"/> specified.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="depthMode"/> and <paramref name="colorResolution"/> cannot be equal to <c>Off</c> simultaneously.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Calibration.CreateFromRaw(System.Byte[],K4AdotNet.Sensor.DepthMode,K4AdotNet.Sensor.ColorResolution,K4AdotNet.Sensor.Calibration@)">
            <summary>Gets the camera calibration for a device from a raw calibration blob.</summary>
            <param name="rawCalibration">Raw calibration blob obtained from a device or recording. The raw calibration must be <c>0</c>-terminated. Cannot be <see langword="null"/>.</param>
            <param name="depthMode">Mode in which depth camera is operated.</param>
            <param name="colorResolution">Resolution in which color camera is operated.</param>
            <param name="calibration">Result: calibration data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rawCalibration"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="rawCalibration"/> must be 0-terminated.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="depthMode"/> and <paramref name="colorResolution"/> cannot be equal to <c>Off</c> simultaneously.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Calibration.Convert2DTo2D(K4AdotNet.Float2,System.Single,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry)">
            <summary>Transform a 2D pixel coordinate with an associated depth value of the source camera into a 2D pixel coordinate of the target camera.</summary>
            <param name="sourcePoint2D">The 2D pixel in <paramref name="sourceCamera"/> coordinates.</param>
            <param name="sourceDepthMm">The depth of <paramref name="sourcePoint2D"/> in millimeters.</param>
            <param name="sourceCamera">The current camera.</param>
            <param name="targetCamera">The target camera.</param>
            <returns>
            The 2D pixel in <paramref name="targetCamera"/> coordinates
            or <see langword="null"/> if <paramref name="sourcePoint2D"/> does not map to a valid 2D coordinate in the <paramref name="targetCamera"/> coordinate system.
            </returns>
            <remarks><para>
            This function maps a pixel between the coordinate systems of the depth and color cameras. It is equivalent to calling
            <see cref="M:K4AdotNet.Sensor.Calibration.Convert2DTo3D(K4AdotNet.Float2,System.Single,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry)"/> to compute the 3D point corresponding to <paramref name="sourcePoint2D"/> and then using
            <see cref="M:K4AdotNet.Sensor.Calibration.Convert3DTo2D(K4AdotNet.Float3,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry)"/> to map the 3D point into the coordinate system of the <paramref name="targetCamera"/>.
            </para><para>
            If <paramref name="sourceCamera"/> and <paramref name="targetCamera"/> are identical, the function immediately returns value of
            <paramref name="sourcePoint2D"/> parameter and doesn't compute any transformations.
            </para></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="sourceCamera"/> is not a camera or <paramref name="targetCamera"/> is not a camera.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Cannot perform transformation. Most likely, calibration data is invalid.
            </exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Calibration.ConvertColor2DToDepth2D(K4AdotNet.Float2,K4AdotNet.Sensor.Image)">
            <summary>Transform a 2D pixel coordinate from color camera into a 2D pixel coordinate of the depth camera.</summary>
            <param name="sourcePoint2D">The 2D pixel in color camera coordinates.</param>
            <param name="depthImage">Input depth image. Not <see langword="null"/>.</param>
            <returns>
            The 2D pixel in depth camera coordinates or
            <see langword="null"/> if <paramref name="sourcePoint2D"/> does not map to a valid 2D coordinate in the depth coordinate system.
            </returns>
            <remarks>
            This function represents an alternative to <see cref="M:K4AdotNet.Sensor.Calibration.Convert2DTo2D(K4AdotNet.Float2,System.Single,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry)"/> if the number of pixels that need to be transformed is small.
            This function searches along an epipolar line in the depth image to find the corresponding
            depth pixel. If a larger number of pixels need to be transformed, it might be computationally cheaper to call
            <see cref="M:K4AdotNet.Sensor.Transformation.DepthImageToColorCamera(K4AdotNet.Sensor.Image,K4AdotNet.Sensor.Image)"/>
            to get correspondence depth values for these color pixels, then call the function <see cref="M:K4AdotNet.Sensor.Calibration.Convert2DTo2D(K4AdotNet.Float2,System.Single,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="depthImage"/> cannot be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="depthImage"/> has invalid format and/or resolution.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Cannot perform transformation. Most likely, calibration data is invalid.
            </exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Calibration.Convert2DTo3D(K4AdotNet.Float2,System.Single,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry)">
            <summary>
            Transform a 2D pixel coordinate with an associated depth value of the source camera
            into a 3D point of the target coordinate system.
            </summary>
            <param name="sourcePoint2D">The 2D pixel in <paramref name="sourceCamera"/> coordinates.</param>
            <param name="sourceDepthMm">The depth of <paramref name="sourcePoint2D"/> in millimeters.</param>
            <param name="sourceCamera">The current camera.</param>
            <param name="targetCameraOrSensor">The target camera or IMU sensor.</param>
            <returns>
            3D coordinates of the input pixel in the coordinate system of <paramref name="targetCameraOrSensor"/> in millimeters
            or <see langword="null"/> if the results are outside of the range of valid calibration.
            </returns>
            <remarks>
            This function applies the intrinsic calibration of <paramref name="sourceCamera"/> to compute the 3D ray from the focal point of the
            camera through pixel <paramref name="sourcePoint2D"/>.The 3D point on this ray is then found using <paramref name="sourceDepthMm"/>. If
            <paramref name="targetCameraOrSensor"/> is different from <paramref name="sourceCamera"/>, the 3D point is transformed to <paramref name="targetCameraOrSensor"/> using
            <see cref="M:K4AdotNet.Sensor.Calibration.Convert3DTo3D(K4AdotNet.Float3,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry)"/>.
            In practice, <paramref name="sourceCamera"/> and <paramref name="targetCameraOrSensor"/> will often be identical. In this
            case, no 3D to 3D transformation is applied.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="sourceCamera"/> is not a camera.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Cannot perform transformation. Most likely, calibration data is invalid.
            </exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Calibration.Convert3DTo2D(K4AdotNet.Float3,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry)">
            <summary>Transform a 3D point of a source coordinate system into a 2D pixel coordinate of the target camera.</summary>
            <param name="sourcePoint3DMm">The 3D coordinates in millimeters representing a point in <paramref name="sourceCameraOrSensor"/>.</param>
            <param name="sourceCameraOrSensor">The current camera or IMU sensor.</param>
            <param name="targetCamera">The target camera.</param>
            <returns>
            The 2D pixel in <paramref name="targetCamera"/> coordinates
            or <see langword="null"/> if the results are outside of the range of valid calibration.
            </returns>
            <remarks>
            If <paramref name="targetCamera"/> is different from <paramref name="sourceCameraOrSensor"/>, <paramref name="sourcePoint3DMm"/> is transformed
            to <paramref name="targetCamera"/> using <see cref="M:K4AdotNet.Sensor.Calibration.Convert3DTo3D(K4AdotNet.Float3,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry)"/>.
            In practice, <paramref name="sourceCameraOrSensor"/> and <paramref name="targetCamera"/> will often be identical.
            In this case, no 3D to 3D transformation is applied. The 3D point in the coordinate system of <paramref name="targetCamera"/> is then
            projected onto the image plane using the intrinsic calibration of <paramref name="targetCamera"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="targetCamera"/> is not a camera.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Cannot perform transformation. Most likely, calibration data is invalid.
            </exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Calibration.Convert3DTo3D(K4AdotNet.Float3,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry)">
            <summary>Transform a 3D point of a source coordinate system into a 3D point of the target coordinate system.</summary>
            <param name="sourcePoint3DMm">The 3D coordinates in millimeters representing a point in <paramref name="sourceCameraOrSensor"/>.</param>
            <param name="sourceCameraOrSensor">The current coordinate system of camera or IMU sensor.</param>
            <param name="targetCameraOrSensor">The target coordinate system of camera or IMU sensor.</param>
            <returns>The new 3D coordinates of the input point in the coordinate space <paramref name="targetCameraOrSensor"/> in millimeters.</returns>
            <remarks>
            This function is used to transform 3D points between depth and color camera coordinate systems. The function uses the
            extrinsic camera calibration. It computes the output via multiplication with a precomputed matrix encoding a 3D
            rotation and a 3D translation. If <paramref name="sourceCameraOrSensor"/> and <paramref name="targetCameraOrSensor"/> are the same, then result will
            be identical to <paramref name="sourcePoint3DMm"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot perform transformation. Most likely, calibration data is invalid.
            </exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Calibration.CreateTransformation">
            <summary>Helper method to create <see cref="T:K4AdotNet.Sensor.Transformation"/> object from this calibration data. For details see <see cref="M:K4AdotNet.Sensor.Transformation.#ctor(K4AdotNet.Sensor.Calibration@)"/>.</summary>
            <returns>Created transformation object. Not <see langword="null"/>.</returns>
            <seealso cref="M:K4AdotNet.Sensor.Transformation.#ctor(K4AdotNet.Sensor.Calibration@)"/>.
        </member>
        <member name="T:K4AdotNet.Sensor.CalibrationExtrinsics">
            <summary>Extrinsic calibration defines the physical relationship between two separate sensors inside Kinect for Azure device.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationExtrinsics.Rotation">
            <summary>3x3 rotation matrix.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationExtrinsics.Translation">
            <summary>Translation vector (in millimeters).</summary>
        </member>
        <member name="T:K4AdotNet.Sensor.CalibrationGeometries">
            <summary>Extensions to <see cref="T:K4AdotNet.Sensor.CalibrationGeometry"/> enumeration. Adds some metadata to <see cref="T:K4AdotNet.Sensor.CalibrationGeometry"/> enumeration.</summary>
            <seealso cref="T:K4AdotNet.Sensor.CalibrationGeometry"/>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationGeometries.All">
            <summary>
            All usable <see cref="T:K4AdotNet.Sensor.CalibrationGeometry"/>s
            (<see cref="F:K4AdotNet.Sensor.CalibrationGeometry.Unknown"/> and <see cref="F:K4AdotNet.Sensor.CalibrationGeometry.Count"/> are not in this list).
            May be helpful for UI, tests, etc.
            </summary>
        </member>
        <member name="M:K4AdotNet.Sensor.CalibrationGeometries.IsCamera(K4AdotNet.Sensor.CalibrationGeometry)">
            <summary>Is it camera?</summary>
            <param name="geometry">Element to be tested.</param>
            <returns>
            <see langword="true"/> if <paramref name="geometry"/> is an color or depth camera,
            <see langword="false"/> - otherwise.
            </returns>
        </member>
        <member name="M:K4AdotNet.Sensor.CalibrationGeometries.IsImuPart(K4AdotNet.Sensor.CalibrationGeometry)">
            <summary>Is it part of IMU sensor (gyro or accelerometer)?</summary>
            <param name="geometry">Element to be tested.</param>
            <returns>
            <see langword="true"/> if <paramref name="geometry"/> is an part of IMU sensor (gyro or accel),
            <see langword="false"/> - otherwise.
            </returns>
        </member>
        <member name="T:K4AdotNet.Sensor.CalibrationGeometry">
            <summary>Kinect for Azure device consists of different sensors each of them has their own coordinate system and calibration extrinsics.</summary>
            <seealso cref="T:K4AdotNet.Sensor.CalibrationGeometries"/>
            <seealso cref="T:K4AdotNet.Sensor.CalibrationExtrinsics"/>
            <seealso cref="F:K4AdotNet.Sensor.Calibration.Extrinsics"/>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationGeometry.Unknown">
            <summary>Calibration type is unknown.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationGeometry.Depth">
            <summary>Depth sensor.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationGeometry.Color">
            <summary>Color sensor.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationGeometry.Gyro">
            <summary>Gyroscope sensor.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationGeometry.Accel">
            <summary>Accelerometer sensor.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationGeometry.Count">
            <summary>Number of types excluding unknown type.</summary>
        </member>
        <member name="T:K4AdotNet.Sensor.CalibrationIntrinsicParameters">
            <summary>Intrinsic calibration represents the internal optical properties of the camera.</summary>
            <remarks>Azure Kinect devices are calibrated with Brown Conrady which is compatible with OpenCV.</remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.Cx">
            <summary>Principal point in image, x. Corresponding index in array: 0.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.Cy">
            <summary>Principal point in image, y. Corresponding index in array: 1.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.Fx">
            <summary>Focal length x. Corresponding index in array: 2.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.Fy">
            <summary>Focal length y. Corresponding index in array: 3.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.K1">
            <summary>k1 radial distortion coefficient. Corresponding index in array: 4.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.K2">
            <summary>kw radial distortion coefficient. Corresponding index in array: 5.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.K3">
            <summary>k3 radial distortion coefficient. Corresponding index in array: 6.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.K4">
            <summary>k4 radial distortion coefficient. Corresponding index in array: 7.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.K5">
            <summary>k5 radial distortion coefficient. Corresponding index in array: 8.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.K6">
            <summary>k6 radial distortion coefficient. Corresponding index in array: 9.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.Codx">
            <summary>Center of distortion in Z=1 plane, x (only used for Rational6KT). Corresponding index in array: 10.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.Cody">
            <summary>Center of distortion in Z=1 plane, y (only used for Rational6KT). Corresponding index in array: 11.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.P2">
            <summary>Tangential distortion coefficient 2. Corresponding index in array: 12.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.P1">
            <summary>Tangential distortion coefficient 1. Corresponding index in array: 13.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.NotUsed">
            <summary>Not used in current version. Corresponding index in array: 14.</summary>
        </member>
        <member name="M:K4AdotNet.Sensor.CalibrationIntrinsicParameters.#ctor(System.Single[])">
            <summary>Creates intrinsics parameters from an array representation.</summary>
            <param name="values">Array of length <see cref="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.ParameterCount"/>. Not <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Wrong length of <paramref name="values"/> array.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.CalibrationIntrinsicParameters.ToArray">
            <summary>Array representation of intrinsic model parameters.</summary>
            <returns>Array representation. Not <see langword="null"/>.</returns>
        </member>
        <member name="P:K4AdotNet.Sensor.CalibrationIntrinsicParameters.Item(System.Int32)">
            <summary>Accessing to intrinsics parameter by index.</summary>
            <param name="index">Index of parameter. From <c>0</c> to <see cref="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.ParameterCount"/> excluding.</param>
            <returns>Value of appropriate parameter.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Index is less than <c>0</c> or is greater or equal to <see cref="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.ParameterCount"/>.</exception>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsicParameters.ParameterCount">
            <summary>Count of all parameters. Only part of parameters can be used in different models.</summary>
        </member>
        <member name="T:K4AdotNet.Sensor.CalibrationIntrinsics">
            <summary>Camera sensor intrinsic calibration data.</summary>
            <remarks><para>
            Intrinsic calibration represents the internal optical properties of the camera.
            </para><para>
            Azure Kinect devices are calibrated with Brown Conrady which is compatible with OpenCV.
            </para></remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsics.Model">
            <summary>Type of calibration model used.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsics.ParameterCount">
            <summary>Number of valid entries in <see cref="F:K4AdotNet.Sensor.CalibrationIntrinsics.Parameters"/>.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationIntrinsics.Parameters">
            <summary>Calibration parameters.</summary>
        </member>
        <member name="T:K4AdotNet.Sensor.CalibrationModel">
            <summary>The model used to interpret the calibration parameters.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationModel.Unknown">
            <summary>Calibration model is unknown.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationModel.Theta">
            <summary>Deprecated (not supported). Calibration model is Theta (arctan).</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationModel.Polynomial3K">
            <summary>Deprecated (not supported). Calibration model Polynomial 3K.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationModel.Rational6KT">
            <summary>Deprecated (only supported early internal devices). Calibration model Rational 6KT.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CalibrationModel.BrownConrady">
            <summary>Calibration model Brown Conrady (compatible with OpenCV).</summary>
        </member>
        <member name="T:K4AdotNet.Sensor.CameraCalibration">
            <summary>Camera calibration contains intrinsic and extrinsic calibration information for depth/color camera.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CameraCalibration.Extrinsics">
            <summary>Extrinsic calibration data.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CameraCalibration.Intrinsics">
            <summary>Intrinsic calibration data.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CameraCalibration.ResolutionWidth">
            <summary>Resolution width of the camera.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CameraCalibration.ResolutionHeight">
            <summary>Resolution height of the camera.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.CameraCalibration.MetricRadius">
            <summary>Max FOV of the camera.</summary>
        </member>
        <member name="T:K4AdotNet.Sensor.Capture">
            <summary>A capture represents a set of images that were captured by a Azure Kinect device at approximately the same time.</summary>
            <remarks><para>
            A capture may have a color, IR, and depth image.A capture may have up to one image of each type.
            A capture may have no image for a given type as well.
            </para><para>
            Captures also store a temperature value which represents the temperature of the device at the time of the capture.
            </para><para>
            While all the images associated with the capture were collected at approximately the same time, each image has an
            individual timestamp which may differ from each other. If the device was configured to capture depth and color images
            separated by a delay, <see cref="M:K4AdotNet.Sensor.Device.GetCapture"/> and <see cref="M:K4AdotNet.Sensor.Device.TryGetCapture(K4AdotNet.Sensor.Capture@,K4AdotNet.Timeout)"/> will return
            a capture containing both image types separated by the configured delay.
            </para></remarks>
            <seealso cref="M:K4AdotNet.Sensor.Device.GetCapture"/>
            <seealso cref="M:K4AdotNet.Sensor.Device.TryGetCapture(K4AdotNet.Sensor.Capture@,K4AdotNet.Timeout)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Capture.#ctor">
            <summary>Creates an empty capture object.</summary>
            <exception cref="T:System.InvalidOperationException">
            Sensor SDK fails to create empty capture object for some reason. For details see logs.
            </exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Capture.Dispose">
            <summary>
            Call this method to free unmanaged resources associated with current instance.
            </summary>
            <remarks><para>
            Under the hood, reference counter is decremented on this call. When the references reach zero the unmanaged resources are destroyed.
            (Multiple objects of <see cref="T:K4AdotNet.Sensor.Capture"/> can reference one and the same capture. For details see <see cref="M:K4AdotNet.Sensor.Capture.DuplicateReference"/>.)
            </para><para>
            Can be called multiple times but event <see cref="E:K4AdotNet.Sensor.Capture.Disposed"/> will be raised only once.
            </para></remarks>
            <seealso cref="E:K4AdotNet.Sensor.Capture.Disposed"/>
            <seealso cref="P:K4AdotNet.Sensor.Capture.IsDisposed"/>
            <seealso cref="M:K4AdotNet.Sensor.Capture.DuplicateReference"/>
        </member>
        <member name="P:K4AdotNet.Sensor.Capture.IsDisposed">
            <summary>Gets a value indicating whether the object has been disposed of.</summary>
            <seealso cref="M:K4AdotNet.Sensor.Capture.Dispose"/>
        </member>
        <member name="E:K4AdotNet.Sensor.Capture.Disposed">
            <summary>Raised on object disposing (only once).</summary>
            <seealso cref="M:K4AdotNet.Sensor.Capture.Dispose"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Capture.DuplicateReference">
            <summary>Creates new reference to the same unmanaged capture object.</summary>
            <returns>New object that references exactly to the same underlying unmanaged object as original one. Not <see langword="null"/>.</returns>
            <remarks>It helps to manage underlying object lifetime and to access capture from different threads and different components of application.</remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
            <seealso cref="M:K4AdotNet.Sensor.Capture.Dispose"/>
        </member>
        <member name="P:K4AdotNet.Sensor.Capture.ColorImage">
            <summary>Get and set the color image associated with the given capture. Can be <see langword="null"/> if the capture doesn't have color data.</summary>
            <remarks><para>
            It is highly recommended to call <see cref="M:K4AdotNet.Sensor.Image.Dispose"/> for returned image explicitly:
            <code>
            using (var colorImage = capture.ColorImage)
            {
                if (colorImage != null)
                {
                    // working with color image
                }
            }
            </code>
            But <see cref="T:K4AdotNet.Sensor.Capture"/> object automatically tracks all <see cref="T:K4AdotNet.Sensor.Image"/> objects it returned. And will call <see cref="M:K4AdotNet.Sensor.Image.Dispose"/>
            for all of them if client code didn't it.
            </para><para>
            For this reason, if you want to keep returned <see cref="T:K4AdotNet.Sensor.Image"/> for longer life time than life time of <see cref="T:K4AdotNet.Sensor.Capture"/> object,
            use <see cref="M:K4AdotNet.Sensor.Image.DuplicateReference"/> method.
            </para><para>
            The capture will add a reference on any <see cref="T:K4AdotNet.Sensor.Image"/> that is added to it with this setter.
            If an existing image is being replaced, the previous image will have the reference released.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="P:K4AdotNet.Sensor.Capture.DepthImage">
            <summary>Get and set the depth map associated with the given capture. Can be <see langword="null"/> if the capture doesn't have depth data.</summary>
            <remarks><para>
            It is highly recommended to call <see cref="M:K4AdotNet.Sensor.Image.Dispose"/> for returned image explicitly:
            <code>
            using (var depthImage = capture.DepthImage)
            {
                if (depthImage != null)
                {
                    // working with depth image
                }
            }
            </code>
            But <see cref="T:K4AdotNet.Sensor.Capture"/> object automatically tracks all <see cref="T:K4AdotNet.Sensor.Image"/> objects it returned. And will call <see cref="M:K4AdotNet.Sensor.Image.Dispose"/>
            for all of them if client code didn't it.
            </para><para>
            For this reason, if you want to keep returned <see cref="T:K4AdotNet.Sensor.Image"/> for longer life time than life time of <see cref="T:K4AdotNet.Sensor.Capture"/> object,
            use <see cref="M:K4AdotNet.Sensor.Image.DuplicateReference"/> method.
            </para><para>
            The capture will add a reference on any <see cref="T:K4AdotNet.Sensor.Image"/> that is added to it with this setter.
            If an existing image is being replaced, the previous image will have the reference released.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="P:K4AdotNet.Sensor.Capture.IRImage">
            <summary>Get and set the IR (infrared) image associated with the given capture. Can be <see langword="null"/> if the capture doesn't have IR data.</summary>
            <remarks><para>
            It is highly recommended to call <see cref="M:K4AdotNet.Sensor.Image.Dispose"/> for returned image explicitly:
            <code>
            using (var irImage = capture.IRImage)
            {
                if (irImage != null)
                {
                    // working with IR image
                }
            }
            </code>
            But <see cref="T:K4AdotNet.Sensor.Capture"/> object automatically tracks all <see cref="T:K4AdotNet.Sensor.Image"/> objects it returned. And will call <see cref="M:K4AdotNet.Sensor.Image.Dispose"/>
            for all of them if client code didn't it.
            </para><para>
            For this reason, if you want to keep returned <see cref="T:K4AdotNet.Sensor.Image"/> for longer life time than life time of <see cref="T:K4AdotNet.Sensor.Capture"/> object,
            use <see cref="M:K4AdotNet.Sensor.Image.DuplicateReference"/> method.
            </para><para>
            The capture will add a reference on any <see cref="T:K4AdotNet.Sensor.Image"/> that is added to it with this setter.
            If an existing image is being replaced, the previous image will have the reference released.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="P:K4AdotNet.Sensor.Capture.TemperatureC">
            <summary>Get and set the temperature associated with the capture, in Celsius.</summary>
            <remarks>
            This function returns the temperature of the device at the time of the capture in Celsius. If
            the temperature is unavailable, the function will return <see cref="F:System.Single.NaN"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Capture.ToHandle(K4AdotNet.Sensor.Capture)">
            <summary>Extracts handle from <paramref name="capture"/>.</summary>
            <param name="capture">Managed object. Can be <see langword="null"/>.</param>
            <returns>Appropriate unmanaged handle. Can be <see cref="F:K4AdotNet.NativeHandles.CaptureHandle.Zero"/>.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.Capture.Equals(K4AdotNet.Sensor.Capture)">
            <summary>Two captures are equal when they reference to one and the same unmanaged object.</summary>
            <param name="capture">Another captures to be compared with this one. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if both captures reference to one and the same unmanaged object.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.Capture.Equals(System.Object)">
            <summary>Two captures are equal when they reference to one and the same unmanaged object.</summary>
            <param name="obj">Some object to be compared with this one. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is also <see cref="T:K4AdotNet.Sensor.Capture"/> and they both reference to one and the same unmanaged object.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.Capture.GetHashCode">
            <summary>Uses underlying handle as hash code.</summary>
            <returns>Hash code. Consistent with overridden equality.</returns>
            <seealso cref="M:K4AdotNet.Sensor.Capture.Equals(K4AdotNet.Sensor.Capture)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Capture.op_Equality(K4AdotNet.Sensor.Capture,K4AdotNet.Sensor.Capture)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Sensor.Capture.Equals(K4AdotNet.Sensor.Capture)"/>.</summary>
            <param name="left">Left part of operator. Can be <see langword="null"/>.</param>
            <param name="right">Right part of operator. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> equals to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Sensor.Capture.Equals(K4AdotNet.Sensor.Capture)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Capture.op_Inequality(K4AdotNet.Sensor.Capture,K4AdotNet.Sensor.Capture)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Sensor.Capture.Equals(K4AdotNet.Sensor.Capture)"/>.</summary>
            <param name="left">Left part of operator. Can be <see langword="null"/>.</param>
            <param name="right">Right part of operator. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Sensor.Capture.Equals(K4AdotNet.Sensor.Capture)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Capture.ToString">
            <summary>Convenient (for debugging needs, first of all) string representation of object as an address of unmanaged object in memory.</summary>
            <returns><c>{HandleTypeName}#{Address}</c></returns>
        </member>
        <member name="T:K4AdotNet.Sensor.ColorControlCommand">
            <summary>Color sensor control commands.</summary>
            <remarks>
            Control values set on a device are reset only when the device is power cycled. The device will retain the settings
            even if the device is closed or the application is restarted.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorControlCommand.ExposureTimeAbsolute">
            <summary>Exposure time setting.</summary>
            <remarks><para>
            May be set to <see cref="F:K4AdotNet.Sensor.ColorControlMode.Auto"/> or <see cref="F:K4AdotNet.Sensor.ColorControlMode.Manual"/>.
            </para><para>
            The Azure Kinect supports a limited number of fixed exposure settings. When setting this, expect the exposure to
            be rounded up to the nearest setting. Exceptions are 1) The last value in the table is the upper limit, so a
            value larger than this will be overridden to the largest entry in the table. 2) The exposure time cannot be
            larger than the equivalent FPS. So expect 100ms exposure time to be reduced to 30ms or 33.33ms when the camera is
            started. The most recent copy of the table 'device_exposure_mapping' is in
            https://github.com/microsoft/Azure-Kinect-Sensor-SDK/blob/develop/src/color/color_priv.h
            </para></remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorControlCommand.AutoExposurePriority">
            <summary>Exposure or Frame rate priority setting.</summary>
            <remarks>
            May only be set to <see cref="F:K4AdotNet.Sensor.ColorControlMode.Manual"/>.
            Value of <c>0</c> means frame rate priority. Value of <c>1</c> means exposure priority.
            Using exposure priority may impact the frame rate of both the color and depth cameras.
            Deprecated starting from version 1.1.0 of Sensor SDK. Please discontinue usage, firmware does not support this.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorControlCommand.Brightness">
            <summary>Brightness setting.</summary>
            <remarks>
            May only be set to <see cref="F:K4AdotNet.Sensor.ColorControlMode.Manual"/>.
            The valid range is 0 to 255. The default value is 128.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorControlCommand.Contrast">
            <summary>Contrast setting.</summary>
            <remarks>
            May only be set to <see cref="F:K4AdotNet.Sensor.ColorControlMode.Manual"/>.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorControlCommand.Saturation">
            <summary>Saturation setting.</summary>
            <remarks>
            May only be set to <see cref="F:K4AdotNet.Sensor.ColorControlMode.Manual"/>.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorControlCommand.Sharpness">
            <summary>Sharpness setting.</summary>
            <remarks>
            May only be set to <see cref="F:K4AdotNet.Sensor.ColorControlMode.Manual"/>.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorControlCommand.Whitebalance">
            <summary>White balance setting.</summary>
            <remarks>
            May be set to <see cref="F:K4AdotNet.Sensor.ColorControlMode.Auto"/> or <see cref="F:K4AdotNet.Sensor.ColorControlMode.Manual"/>.
            The unit is degrees Kelvin. The setting must be set to a value evenly divisible by 10 degrees.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorControlCommand.BacklightCompensation">
            <summary>Backlight compensation setting.</summary>
            <remarks>
            May only be set to <see cref="F:K4AdotNet.Sensor.ColorControlMode.Manual"/>.
            Value of <c>0</c> means backlight compensation is disabled. Value of <c>1</c> means backlight compensation is enabled.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorControlCommand.Gain">
            <summary>Gain setting.</summary>
            <remarks>
            May only be set to <see cref="F:K4AdotNet.Sensor.ColorControlMode.Manual"/>.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorControlCommand.PowerlineFrequency">
            <summary>Powerline frequency setting.</summary>
            <remarks>
            May only be set to <see cref="F:K4AdotNet.Sensor.ColorControlMode.Manual"/>.
            Value of <c>1</c> sets the powerline compensation to 50 Hz. Value of <c>2</c> sets the powerline compensation to 60 Hz.
            </remarks>
        </member>
        <member name="T:K4AdotNet.Sensor.ColorControlMode">
            <summary>Color sensor control mode.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorControlMode.Auto">
            <summary>set the associated <see cref="T:K4AdotNet.Sensor.ColorControlCommand"/> to auto mode</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorControlMode.Manual">
            <summary>set the associated <see cref="T:K4AdotNet.Sensor.ColorControlCommand"/> to manual mode</summary>
        </member>
        <member name="T:K4AdotNet.Sensor.ColorResolution">
            <summary>Color sensor resolutions.</summary>
            <remarks>
            Use extension methods from <see cref="T:K4AdotNet.Sensor.ColorResolutions"/> class
            for additional details on the field of view, supported frame rates and image formats.
            </remarks>
            <seealso cref="T:K4AdotNet.Sensor.ColorResolutions"/>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorResolution.Off">
            <summary>Color camera will be turned off with this setting</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorResolution.R720p">
            <summary>1280x720  16:9</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorResolution.R1080p">
            <summary>1920x1080 16:9</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorResolution.R1440p">
            <summary>2560x1440 16:9</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorResolution.R1536p">
            <summary>2048x1536 4:3</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorResolution.R2160p">
            <summary>3840x2160 16:9</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorResolution.R3072p">
            <summary>4096x3072 4:3</summary>
        </member>
        <member name="T:K4AdotNet.Sensor.ColorResolutions">
            <summary>Extensions to <see cref="T:K4AdotNet.Sensor.ColorResolution"/> enumeration. Adds some metadata to <see cref="T:K4AdotNet.Sensor.ColorResolution"/> enumeration.</summary>
            <seealso cref="T:K4AdotNet.Sensor.ColorResolution"/>
        </member>
        <member name="F:K4AdotNet.Sensor.ColorResolutions.All">
            <summary>
            All possible <see cref="T:K4AdotNet.Sensor.ColorResolution"/>s including <see cref="F:K4AdotNet.Sensor.ColorResolution.Off"/>.
            May be helpful for UI, tests, etc.
            </summary>
        </member>
        <member name="M:K4AdotNet.Sensor.ColorResolutions.IsCompatibleWith(K4AdotNet.Sensor.ColorResolution,K4AdotNet.Sensor.FrameRate)">
            <summary>Checks that resolution is compatible with a given frame rate.</summary>
            <param name="colorResolution">Color resolution to be tested on compatibility with <paramref name="frameRate"/>.</param>
            <param name="frameRate">Frame rate to be tested on compatibility with <paramref name="colorResolution"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="colorResolution"/> can be used in combination with <paramref name="frameRate"/>,
            <see langword="false"/> - otherwise.
            </returns>
            <remarks>
            For details see:
            https://docs.microsoft.com/en-us/azure/Kinect-dk/hardware-specification#color-camera-supported-operating-modes
            </remarks>
            <seealso cref="M:K4AdotNet.Sensor.FrameRates.IsCompatibleWith(K4AdotNet.Sensor.FrameRate,K4AdotNet.Sensor.ColorResolution)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.ColorResolutions.IsCompatibleWith(K4AdotNet.Sensor.ColorResolution,K4AdotNet.Sensor.ImageFormat)">
            <summary>Checks that resolution is compatible with a given image format.</summary>
            <param name="colorResolution">Color resolution to be tested on compatibility with <paramref name="imageFormat"/>.</param>
            <param name="imageFormat">Image format to be tested on compatibility with <paramref name="colorResolution"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="colorResolution"/> can be used for images of <paramref name="imageFormat"/> format,
            <see langword="false"/> - otherwise.
            </returns>
            <remarks>
            For details see:
            https://docs.microsoft.com/en-us/azure/Kinect-dk/hardware-specification#color-camera-supported-operating-modes
            </remarks>
            <seealso cref="T:K4AdotNet.Sensor.ImageFormat"/>
        </member>
        <member name="M:K4AdotNet.Sensor.ColorResolutions.WidthPixels(K4AdotNet.Sensor.ColorResolution)">
            <summary>Returns image width in pixels for a given resolution.</summary>
            <param name="resolution">Color resolution (element of enumeration).</param>
            <returns>Width in pixels.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.ColorResolutions.HeightPixels(K4AdotNet.Sensor.ColorResolution)">
            <summary>Returns image height in pixels for a given resolution.</summary>
            <param name="resolution">Color resolution (element of enumeration)</param>
            <returns>Height in pixels.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.ColorResolutions.GetNominalFov(K4AdotNet.Sensor.ColorResolution,System.Single@,System.Single@)">
            <summary>Gets nominal (without taking into account distortions) field-of-view (FOV) for a given color resolution.</summary>
            <param name="resolution">Color resolution.</param>
            <param name="horizontalDegrees">Output: nominal horizontal field-of-view (FOV) in degrees.</param>
            <param name="verticalDegrees">Output: nominal vertical field-of-view (FOV) in degrees.</param>
            <remarks>
            For details see:
            https://docs.microsoft.com/en-us/azure/Kinect-dk/hardware-specification#color-camera-supported-operating-modes
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.ColorResolutions.IsAspectRatio4to3(K4AdotNet.Sensor.ColorResolution)">
            <summary>Aspect ratio of a given resolution: is it 4:3?</summary>
            <param name="resolution">Element of enumeration.</param>
            <returns>
            <see langword="true"/> if <paramref name="resolution"/> has 4:3 aspect ratio,
            <see langword="false"/> - otherwise.
            </returns>
            <remarks>
            For details see:
            https://docs.microsoft.com/en-us/azure/Kinect-dk/hardware-specification#color-camera-supported-operating-modes
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.ColorResolutions.IsAspectRatio16to9(K4AdotNet.Sensor.ColorResolution)">
            <summary>Aspect ratio of a given resolution: is it 16:9?</summary>
            <param name="resolution">Element of enumeration.</param>
            <returns>
            <see langword="true"/> if <paramref name="resolution"/> has 16:9 aspect ratio,
            <see langword="false"/> - otherwise.
            </returns>
            <remarks>
            For details see:
            https://docs.microsoft.com/en-us/azure/Kinect-dk/hardware-specification#color-camera-supported-operating-modes
            </remarks>
        </member>
        <member name="T:K4AdotNet.Sensor.DepthMode">
            <summary>Depth sensor capture modes.</summary>
            <remarks><para>
            Use extension methods from <see cref="T:K4AdotNet.Sensor.DepthModes"/> class
            for additional details on the field of view, and supported frame rates for each mode.
            </para><para>
            Binned modes reduce the captured camera resolution by combining adjacent sensor pixels into a bin.
            </para></remarks>
            <seealso cref="T:K4AdotNet.Sensor.DepthModes"/>
        </member>
        <member name="F:K4AdotNet.Sensor.DepthMode.Off">
            <summary>Depth sensor will be turned off with this setting.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.DepthMode.NarrowView2x2Binned">
            <summary>Depth captured at 320x288. Passive IR is also captured at 320x288.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.DepthMode.NarrowViewUnbinned">
            <summary>Depth captured at 640x576. Passive IR is also captured at 640x576.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.DepthMode.WideView2x2Binned">
            <summary>Depth captured at 512x512. Passive IR is also captured at 512x512.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.DepthMode.WideViewUnbinned">
            <summary>Depth captured at 1024x1024. Passive IR is also captured at 1024x1024.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.DepthMode.PassiveIR">
            <summary>Passive IR only, captured at 1024x1024.</summary>
        </member>
        <member name="T:K4AdotNet.Sensor.DepthModes">
            <summary>Extensions to <see cref="T:K4AdotNet.Sensor.DepthMode"/> enumeration. Adds some metadata to <see cref="T:K4AdotNet.Sensor.DepthMode"/> enumeration.</summary>
            <seealso cref="T:K4AdotNet.Sensor.DepthMode"/>
        </member>
        <member name="F:K4AdotNet.Sensor.DepthModes.All">
            <summary>
            All possible <see cref="T:K4AdotNet.Sensor.DepthModes"/>s including <see cref="F:K4AdotNet.Sensor.DepthMode.Off"/>.
            May be helpful for UI, tests, etc.
            </summary>
        </member>
        <member name="M:K4AdotNet.Sensor.DepthModes.HasDepth(K4AdotNet.Sensor.DepthMode)">
            <summary>Is there depth stream in a given depth mode?</summary>
            <param name="depthMode">Depth mode under test.</param>
            <returns>
            <see langword="true"/> if <paramref name="depthMode"/> actually generates depth data,
            <see langword="false"/> if <paramref name="depthMode"/> is <see cref="F:K4AdotNet.Sensor.DepthMode.Off"/> or <see cref="F:K4AdotNet.Sensor.DepthMode.PassiveIR"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Sensor.DepthModes.HasPassiveIR(K4AdotNet.Sensor.DepthMode)">
            <summary>Is there IR stream in a given depth mode?</summary>
            <param name="depthMode">Depth mode under test.</param>
            <returns>
            <see langword="true"/> if <paramref name="depthMode"/> actually generates IR data,
            <see langword="false"/> if <paramref name="depthMode"/> is <see cref="F:K4AdotNet.Sensor.DepthMode.Off"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Sensor.DepthModes.IsCompatibleWith(K4AdotNet.Sensor.DepthMode,K4AdotNet.Sensor.FrameRate)">
            <summary>Checks that depth mode is compatible with a given frame rate.</summary>
            <param name="depthMode">Depth mode to be tested on compatibility with <paramref name="frameRate"/>.</param>
            <param name="frameRate">Frame rate to be tested on compatibility with <paramref name="depthMode"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="depthMode"/> can be used in combination with <paramref name="frameRate"/>,
            <see langword="false"/> - otherwise.
            </returns>
            <remarks>
            For details see:
            https://docs.microsoft.com/en-us/azure/Kinect-dk/hardware-specification#depth-camera-supported-operating-modes
            </remarks>
            <seealso cref="M:K4AdotNet.Sensor.FrameRates.IsCompatibleWith(K4AdotNet.Sensor.FrameRate,K4AdotNet.Sensor.DepthMode)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.DepthModes.WidthPixels(K4AdotNet.Sensor.DepthMode)">
            <summary>Returns depth and IR images width in pixels for a given depth mode.</summary>
            <param name="depthMode">Element of enumeration.</param>
            <returns>Width in pixels.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.DepthModes.HeightPixels(K4AdotNet.Sensor.DepthMode)">
            <summary>Returns depth and IR images height in pixels for a given depth mode.</summary>
            <param name="depthMode">Element of enumeration.</param>
            <returns>Height in pixels.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.DepthModes.IsWideView(K4AdotNet.Sensor.DepthMode)">
            <summary>Is depth mode has wide field of view?</summary>
            <param name="depthMode">Depth mode (element of enumeration).</param>
            <returns>
            <see langword="true"/> - wide field-of-view,
            <see langword="false"/> - narrow field-of-view.
            </returns>
        </member>
        <member name="M:K4AdotNet.Sensor.DepthModes.IsBinned(K4AdotNet.Sensor.DepthMode)">
            <summary>Does depth mode use binning for smoothing/filtering?</summary>
            <param name="depthMode">Depth mode (element of enumeration).</param>
            <returns>
            <see langword="true"/> - pixels are binned,
            <see langword="false"/> - no binning is used.
            </returns>
            <remarks>
            Binned modes reduce the captured camera resolution by combining adjacent sensor pixels into a bin.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.DepthModes.GetOperatingRange(K4AdotNet.Sensor.DepthMode,System.Int32@,System.Int32@)">
            <summary>
            Gets operation range (minimal and maximum distance visible on depth map) for a given depth mode.
            </summary>
            <param name="depthMode">Depth mode.</param>
            <param name="minDistanceMm">Minimum visible on depth map distance in millimeters.</param>
            <param name="maxDistanceMm">Maximum visible on depth map distance in millimeters.</param>
            <remarks>
            For details see:
            https://docs.microsoft.com/en-us/azure/Kinect-dk/hardware-specification#depth-camera-supported-operating-modes
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.DepthModes.GetNominalFov(K4AdotNet.Sensor.DepthMode,System.Single@,System.Single@)">
            <summary>Gets nominal (without taking into account distortions) field-of-view (FOV) for a given depth mode.</summary>
            <param name="depthMode">Depth mode.</param>
            <param name="horizontalDegrees">Output: nominal horizontal field-of-view (FOV) in degrees.</param>
            <param name="verticalDegrees">Output: nominal vertical field-of-view (FOV) in degrees.</param>
            <remarks>
            For details see:
            https://docs.microsoft.com/en-us/azure/Kinect-dk/hardware-specification#depth-camera-supported-operating-modes
            </remarks>
        </member>
        <member name="T:K4AdotNet.Sensor.Device">
            <summary>Azure Kinect device. The main class in Sensor part of API.</summary>
            <remarks><para>
            To open device use <see cref="M:K4AdotNet.Sensor.Device.TryOpen(K4AdotNet.Sensor.Device@,System.Int32)"/> or <see cref="M:K4AdotNet.Sensor.Device.Open(System.Int32)"/> method,
            to start cameras streaming call <see cref="M:K4AdotNet.Sensor.Device.StartCameras(K4AdotNet.Sensor.DeviceConfiguration)"/>,
            to stop - call <see cref="M:K4AdotNet.Sensor.Device.StopCameras"/>.
            <see cref="M:K4AdotNet.Sensor.Device.TryGetCapture(K4AdotNet.Sensor.Capture@,K4AdotNet.Timeout)"/> and <see cref="M:K4AdotNet.Sensor.Device.GetCapture"/> methods
            are used to read next capture (frame with data) from device.
            Don't forget to close device and release all unmanaged resources by calling <see cref="M:K4AdotNet.Sensor.Device.Dispose"/> method.
            </para></remarks>
            <seealso cref="T:K4AdotNet.Sensor.Capture"/>
            <seealso cref="T:K4AdotNet.Sensor.ImuSample"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.Dispose">
            <summary>
            Call this method to close device and free all unmanaged resources associated with current instance.
            </summary>
            <seealso cref="E:K4AdotNet.Sensor.Device.Disposed"/>
            <seealso cref="P:K4AdotNet.Sensor.Device.IsDisposed"/>
        </member>
        <member name="P:K4AdotNet.Sensor.Device.IsDisposed">
            <summary>Gets a value indicating whether the object has been disposed of.</summary>
            <seealso cref="M:K4AdotNet.Sensor.Device.Dispose"/>
        </member>
        <member name="E:K4AdotNet.Sensor.Device.Disposed">
            <summary>Raised on object disposing (only once).</summary>
            <seealso cref="M:K4AdotNet.Sensor.Device.Dispose"/>
        </member>
        <member name="P:K4AdotNet.Sensor.Device.DeviceIndex">
            <summary>Zero-based index of this device.</summary>
            <seealso cref="M:K4AdotNet.Sensor.Device.Open(System.Int32)"/>
            <seealso cref="M:K4AdotNet.Sensor.Device.TryOpen(K4AdotNet.Sensor.Device@,System.Int32)"/>
        </member>
        <member name="P:K4AdotNet.Sensor.Device.SerialNumber">
            <summary>Azure Kinect device serial number. Not <see langword="null"/>.</summary>
        </member>
        <member name="P:K4AdotNet.Sensor.Device.Version">
            <summary>Version numbers of the device's subsystems.</summary>
        </member>
        <member name="P:K4AdotNet.Sensor.Device.IsConnected">
            <summary>Is this device still connected?</summary>
            <seealso cref="T:K4AdotNet.Sensor.DeviceConnectionLostException"/>
        </member>
        <member name="P:K4AdotNet.Sensor.Device.IsSyncInConnected">
            <summary>Gets the device jack status for the synchronization in connectors.</summary>
            <remarks>
            If <see cref="P:K4AdotNet.Sensor.Device.IsSyncInConnected"/> is <see langword="true"/> then
            <see cref="F:K4AdotNet.Sensor.DeviceConfiguration.WiredSyncMode"/> mode can be set to <see cref="F:K4AdotNet.Sensor.WiredSyncMode.Standalone"/> or <see cref="F:K4AdotNet.Sensor.WiredSyncMode.Subordinate"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be asked for disposed objects.</exception>
            <exception cref="T:K4AdotNet.Sensor.DeviceConnectionLostException">Connection with device has been lost.</exception>
            <exception cref="T:System.InvalidOperationException">Some unspecified error in Sensor SDK. See logs for details.</exception>
        </member>
        <member name="P:K4AdotNet.Sensor.Device.IsSyncOutConnected">
            <summary>Gets the device jack status for the synchronization out connectors.</summary>
            <remarks>
            If <see cref="P:K4AdotNet.Sensor.Device.IsSyncOutConnected"/> is <see langword="true"/> then
            <see cref="F:K4AdotNet.Sensor.DeviceConfiguration.WiredSyncMode"/> mode can be set to <see cref="F:K4AdotNet.Sensor.WiredSyncMode.Standalone"/> or <see cref="F:K4AdotNet.Sensor.WiredSyncMode.Master"/>.
            If <see cref="P:K4AdotNet.Sensor.Device.IsSyncInConnected"/> is also <see langword="true"/> then
            <see cref="F:K4AdotNet.Sensor.DeviceConfiguration.WiredSyncMode"/> mode can be set to <see cref="F:K4AdotNet.Sensor.WiredSyncMode.Subordinate"/> (in this case 'Sync Out' is driven for the
            next device in the chain).
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be asked for disposed objects.</exception>
            <exception cref="T:K4AdotNet.Sensor.DeviceConnectionLostException">Connection with device has been lost.</exception>
            <exception cref="T:System.InvalidOperationException">Some unspecified error in Sensor SDK. See logs for details.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.StartCameras(K4AdotNet.Sensor.DeviceConfiguration)">
            <summary>Starts color and depth camera capture.</summary>
            <param name="config">The configuration we want to run the device in. This can be initialized with <see cref="F:K4AdotNet.Sensor.DeviceConfiguration.DisableAll"/>.</param>
            <remarks><para>
            Individual sensors configured to run will now start to stream captured data.
            </para><para>
            It is not valid to call this method a second time on the same device until <see cref="M:K4AdotNet.Sensor.Device.StopCameras"/> has been called.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:System.ArgumentException">Configuration in <paramref name="config"/> is not valid. For details see <see cref="M:K4AdotNet.Sensor.DeviceConfiguration.IsValid(System.String@)"/>.</exception>
            <exception cref="T:K4AdotNet.Sensor.DeviceConnectionLostException">Connection with device has been lost.</exception>
            <exception cref="T:System.InvalidOperationException">Cameras streaming is already running, or something wrong with <paramref name="config"/>, or <see cref="F:K4AdotNet.Sdk.DEPTHENGINE_DLL_NAME"/> library cannot be found.</exception>
            <seealso cref="M:K4AdotNet.Sensor.Device.StopCameras"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.StopCameras">
            <summary>Stops the color and depth camera capture.</summary>
            <remarks><para>
            The streaming of individual sensors stops as a result of this call. Once called, <see cref="M:K4AdotNet.Sensor.Device.StartCameras(K4AdotNet.Sensor.DeviceConfiguration)"/>
            may be called again to resume sensor streaming.
            </para><para>
            This function may be called while another thread is blocking in <see cref="M:K4AdotNet.Sensor.Device.GetCapture"/> or <see cref="M:K4AdotNet.Sensor.Device.TryGetCapture(K4AdotNet.Sensor.Capture@,K4AdotNet.Timeout)"/>.
            Calling this function while another thread is in that function will result in that function failing with exception.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <seealso cref="M:K4AdotNet.Sensor.Device.StartCameras(K4AdotNet.Sensor.DeviceConfiguration)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.StartImu">
            <summary>Starts the IMU sample stream.</summary>
            <remarks><para>
            Call this API to start streaming IMU data. It is not valid to call this function a second time on the same
            device until <see cref="M:K4AdotNet.Sensor.Device.StopImu"/> has been called.
            </para><para>
            This function is dependent on the state of the cameras. The color or depth camera must be started before the IMU.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Sensor.DeviceConnectionLostException">Connection with device has been lost.</exception>
            <exception cref="T:System.InvalidOperationException">IMU streaming is already running or cameras streaming is not running.</exception>
            <seealso cref="M:K4AdotNet.Sensor.Device.StopImu"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.StopImu">
            <summary>Stops the IMU capture.</summary>
            <remarks><para>
            The streaming of the IMU stops as a result of this call. Once called, <see cref="M:K4AdotNet.Sensor.Device.StartImu"/> may
            be called again to resume sensor streaming, so long as the cameras are running.
            </para><para>
            This function may be called while another thread is blocking in <see cref="M:K4AdotNet.Sensor.Device.GetImuSample"/> or <see cref="M:K4AdotNet.Sensor.Device.TryGetImuSample(K4AdotNet.Sensor.ImuSample@,K4AdotNet.Timeout)"/>.
            Calling this function while another thread is in that function will result in that function failing with exception.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <seealso cref="M:K4AdotNet.Sensor.Device.StartImu"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.TryGetCapture(K4AdotNet.Sensor.Capture@,K4AdotNet.Timeout)">
            <summary>Reads a sensor capture.</summary>
            <param name="capture">
            If successful this contains object with capture data read from device (don't forget to free this object by calling <see cref="M:K4AdotNet.Sensor.Capture.Dispose"/>),
            otherwise - <see langword="null"/>.
            </param>
            <param name="timeout">
            Specifies the time the function should block waiting for the capture.
            Default value is <see cref="F:K4AdotNet.Timeout.NoWait"/>, which means that the function will return without blocking.
            Passing <see cref="F:K4AdotNet.Timeout.Infinite"/> will block indefinitely until data is available, the
            device is disconnected, or another error occurs.
            </param>
            <returns>
            <see langword="true"/> - if a capture is returned,
            <see langword="false"/> - if a capture is not available before the timeout elapses.
            </returns>
            <remarks>
            This function needs to be called while the device is in a running state;
            after <see cref="M:K4AdotNet.Sensor.Device.StartCameras(K4AdotNet.Sensor.DeviceConfiguration)"/> is called and before <see cref="M:K4AdotNet.Sensor.Device.StopCameras"/> is called.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Sensor.DeviceConnectionLostException">Connection with Azure Kinect device has been lost.</exception>
            <exception cref="T:System.InvalidOperationException">Camera streaming is not running or has been stopped during this call.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.GetCapture">
            <summary>Equivalent to call of <see cref="M:K4AdotNet.Sensor.Device.TryGetCapture(K4AdotNet.Sensor.Capture@,K4AdotNet.Timeout)"/> with infinite timeout: <see cref="F:K4AdotNet.Timeout.Infinite"/>.</summary>
            <returns>Capture object read from device. Not <see langword="null"/>. Don't forget call <see cref="M:K4AdotNet.Sensor.Capture.Dispose"/> for returned object after usage.</returns>
            <remarks>
            This function needs to be called while the device is in a running state;
            after <see cref="M:K4AdotNet.Sensor.Device.StartCameras(K4AdotNet.Sensor.DeviceConfiguration)"/> is called and before <see cref="M:K4AdotNet.Sensor.Device.StopCameras"/> is called.
            </remarks>
            <seealso cref="M:K4AdotNet.Sensor.Device.TryGetCapture(K4AdotNet.Sensor.Capture@,K4AdotNet.Timeout)"/>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Sensor.DeviceConnectionLostException">Connection with Azure Kinect device has been lost.</exception>
            <exception cref="T:System.InvalidOperationException">Camera streaming is not running or has been stopped during this call.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.TryGetImuSample(K4AdotNet.Sensor.ImuSample@,K4AdotNet.Timeout)">
            <summary>Reads an IMU sample.</summary>
            <param name="imuSample">Information about IMU sample if method returned <see langword="true"/>.</param>
            <param name="timeout">
            Specifies the time the function should block waiting for the capture.
            Default value is <see cref="F:K4AdotNet.Timeout.NoWait"/>, which means that the function will return without blocking.
            Passing <see cref="F:K4AdotNet.Timeout.Infinite"/> will block indefinitely until data is available, the
            device is disconnected, or another error occurs.
            </param>
            <returns>
            <see langword="true"/> - if a sample is returned,
            <see langword="false"/> - if a sample is not available before the timeout elapses.
            </returns>
            <remarks>
            This function needs to be called while the device is in a running state;
            after <see cref="M:K4AdotNet.Sensor.Device.StartImu"/> is called and before <see cref="M:K4AdotNet.Sensor.Device.StopImu"/> is called.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Sensor.DeviceConnectionLostException">Connection with Azure Kinect device has been lost.</exception>
            <exception cref="T:System.InvalidOperationException">IMU streaming is not running or has been stopped during this call.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.GetImuSample">
            <summary>Equivalent to call of <see cref="M:K4AdotNet.Sensor.Device.TryGetImuSample(K4AdotNet.Sensor.ImuSample@,K4AdotNet.Timeout)"/> with infinite timeout: <see cref="F:K4AdotNet.Timeout.Infinite"/>.</summary>
            <returns>Information about IMU sample.</returns>
            <remarks>
            This function needs to be called while the device is in a running state;
            after <see cref="M:K4AdotNet.Sensor.Device.StartImu"/> is called and before <see cref="M:K4AdotNet.Sensor.Device.StopImu"/> is called.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Sensor.DeviceConnectionLostException">Connection with Azure Kinect device has been lost.</exception>
            <exception cref="T:System.InvalidOperationException">IMU streaming is not running or has been stopped during this call.</exception>
            <seealso cref="M:K4AdotNet.Sensor.Device.TryGetImuSample(K4AdotNet.Sensor.ImuSample@,K4AdotNet.Timeout)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.TrySetColorControl(K4AdotNet.Sensor.ColorControlCommand,K4AdotNet.Sensor.ColorControlMode,System.Int32)">
            <summary>Set the Azure Kinect color sensor control value.</summary>
            <param name="command">Color sensor control command.</param>
            <param name="mode">Color sensor control mode to set. This mode represents whether the command is in automatic or manual mode.</param>
            <param name="value">
            Value to set the color sensor's control to. The value is only valid if <paramref name="mode"/>
            is set to <see cref="F:K4AdotNet.Sensor.ColorControlMode.Manual"/>, and is otherwise ignored.
            </param>
            <returns><see langword="true"/> if the value was successfully set, <see langword="false"/> -  otherwise.</returns>
            <remarks><para>
            Each control command may be set to manual or automatic. See the definition of <see cref="T:K4AdotNet.Sensor.ColorControlCommand"/> on how
            to interpret the <paramref name="value"/> for each command.
            </para><para>
            Some control commands are only supported in manual mode. When a command is in automatic mode, the <paramref name="value"/> for that
            command is not valid.
            </para><para>
            Control values set on a device are reset only when the device is power cycled. The device will retain the settings
            even if the device is disposed or the application is restarted.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.GetColorControl(K4AdotNet.Sensor.ColorControlCommand,K4AdotNet.Sensor.ColorControlMode@,System.Int32@)">
            <summary>Gets the Azure Kinect color sensor control value.</summary>
            <param name="command">Color sensor control command.</param>
            <param name="mode">This mode represents whether the command is in automatic or manual mode.</param>
            <param name="value">This value is always written, but is only valid when the <paramref name="mode"/> returned is <see cref="F:K4AdotNet.Sensor.ColorControlMode.Manual"/> for the current <paramref name="command"/>.</param>
            <remarks><para>
            Each control command may be set to manual or automatic. See the definition of <see cref="T:K4AdotNet.Sensor.ColorControlCommand"/> on
            how to interpret the <paramref name="value"/> for each command.
            </para><para>
            Some control commands are only supported in manual mode. When a command is in automatic mode, the <paramref name="value"/> for
            that command is not valid.
            </para><para>
            Control values set on a device are reset only when the device is power cycled. The device will retain the
            settings even if the device is disposed or the application is restarted.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Sensor.DeviceConnectionLostException">Connection with Azure Kinect device has been lost.</exception>
            <exception cref="T:System.InvalidOperationException">Not supported <paramref name="command"/>.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.GetColorControlCapabilities(K4AdotNet.Sensor.ColorControlCommand,System.Boolean@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,K4AdotNet.Sensor.ColorControlMode@)">
            <summary>Gets the Azure Kinect color sensor control capabilities.</summary>
            <param name="command">Color sensor control command.</param>
            <param name="supportsAuto">Output: whether the color sensor's control support auto mode or not. <see langword="true"/> if it supports auto mode, otherwise <see langword="false"/>.</param>
            <param name="minValue">Output: the color sensor's control minimum value of <paramref name="command"/>.</param>
            <param name="maxValue">Output: the color sensor's control maximum value of <paramref name="command"/>.</param>
            <param name="valueStep">Output: the color sensor's control step value of <paramref name="command"/>.</param>
            <param name="defaultValue">Output: the color sensor's control default value of <paramref name="command"/>.</param>
            <param name="defaultMode">Output: the color sensor's control default mode of <paramref name="command"/>.</param>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Sensor.DeviceConnectionLostException">Connection with Azure Kinect device has been lost.</exception>
            <exception cref="T:System.InvalidOperationException">Not supported <paramref name="command"/>.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.GetRawCalibration">
            <summary>Gets the raw calibration blob for the entire Azure Kinect device.</summary>
            <returns>Raw calibration data terminated by <c>0</c> byte. Not <see langword="null"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Sensor.DeviceConnectionLostException">Connection with Azure Kinect device has been lost.</exception>
            <exception cref="T:System.InvalidOperationException">Cannot read calibration data for some unexpected reason. See logs for details.</exception>
            <seealso cref="M:K4AdotNet.Sensor.Device.GetCalibration(K4AdotNet.Sensor.DepthMode,K4AdotNet.Sensor.ColorResolution,K4AdotNet.Sensor.Calibration@)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.GetCalibration(K4AdotNet.Sensor.DepthMode,K4AdotNet.Sensor.ColorResolution,K4AdotNet.Sensor.Calibration@)">
            <summary>Gets the camera calibration for the entire Azure Kinect device.</summary>
            <param name="depthMode">Mode in which depth camera is operated.</param>
            <param name="colorResolution">Resolution in which color camera is operated.</param>
            <param name="calibration">Output: calibration data.</param>
            <remarks><para>
            The <paramref name="calibration"/> represents the data needed to transform between the camera views and may be
            different for each operating <paramref name="depthMode"/> and <paramref name="colorResolution"/> the device is configured to operate in.
            </para><para>
            The <paramref name="calibration"/> output is used as input to all calibration and transformation functions.
            </para></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="depthMode"/> and <paramref name="colorResolution"/> cannot be equal to <c>Off</c> simultaneously.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
            <exception cref="T:K4AdotNet.Sensor.DeviceConnectionLostException">Connection with Azure Kinect device has been lost.</exception>
            <exception cref="T:System.InvalidOperationException">Cannot read calibration data for some unexpected reason. See logs for details.</exception>
            <seealso cref="M:K4AdotNet.Sensor.Device.GetCalibration(K4AdotNet.Sensor.DepthMode,K4AdotNet.Sensor.ColorResolution,K4AdotNet.Sensor.Calibration@)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.ToString">
            <summary>Convenient string representation of object.</summary>
            <returns><c>Azure Kinect #{SerialNumber}</c></returns>
        </member>
        <member name="P:K4AdotNet.Sensor.Device.InstalledCount">
            <summary>Gets the number of connected devices.</summary>
            <remarks>Some devices can be occupied by other processes by they are counted here as connected.</remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.Device.DefaultDeviceIndex">
            <summary>Index for default device (the first connected device). Use it when you're working with single device solutions.</summary>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.TryOpen(K4AdotNet.Sensor.Device@,System.Int32)">
            <summary>Tries to open an Azure Kinect device.</summary>
            <param name="device">Opened device on success, or <see langword="null"/> in case of failure.</param>
            <param name="index">Zero-based index of device to be opened. By default - <see cref="F:K4AdotNet.Sensor.Device.DefaultDeviceIndex"/>.</param>
            <returns>
            <see langword="true"/> if device has been successfully opened,
            <see langword="false"/> - otherwise.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <seealso cref="M:K4AdotNet.Sensor.Device.Open(System.Int32)"/>
            <seealso cref="P:K4AdotNet.Sensor.Device.InstalledCount"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Device.Open(System.Int32)">
            <summary>Opens an Azure Kinect device. Like <see cref="M:K4AdotNet.Sensor.Device.TryOpen(K4AdotNet.Sensor.Device@,System.Int32)"/> but raises exception in case of failure.</summary>
            <param name="index">Zero-based index of device to be opened. By default - <see cref="F:K4AdotNet.Sensor.Device.DefaultDeviceIndex"/>.</param>
            <returns>Opened device. Not <see langword="null"/>. Don't forget to call <see cref="M:K4AdotNet.Sensor.Device.Dispose"/> method for this object after usage.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <exception cref="T:K4AdotNet.Sensor.DeviceNotFoundException">Device with <paramref name="index"/> index is not found. Most likely it is not connected or hasn't power supply.</exception>
            <exception cref="T:K4AdotNet.Sensor.DeviceOccupiedException">This Kinect device is occupied by another process, or it is already opened in current process, or it has not enough power supply.</exception>
            <seealso cref="M:K4AdotNet.Sensor.Device.TryOpen(K4AdotNet.Sensor.Device@,System.Int32)"/>
            <seealso cref="P:K4AdotNet.Sensor.Device.InstalledCount"/>
        </member>
        <member name="T:K4AdotNet.Sensor.DeviceConfiguration">
            <summary>Configuration parameters for an Azure Kinect device.</summary>
            <seealso cref="M:K4AdotNet.Sensor.Device.StartCameras(K4AdotNet.Sensor.DeviceConfiguration)"/>
        </member>
        <member name="F:K4AdotNet.Sensor.DeviceConfiguration.ColorFormat">
            <summary>Image format to capture with the color camera.</summary>
            <remarks><para>
            The color camera does not natively produce <c>BGRA32</c> images.
            Setting <see cref="F:K4AdotNet.Sensor.ImageFormat.ColorBgra32"/> value will result in higher CPU utilization.
            </para><para>
            Use only <see cref="T:K4AdotNet.Sensor.ImageFormat"/>s that is applicable for color images.
            To check it you can call <see cref="M:K4AdotNet.Sensor.ImageFormats.IsColor(K4AdotNet.Sensor.ImageFormat)"/>.
            </para></remarks>
            <seealso cref="M:K4AdotNet.Sensor.ImageFormats.IsColor(K4AdotNet.Sensor.ImageFormat)"/>
        </member>
        <member name="F:K4AdotNet.Sensor.DeviceConfiguration.ColorResolution">
            <summary>Image resolution to capture with the color camera.</summary>
            <remarks>
            Not all combinations of <see cref="F:K4AdotNet.Sensor.DeviceConfiguration.ColorFormat"/>, <see cref="F:K4AdotNet.Sensor.DeviceConfiguration.ColorResolution"/>
            and <see cref="F:K4AdotNet.Sensor.DeviceConfiguration.DepthMode"/> are supported. To check compatibility use
            <see cref="M:K4AdotNet.Sensor.ColorResolutions.IsCompatibleWith(K4AdotNet.Sensor.ColorResolution,K4AdotNet.Sensor.FrameRate)"/>
            and <see cref="M:K4AdotNet.Sensor.ColorResolutions.IsCompatibleWith(K4AdotNet.Sensor.ColorResolution,K4AdotNet.Sensor.ImageFormat)"/>.
            </remarks>
            <seealso cref="M:K4AdotNet.Sensor.ColorResolutions.IsCompatibleWith(K4AdotNet.Sensor.ColorResolution,K4AdotNet.Sensor.FrameRate)"/>
            <seealso cref="M:K4AdotNet.Sensor.ColorResolutions.IsCompatibleWith(K4AdotNet.Sensor.ColorResolution,K4AdotNet.Sensor.ImageFormat)"/>
        </member>
        <member name="F:K4AdotNet.Sensor.DeviceConfiguration.DepthMode">
            <summary>Capture mode for the depth camera.</summary>
            <remarks>
            To check compatibility of <see cref="F:K4AdotNet.Sensor.DeviceConfiguration.DepthMode"/> with <see cref="F:K4AdotNet.Sensor.DeviceConfiguration.CameraFps"/>
            use <see cref="M:K4AdotNet.Sensor.DepthModes.IsCompatibleWith(K4AdotNet.Sensor.DepthMode,K4AdotNet.Sensor.FrameRate)"/>.
            </remarks>
            <seealso cref="M:K4AdotNet.Sensor.DepthModes.IsCompatibleWith(K4AdotNet.Sensor.DepthMode,K4AdotNet.Sensor.FrameRate)"/>
        </member>
        <member name="F:K4AdotNet.Sensor.DeviceConfiguration.CameraFps">
            <summary>Desired frame rate for the color and depth camera.</summary>
            <remarks>
            <see cref="F:K4AdotNet.Sensor.FrameRate.Thirty"/> cannot be used with <see cref="F:K4AdotNet.Sensor.ColorResolution.R3072p"/>
            and <see cref="F:K4AdotNet.Sensor.DepthMode.WideViewUnbinned"/>. Use <see cref="M:K4AdotNet.Sensor.FrameRates.IsCompatibleWith(K4AdotNet.Sensor.FrameRate,K4AdotNet.Sensor.ColorResolution)"/>
            and <see cref="M:K4AdotNet.Sensor.FrameRates.IsCompatibleWith(K4AdotNet.Sensor.FrameRate,K4AdotNet.Sensor.DepthMode)"/> to check compatibility.
            </remarks>
            <seealso cref="M:K4AdotNet.Sensor.FrameRates.IsCompatibleWith(K4AdotNet.Sensor.FrameRate,K4AdotNet.Sensor.ColorResolution)"/>
            <seealso cref="M:K4AdotNet.Sensor.FrameRates.IsCompatibleWith(K4AdotNet.Sensor.FrameRate,K4AdotNet.Sensor.DepthMode)"/>
        </member>
        <member name="F:K4AdotNet.Sensor.DeviceConfiguration.SynchronizedImagesOnly">
            <summary>Only produce capture objects if they contain synchronized color and depth images.</summary>
            <remarks><para>
            This setting controls the behavior in which images are dropped when images are produced faster than they can be
            read, or if there are errors in reading images from the device.
            </para><para>
            If set to <see langword="true"/>, capture objects will only be produced with both color and depth images.
            If set to <see langword="false"/>, capture objects may be produced only a single image when the corresponding image is dropped.
            </para><para>
            Setting this to <see langword="false"/> ensures that the caller receives all of the images received from the camera, regardless of
            whether the corresponding images expected in the capture are available.
            </para><para>
            If either the color or depth camera are disabled, this setting has no effect.
            </para></remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.DeviceConfiguration.DepthDelayOffColor">
            <summary>Desired delay between the capture of the color image and the capture of the depth image.</summary>
            <remarks>
            A negative value indicates that the depth image should be captured before the color image.
            Any value between negative and positive one capture period is valid.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.DeviceConfiguration.WiredSyncMode">
            <summary>The external synchronization mode.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.DeviceConfiguration.SubordinateDelayOffMaster">
            <summary>The external synchronization timing.</summary>
            <remarks><para>
            If this camera is a subordinate, this sets the capture delay between the color camera capture and the external
            input pulse. A setting of zero indicates that the master and subordinate color images should be aligned.
            </para><para>
            This setting does not effect the 'Sync out' connection.
            </para><para>
            This value must be positive and range from zero to one capture period.
            </para><para>
            If this is not a subordinate, then this value is ignored.
            </para></remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.DeviceConfiguration.DisableStreamingIndicator">
            <summary>Streaming indicator automatically turns on when the color or depth camera's are in use.</summary>
            <remarks>This setting disables that behavior and keeps the LED in an off state.</remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.DeviceConfiguration.IsValid(System.String@)">
            <summary>
            Checks that this configuration is OK (all parameters have correct and compatible values).
            </summary>
            <param name="message">
            What's wrong with configuration or <see langword="null"/> if configuration is valid.
            </param>
            <returns>
            <see langword="true"/> if configuration is valid and can be used in <see cref="M:K4AdotNet.Sensor.Device.StartCameras(K4AdotNet.Sensor.DeviceConfiguration)"/>.
            <see langword="false"/> if configuration has some invalid or incompatible parameters.
            </returns>
        </member>
        <member name="F:K4AdotNet.Sensor.DeviceConfiguration.DisableAll">
            <summary>Initial configuration setting for disabling all sensors.</summary>
            <remarks>Use this setting to initialize a <see cref="T:K4AdotNet.Sensor.DeviceConfiguration"/> to a disabled state.</remarks>
        </member>
        <member name="T:K4AdotNet.Sensor.DeviceConnectionLostException">
            <summary>Exception: connection lost with Azure Kinect device.</summary>
            <seealso cref="T:K4AdotNet.Sensor.Device"/>
        </member>
        <member name="M:K4AdotNet.Sensor.DeviceConnectionLostException.#ctor(System.Int32)">
            <summary>Creates exception for device with specified index.</summary>
            <param name="deviceIndex">Zero-based device index. Can be reached then via <see cref="P:K4AdotNet.Sensor.DeviceException.DeviceIndex"/> property.</param>
            <seealso cref="P:K4AdotNet.Sensor.Device.DeviceIndex"/>
        </member>
        <member name="M:K4AdotNet.Sensor.DeviceConnectionLostException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor for deserialization needs.</summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:K4AdotNet.Sensor.DeviceException">
            <summary>Base class for all device-related exceptions.</summary>
            <seealso cref="T:K4AdotNet.Sensor.Device"/>
        </member>
        <member name="P:K4AdotNet.Sensor.DeviceException.DeviceIndex">
            <summary>Zero-based index of device.</summary>
            <seealso cref="P:K4AdotNet.Sensor.Device.DeviceIndex"/>
        </member>
        <member name="M:K4AdotNet.Sensor.DeviceException.#ctor(System.String,System.Int32)">
            <summary>Creates exception with specified message.</summary>
            <param name="message">Message for exception. Can be reached then via <see cref="P:System.Exception.Message"/> property..</param>
            <param name="deviceIndex">Zero-based index of device.</param>
        </member>
        <member name="M:K4AdotNet.Sensor.DeviceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor for deserialization needs.</summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:K4AdotNet.Sensor.DeviceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>For serialization needs.</summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:K4AdotNet.Sensor.DeviceException.FormatDeviceIndex(System.Int32)">
            <summary>Helper method for inheritors. Formats device index to optional device number.</summary>
            <param name="deviceIndex">Zero-based index of device.</param>
            <returns>
            Empty string if <paramref name="deviceIndex"/> is equal to <see cref="F:K4AdotNet.Sensor.Device.DefaultDeviceIndex"/>,
            <c> #{deviceIndex+1}</c> otherwise.</returns>
        </member>
        <member name="T:K4AdotNet.Sensor.DeviceNotFoundException">
            <summary>Exception: Azure Kinect device not found.</summary>
            <seealso cref="M:K4AdotNet.Sensor.Device.Open(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.DeviceNotFoundException.#ctor(System.Int32)">
            <summary>Creates exception for device with specified index.</summary>
            <param name="deviceIndex">Zero-based device index. Can be reached then via <see cref="P:K4AdotNet.Sensor.DeviceException.DeviceIndex"/> property.</param>
            <seealso cref="P:K4AdotNet.Sensor.Device.DeviceIndex"/>
        </member>
        <member name="M:K4AdotNet.Sensor.DeviceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor for deserialization needs.</summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:K4AdotNet.Sensor.DeviceOccupiedException">
            <summary>Exception: device is occupied or device has insufficient power supply.</summary>
            <seealso cref="M:K4AdotNet.Sensor.Device.Open(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.DeviceOccupiedException.#ctor(System.Int32)">
            <summary>Creates exception for device with specified index.</summary>
            <param name="deviceIndex">Zero-based device index. Can be reached then via <see cref="P:K4AdotNet.Sensor.DeviceException.DeviceIndex"/> property.</param>
            <seealso cref="P:K4AdotNet.Sensor.Device.DeviceIndex"/>
        </member>
        <member name="M:K4AdotNet.Sensor.DeviceOccupiedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor for deserialization needs.</summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:K4AdotNet.Sensor.FirmwareBuild">
            <summary>Firmware build type.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.FirmwareBuild.Release">
            <summary>Production firmware.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.FirmwareBuild.Debug">
            <summary>Pre-production firmware.</summary>
        </member>
        <member name="T:K4AdotNet.Sensor.FirmwareSignature">
            <summary>Firmware signature type.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.FirmwareSignature.MicrosoftSignedFirmware">
            <summary>Microsoft signed firmware.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.FirmwareSignature.TestSignedFirmware">
            <summary>Test signed firmware.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.FirmwareSignature.UnsignedFirmware">
            <summary>Unsigned firmware.</summary>
        </member>
        <member name="T:K4AdotNet.Sensor.FirmwareVersion">
            <summary>Version information about sensor firmware.</summary>
            <remarks>Can be smoothly converted to/from <see cref="T:System.Version"/> object for convenience of usage in your code.</remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.FirmwareVersion.Major">
            <summary>Major version; represents a breaking change.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.FirmwareVersion.Minor">
            <summary>Minor version; represents additional features, no regression from lower versions with same major version.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.FirmwareVersion.Revision">
            <summary>Reserved.</summary>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Creates version with specified components.</summary>
            <param name="major">Value for field <see cref="F:K4AdotNet.Sensor.FirmwareVersion.Major"/>.</param>
            <param name="minor">Value for field <see cref="F:K4AdotNet.Sensor.FirmwareVersion.Minor"/>.</param>
            <param name="revision">Value for field <see cref="F:K4AdotNet.Sensor.FirmwareVersion.Revision"/>.</param>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.#ctor(System.Version)">
            <summary>Creates version from <see cref="T:System.Version"/> object.</summary>
            <param name="version">Version. Not <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="version"/> cannot be <see langword="null"/>.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.ToVersion">
            <summary>Explicitly converts to standard <see cref="T:System.Version"/> object.</summary>
            <returns>Corresponding <see cref="T:System.Version"/> object. Not <see langword="null"/>.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_Implicit(K4AdotNet.Sensor.FirmwareVersion)~System.Version">
            <summary>Implicit conversion to <see cref="T:System.Version"/>.</summary>
            <param name="version">Firmware version to be converted to <see cref="T:System.Version"/>.</param>
            <seealso cref="M:K4AdotNet.Sensor.FirmwareVersion.ToVersion"/>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_Implicit(System.Version)~K4AdotNet.Sensor.FirmwareVersion">
            <summary>Implicit conversion from <see cref="T:System.Version"/>.</summary>
            <param name="version">Version to be converted to <see cref="T:K4AdotNet.Sensor.FirmwareVersion"/>. Not <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="version"/> cannot be <see langword="null"/>.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.Equals(K4AdotNet.Sensor.FirmwareVersion)">
            <summary>Per-component comparison of versions. Implementation of <see cref="T:System.IEquatable`1"/>.</summary>
            <param name="other">Version to be compared with this one.</param>
            <returns><c>true</c> - versions are the same, <c>false</c> - otherwise.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.Equals(System.Version)">
            <summary>Per-component comparison of versions. Implementation of <see cref="T:System.IEquatable`1"/>.</summary>
            <param name="other">Version to be compared with this one. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if versions are the same, <see langword="false"/> - otherwise.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.Equals(System.Object)">
            <summary>Per-component comparison of versions.</summary>
            <param name="obj">Object to be compared with this one.</param>
            <returns><see langword="true"/> - if <paramref name="obj"/> is not <see langword="null"/> and it is version and versions are equal, <see langword="false"/> - otherwise.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_Equality(K4AdotNet.Sensor.FirmwareVersion,K4AdotNet.Sensor.FirmwareVersion)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Sensor.FirmwareVersion.Equals(K4AdotNet.Sensor.FirmwareVersion)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> equals to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Sensor.FirmwareVersion.Equals(K4AdotNet.Sensor.FirmwareVersion)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_Inequality(K4AdotNet.Sensor.FirmwareVersion,K4AdotNet.Sensor.FirmwareVersion)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Sensor.FirmwareVersion.Equals(K4AdotNet.Sensor.FirmwareVersion)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Sensor.FirmwareVersion.Equals(K4AdotNet.Sensor.FirmwareVersion)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_Equality(K4AdotNet.Sensor.FirmwareVersion,System.Version)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Sensor.FirmwareVersion.Equals(System.Version)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> equals to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Sensor.FirmwareVersion.Equals(System.Version)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_Inequality(K4AdotNet.Sensor.FirmwareVersion,System.Version)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Sensor.FirmwareVersion.Equals(System.Version)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Sensor.FirmwareVersion.Equals(System.Version)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_Equality(System.Version,K4AdotNet.Sensor.FirmwareVersion)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Sensor.FirmwareVersion.Equals(System.Version)"/>.</summary>
            <param name="left">Left part of operator. Can be <see langword="null"/>.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> equals to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Sensor.FirmwareVersion.Equals(System.Version)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_Inequality(System.Version,K4AdotNet.Sensor.FirmwareVersion)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Sensor.FirmwareVersion.Equals(System.Version)"/>.</summary>
            <param name="left">Left part of operator. Can be <see langword="null"/>.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Sensor.FirmwareVersion.Equals(System.Version)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.GetHashCode">
            <summary>Calculates hash code.</summary>
            <returns>Hash code. Consistent with overridden equality.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.CompareTo(K4AdotNet.Sensor.FirmwareVersion)">
            <summary>Versions comparison. Implementation of <see cref="T:System.IComparable`1"/>.</summary>
            <param name="other">Other version to be compared with this one.</param>
            <returns>
            <c>1</c> - <paramref name="other"/> is less than this one,
            <c>0</c> - <paramref name="other"/> equals this one,
            <c>-1</c> - <paramref name="other"/> is greater than this one.
            </returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.CompareTo(System.Version)">
            <summary>Versions comparison. Implementation of <see cref="T:System.IComparable`1"/>.</summary>
            <param name="other">Other version to be compared with this one. Can be <see langword="null"/>.</param>
            <returns>
            <c>1</c> - <paramref name="other"/> is less than this one or is <see langword="null"/>,
            <c>0</c> - <paramref name="other"/> equals this one,
            <c>-1</c> - <paramref name="other"/> is less than this one.
            </returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.CompareTo(System.Object)">
            <summary>Versions comparison. Implementation of <see cref="T:System.IComparable`1"/>.</summary>
            <param name="obj">Other version to be compared with this one. Can be <see langword="null"/>.</param>
            <returns>
            <c>1</c> - <paramref name="obj"/> is greater than this one or is <see langword="null"/>,
            <c>0</c> - <paramref name="obj"/> equals this one,
            <c>-1</c> - <paramref name="obj"/> is less than this one.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not comparable with this one.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_LessThan(K4AdotNet.Sensor.FirmwareVersion,K4AdotNet.Sensor.FirmwareVersion)">
            <summary>Versions comparison.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_LessThanOrEqual(K4AdotNet.Sensor.FirmwareVersion,K4AdotNet.Sensor.FirmwareVersion)">
            <summary>Versions comparison.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or is equal to <paramref name="right"/>.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_GreaterThan(K4AdotNet.Sensor.FirmwareVersion,K4AdotNet.Sensor.FirmwareVersion)">
            <summary>Versions comparison.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_GreaterThanOrEqual(K4AdotNet.Sensor.FirmwareVersion,K4AdotNet.Sensor.FirmwareVersion)">
            <summary>Versions comparison.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or is equal to <paramref name="right"/>.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_LessThan(K4AdotNet.Sensor.FirmwareVersion,System.Version)">
            <summary>Versions comparison.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_LessThanOrEqual(K4AdotNet.Sensor.FirmwareVersion,System.Version)">
            <summary>Versions comparison.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or is equal to <paramref name="right"/>.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_GreaterThan(K4AdotNet.Sensor.FirmwareVersion,System.Version)">
            <summary>Versions comparison.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/> or <paramref name="right"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_GreaterThanOrEqual(K4AdotNet.Sensor.FirmwareVersion,System.Version)">
            <summary>Versions comparison.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or is equal to <paramref name="right"/> or <paramref name="right"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_LessThan(System.Version,K4AdotNet.Sensor.FirmwareVersion)">
            <summary>Versions comparison.</summary>
            <param name="left">Left part of operator. Can be <see langword="null"/>..</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/> or <paramref name="left"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_LessThanOrEqual(System.Version,K4AdotNet.Sensor.FirmwareVersion)">
            <summary>Versions comparison.</summary>
            <param name="left">Left part of operator. Can be <see langword="null"/>..</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or is equal to <paramref name="right"/> or <paramref name="left"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_GreaterThan(System.Version,K4AdotNet.Sensor.FirmwareVersion)">
            <summary>Versions comparison.</summary>
            <param name="left">Left part of operator. Can be <see langword="null"/>..</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.op_GreaterThanOrEqual(System.Version,K4AdotNet.Sensor.FirmwareVersion)">
            <summary>Versions comparison.</summary>
            <param name="left">Left part of operator. Can be <see langword="null"/>..</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or is equal to <paramref name="right"/>.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.ToString(System.String,System.IFormatProvider)">
            <summary>String representation of version formatted using the specified format and provider.</summary>
            <param name="format">The format to use or <see langword="null"/> for default format.</param>
            <param name="formatProvider">The provider to use to format the value or <see langword="null"/> to obtain the numeric format information from the current locale setting.</param>
            <returns><c>{Major}.{Minor}.{Revision}</c></returns>
        </member>
        <member name="M:K4AdotNet.Sensor.FirmwareVersion.ToString">
            <summary>String representation of version.</summary>
            <returns><c>{Major}.{Minor}.{Revision}</c></returns>
        </member>
        <member name="T:K4AdotNet.Sensor.FrameRate">
            <summary>Color and depth sensor frame rate.</summary>
            <remarks><para>
            This enumeration is used to select the desired frame rate to operate the cameras. The actual
            frame rate may vary slightly due to dropped data, synchronization variation between devices,
            clock accuracy, or if the camera exposure priority mode causes reduced frame rate.
            </para><para>
            Use extension methods from <see cref="T:K4AdotNet.Sensor.FrameRates"/> class for additional details.
            </para></remarks>
            <seealso cref="T:K4AdotNet.Sensor.FrameRates"/>
        </member>
        <member name="F:K4AdotNet.Sensor.FrameRate.Five">
            <summary>Five (5) frames per second.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.FrameRate.Fifteen">
            <summary>Fifteen (15) frames per second.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.FrameRate.Thirty">
            <summary>Thirty (30) frames per second.</summary>
        </member>
        <member name="T:K4AdotNet.Sensor.FrameRates">
            <summary>Extensions to <see cref="T:K4AdotNet.Sensor.FrameRate"/> enumeration. Adds some metadata and capabilities to <see cref="T:K4AdotNet.Sensor.FrameRate"/> enumeration.</summary>
            <seealso cref="T:K4AdotNet.Sensor.FrameRate"/>
        </member>
        <member name="F:K4AdotNet.Sensor.FrameRates.All">
            <summary>
            All possible <see cref="T:K4AdotNet.Sensor.FrameRate"/>s.
            May be helpful for UI, tests, etc.
            </summary>
        </member>
        <member name="M:K4AdotNet.Sensor.FrameRates.ToNumberHz(K4AdotNet.Sensor.FrameRate)">
            <summary>Converts enumeration value to appropriate number of frames per second (Hz).</summary>
            <param name="frameRate">Enumeration element to be converted to Hz number.</param>
            <returns>Appropriate nominal number of frames per second (Hz).</returns>
            <remarks>
            The actual frame rate of camera may vary slightly due to dropped data, synchronization variation between devices, clock accuracy.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Unknown value of <paramref name="frameRate"/>.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.FrameRates.FromNumberHz(System.Int32)">
            <summary>Creates enumeration value from appropriate number of frames per second (Hz).</summary>
            <param name="frameRateHz">Frame rate as number in Hz.</param>
            <returns>Appropriate enumeration element.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Value of <paramref name="frameRateHz"/> is not supported.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.FrameRates.IsCompatibleWith(K4AdotNet.Sensor.FrameRate,K4AdotNet.Sensor.DepthMode)">
            <summary>Checks compatibility of a given frame rate with particular depth mode.</summary>
            <param name="frameRate">Frame rate under test.</param>
            <param name="depthMode">Depth mode to be checked for compatibility with <paramref name="frameRate"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="depthMode"/> can be used in combination with <paramref name="frameRate"/>,
            <see langword="false"/> - otherwise.
            </returns>
            <remarks>
            For details see:
            https://docs.microsoft.com/en-us/azure/Kinect-dk/hardware-specification#depth-camera-supported-operating-modes
            </remarks>
            <seealso cref="M:K4AdotNet.Sensor.DepthModes.IsCompatibleWith(K4AdotNet.Sensor.DepthMode,K4AdotNet.Sensor.FrameRate)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.FrameRates.IsCompatibleWith(K4AdotNet.Sensor.FrameRate,K4AdotNet.Sensor.ColorResolution)">
            <summary>Checks compatibility of a given frame rate with particular resolution of color camera.</summary>
            <param name="frameRate">Frame rate under test.</param>
            <param name="colorResolution">Color camera resolution to be checked for compatibility with <paramref name="frameRate"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="colorResolution"/> can be used in combination with <paramref name="frameRate"/>,
            <see langword="false"/> - otherwise.
            </returns>
            <remarks>
            For details see:
            https://docs.microsoft.com/en-us/azure/Kinect-dk/hardware-specification#color-camera-supported-operating-modes
            </remarks>
            <seealso cref="M:K4AdotNet.Sensor.ColorResolutions.IsCompatibleWith(K4AdotNet.Sensor.ColorResolution,K4AdotNet.Sensor.FrameRate)"/>
        </member>
        <member name="T:K4AdotNet.Sensor.HardwareVersion">
            <summary>Structure to define hardware version.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.HardwareVersion.ColorCameraFirmwareVersion">
            <summary>Color camera firmware version.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.HardwareVersion.DepthCamereFirmwareVersion">
            <summary>Depth camera firmware version.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.HardwareVersion.AudioDeviceFirmwareVersion">
            <summary>Audio device firmware version.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.HardwareVersion.DepthSensorFirmwareVersion">
            <summary>Depth sensor firmware version.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.HardwareVersion.FirmwareBuild">
            <summary>Build type reported by the firmware.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.HardwareVersion.FirmwareSignature">
            <summary>Signature type of the firmware.</summary>
        </member>
        <member name="T:K4AdotNet.Sensor.Image">
            <summary>An Azure Kinect image referencing its buffer and metadata.</summary>
            <remarks><para>
            Is used for color images, IR images, depth maps, body index maps, 3D point clouds.
            </para></remarks>
            <seealso cref="T:K4AdotNet.Sensor.ImageFormat"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.#ctor(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32)">
            <summary>Creates new image with specified format and size in pixels.</summary>
            <param name="format">Format of image. Must be format with known stride: <see cref="M:K4AdotNet.Sensor.ImageFormats.StrideBytes(K4AdotNet.Sensor.ImageFormat,System.Int32)"/>.</param>
            <param name="widthPixels">Width of image in pixels. Must be positive.</param>
            <param name="heightPixels">Height of image in pixels. Must be positive.</param>
            <remarks>
            This version of constructor can be used only for <paramref name="format"/> with known dependency between image width in pixels and stride in bytes
            and cannot be used for other formats. For details see <see cref="M:K4AdotNet.Sensor.ImageFormats.StrideBytes(K4AdotNet.Sensor.ImageFormat,System.Int32)"/>.
            For other formats use <see cref="M:K4AdotNet.Sensor.Image.#ctor(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32)"/> or <see cref="M:K4AdotNet.Sensor.Image.#ctor(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,System.Int32)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="widthPixels"/> or <paramref name="heightPixels"/> is equal to or less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Image stride in bytes cannot be automatically calculated from <paramref name="widthPixels"/> for specified <paramref name="format"/>.
            </exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.#ctor(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32)">
            <summary>Creates new image with specified format, size in pixels and stride in bytes.</summary>
            <param name="format">Format of image. Cannot be <see cref="F:K4AdotNet.Sensor.ImageFormat.ColorMjpg"/>.</param>
            <param name="widthPixels">Width of image in pixels. Must be positive.</param>
            <param name="heightPixels">Height of image in pixels. Must be positive.</param>
            <param name="strideBytes">Image stride in bytes (the number of bytes per horizontal line of the image). Must be positive.</param>
            <remarks>
            Don't use this method to create image with unknown/unspecified stride (like <see cref="F:K4AdotNet.Sensor.ImageFormat.ColorMjpg"/> and <see cref="F:K4AdotNet.Sensor.ImageFormat.Custom"/>).
            For such formats, size of image in bytes must be specified to create image: <see cref="M:K4AdotNet.Sensor.Image.#ctor(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,System.Int32)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="widthPixels"/> or <paramref name="heightPixels"/> is equal to or less than zero
            or <paramref name="strideBytes"/> is less than zero or <paramref name="strideBytes"/> is too small for specified <paramref name="format"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="strideBytes"/> is equal to zero. In this case size of image in bytes must be specified to create image.
            </exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.#ctor(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates new image with specified format, size in pixels and stride in bytes.</summary>
            <param name="format">Format of image.</param>
            <param name="widthPixels">Width of image in pixels. Must be positive.</param>
            <param name="heightPixels">Height of image in pixels. Must be positive.</param>
            <param name="strideBytes">Image stride in bytes (the number of bytes per horizontal line of the image). Must be non-negative. Zero value can be used for <see cref="F:K4AdotNet.Sensor.ImageFormat.ColorMjpg"/> and <see cref="F:K4AdotNet.Sensor.ImageFormat.Custom"/>.</param>
            <param name="sizeBytes">Size of image buffer in size. Non negative. Cannot be less than size calculated from image parameters.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="widthPixels"/> or <paramref name="heightPixels"/> is equal to or less than zero
            or <paramref name="strideBytes"/> is less than zero or <paramref name="strideBytes"/> is too small for specified <paramref name="format"/>
            or <paramref name="sizeBytes"/> is less than zero or <paramref name="sizeBytes"/> is less than size calculated from <paramref name="heightPixels"/> and <paramref name="strideBytes"/>.
            </exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.CreateFromArray``1(``0[],K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32)">
            <summary>Creates new image for specified underlying buffer with specified format and size in pixels.</summary>
            <typeparam name="T">Type of array elements in underlying buffer. Must be value type.</typeparam>
            <param name="buffer">Underlying buffer for image. Cannot be <see langword="null"/>. Object will pin and keep reference to this array during all lifetime.</param>
            <param name="format">Format of image. Must be format with known stride: <see cref="M:K4AdotNet.Sensor.ImageFormats.StrideBytes(K4AdotNet.Sensor.ImageFormat,System.Int32)"/>.</param>
            <param name="widthPixels">Width of image in pixels. Must be positive.</param>
            <param name="heightPixels">Height of image in pixels. Must be positive.</param>
            <returns>Created image. Not <see langword="null"/>.</returns>
            <remarks><para>
            This version of method can be used only for <paramref name="format"/> with known dependency between image width in pixels and stride in bytes
            and cannot be used for other formats. For details see <see cref="M:K4AdotNet.Sensor.ImageFormats.StrideBytes(K4AdotNet.Sensor.ImageFormat,System.Int32)"/>.
            For other formats use <see cref="M:K4AdotNet.Sensor.Image.CreateFromArray``1(``0[],K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32)"/>.
            </para><para>
            <see cref="P:K4AdotNet.Sensor.Image.Buffer"/> points to pinned array <paramref name="buffer"/> for such images.
            </para></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="widthPixels"/> or <paramref name="heightPixels"/> is equal to or less than zero
            or <paramref name="buffer"/> array is too small for specified image parameters.
            </exception>
            <exception cref="T:System.ArgumentException">
            Image stride in bytes cannot be automatically calculated from <paramref name="widthPixels"/> for specified <paramref name="format"/>.
            </exception>
            <seealso cref="M:K4AdotNet.Sensor.ImageFormats.StrideBytes(K4AdotNet.Sensor.ImageFormat,System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.CreateFromArray``1(``0[],K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32)">
            <summary>Creates new image for specified underlying buffer with specified format and size in pixels.</summary>
            <typeparam name="T">Type of array elements in underlying buffer. Must be value type.</typeparam>
            <param name="buffer">Underlying buffer for image. Cannot be <see langword="null"/>. Object will pin and keep reference to this array during all lifetime.</param>
            <param name="format">Format of image.</param>
            <param name="widthPixels">Width of image in pixels. Must be positive.</param>
            <param name="heightPixels">Height of image in pixels. Must be positive.</param>
            <param name="strideBytes">Image stride in bytes (the number of bytes per horizontal line of the image). Must be non-negative. Zero value can be used for <see cref="F:K4AdotNet.Sensor.ImageFormat.ColorMjpg"/> and <see cref="F:K4AdotNet.Sensor.ImageFormat.Custom"/>.</param>        /// <returns>Created image. Not <see langword="null"/>.</returns>
            <remarks><para>
            <see cref="P:K4AdotNet.Sensor.Image.Buffer"/> points to pinned array <paramref name="buffer"/> for such images.
            </para></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="widthPixels"/> or <paramref name="heightPixels"/> is equal to or less than zero
            or <paramref name="strideBytes"/> is less than zero or <paramref name="strideBytes"/> is too small for specified <paramref name="format"/>
            or <paramref name="buffer"/> array is too small for specified image parameters.
            </exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.CreateFromMemory``1(System.Buffers.IMemoryOwner{``0},K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32)">
            <summary>Creates new image for specified underlying memory owner with specified format and size in pixels.</summary>
            <typeparam name="T">Type of elements in underlying memory buffer. Must be value type.</typeparam>
            <param name="memoryOwner">Memory owner of underlying buffer. Cannot be <see langword="null"/>. Object will pin and keep reference to this array during all lifetime.</param>
            <param name="format">Format of image. Must be format with known stride: <see cref="M:K4AdotNet.Sensor.ImageFormats.StrideBytes(K4AdotNet.Sensor.ImageFormat,System.Int32)"/>.</param>
            <param name="widthPixels">Width of image in pixels. Must be positive.</param>
            <param name="heightPixels">Height of image in pixels. Must be positive.</param>
            <returns>Created image. Not <see langword="null"/>.</returns>
            <remarks><para>
            This version of method can be used only for <paramref name="format"/> with known dependency between image width in pixels and stride in bytes
            and cannot be used for other formats. For details see <see cref="M:K4AdotNet.Sensor.ImageFormats.StrideBytes(K4AdotNet.Sensor.ImageFormat,System.Int32)"/>.
            For other formats use <see cref="M:K4AdotNet.Sensor.Image.CreateFromArray``1(``0[],K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32)"/>.
            </para><para>
            <see cref="P:K4AdotNet.Sensor.Image.Buffer"/> points to pinned memory of <paramref name="memoryOwner"/>.
            </para></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="widthPixels"/> or <paramref name="heightPixels"/> is equal to or less than zero
            or memory of <paramref name="memoryOwner"/> is too small for specified image parameters.
            </exception>
            <exception cref="T:System.ArgumentException">
            Image stride in bytes cannot be automatically calculated from <paramref name="widthPixels"/> for specified <paramref name="format"/>.
            </exception>
            <seealso cref="M:K4AdotNet.Sensor.ImageFormats.StrideBytes(K4AdotNet.Sensor.ImageFormat,System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.CreateFromMemory``1(System.Buffers.IMemoryOwner{``0},K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32)">
            <summary>Creates new image for specified underlying memory owner with specified format and size in pixels.</summary>
            <typeparam name="T">Type of elements in underlying memory buffer. Must be value type.</typeparam>
            <param name="memoryOwner">Memory owner of underlying buffer. Cannot be <see langword="null"/>. Object will pin and keep reference to this array during all lifetime.</param>
            <param name="format">Format of image.</param>
            <param name="widthPixels">Width of image in pixels. Must be positive.</param>
            <param name="heightPixels">Height of image in pixels. Must be positive.</param>
            <param name="strideBytes">Image stride in bytes (the number of bytes per horizontal line of the image). Must be non-negative. Zero value can be used for <see cref="F:K4AdotNet.Sensor.ImageFormat.ColorMjpg"/> and <see cref="F:K4AdotNet.Sensor.ImageFormat.Custom"/>.</param>        /// <returns>Created image. Not <see langword="null"/>.</returns>
            <remarks><para>
            <see cref="P:K4AdotNet.Sensor.Image.Buffer"/> points to pinned memory of <paramref name="memoryOwner"/>.
            </para></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="widthPixels"/> or <paramref name="heightPixels"/> is equal to or less than zero
            or <paramref name="strideBytes"/> is less than zero or <paramref name="strideBytes"/> is too small for specified <paramref name="format"/>
            or memory of <paramref name="memoryOwner"/> is too small for specified image parameters.
            </exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.Dispose">
            <summary>
            Call this method to free unmanaged resources associated with current instance.
            </summary>
            <remarks><para>
            Under the hood, reference counter is decremented on this call. When the references reach zero the unmanaged resources are destroyed.
            (Multiple objects of <see cref="T:K4AdotNet.Sensor.Image"/> can reference one and the same image. For details see <see cref="M:K4AdotNet.Sensor.Image.DuplicateReference"/>.)
            </para><para>
            Can be called multiple times but event <see cref="E:K4AdotNet.Sensor.Image.Disposed"/> will be raised only once.
            </para></remarks>
            <seealso cref="E:K4AdotNet.Sensor.Image.Disposed"/>
            <seealso cref="P:K4AdotNet.Sensor.Image.IsDisposed"/>
            <seealso cref="M:K4AdotNet.Sensor.Image.DuplicateReference"/>
        </member>
        <member name="P:K4AdotNet.Sensor.Image.IsDisposed">
            <summary>Gets a value indicating whether the image has been disposed of.</summary>
            <seealso cref="M:K4AdotNet.Sensor.Image.Dispose"/>
        </member>
        <member name="E:K4AdotNet.Sensor.Image.Disposed">
            <summary>Raised on object disposing (only once).</summary>
            <seealso cref="M:K4AdotNet.Sensor.Image.Dispose"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.DuplicateReference">
            <summary>Creates new reference to the same unmanaged image object.</summary>
            <returns>New object that references exactly to the same underlying unmanaged object as original one. Not <see langword="null"/>.</returns>
            <remarks>It helps to manage underlying object lifetime and to access image data from different threads and different components of application.</remarks>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
            <seealso cref="M:K4AdotNet.Sensor.Image.Dispose"/>
        </member>
        <member name="P:K4AdotNet.Sensor.Image.Buffer">
            <summary>Get the image buffer.</summary>
            <remarks>Use this buffer to access the raw image data.</remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.GetSpan``1">
            <summary>Access to the underlying memory buffer via span.</summary>
            <typeparam name="T">Unmanaged type that is going to use for memory access.</typeparam>
            <returns>Span view to the underlying memory buffer.</returns>
        </member>
        <member name="P:K4AdotNet.Sensor.Image.SizeBytes">
            <summary>Get the image buffer size in bytes.</summary>
            <remarks>Use this function to know what the size of the image buffer is returned by <see cref="P:K4AdotNet.Sensor.Image.Buffer"/>.</remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="P:K4AdotNet.Sensor.Image.Format">
            <summary>Get the format of the image.</summary>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="P:K4AdotNet.Sensor.Image.WidthPixels">
            <summary>Get the image width in pixels.</summary>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="P:K4AdotNet.Sensor.Image.HeightPixels">
            <summary>Get the image height in pixels.</summary>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="P:K4AdotNet.Sensor.Image.StrideBytes">
            <summary>Get the image stride in bytes (the number of bytes per horizontal line of the image).</summary>
            <remarks>Can be zero for compressed formats with unknown stride like MJPEG.</remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="P:K4AdotNet.Sensor.Image.Timestamp">
            <summary>Deprecated in version 1.2 of Sensor SDK. Please use <see cref="P:K4AdotNet.Sensor.Image.DeviceTimestamp"/> property instead of this one.</summary>
        </member>
        <member name="P:K4AdotNet.Sensor.Image.DeviceTimestamp">
            <summary>Get and set the image's device timestamp.</summary>
            <remarks><para>
            Returns the device timestamp of the image, as captured by the hardware. Timestamps are recorded by the device and
            represent the mid-point of exposure. They may be used for relative comparison, but their absolute value has no
            defined meaning.
            </para><para>
            <see cref="T:K4AdotNet.Microseconds64"/> supports implicit conversion to/from <see cref="T:System.TimeSpan"/>.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
            <seealso cref="P:K4AdotNet.Sensor.Image.SystemTimestamp"/>
        </member>
        <member name="P:K4AdotNet.Sensor.Image.SystemTimestamp">
            <summary>Get and set the image's system timestamp.</summary>
            <remarks><para>
            Returns the system timestamp of the image. Timestamps are recorded by the host. They may be used for relative
            comparison, as they are relative to the corresponding system clock.The absolute value is a monotonic count from
            an arbitrary point in the past.
            </para><para>
            The system timestamp is captured at the moment host PC finishes receiving the image.
            </para><para>
            On Linux the system timestamp is read from <c>clock_gettime(CLOCK_MONOTONIC)</c>, which measures realtime and is not
            impacted by adjustments to the system clock.It starts from an arbitrary point in the past. On Windows the system
            timestamp is read from <c>QueryPerformanceCounter()</c>, it also measures realtime and is not impacted by adjustments to the
            system clock. It also starts from an arbitrary point in the past.
            </para><para>
            <see cref="T:K4AdotNet.Nanoseconds64"/> supports implicit conversion to/from <see cref="T:System.TimeSpan"/>.
            </para></remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
            <seealso cref="P:K4AdotNet.Sensor.Image.DeviceTimestamp"/>
        </member>
        <member name="P:K4AdotNet.Sensor.Image.Exposure">
            <summary>Get and set the image exposure time. This is only supported on color image formats.</summary>
            <remarks>
            <see cref="T:K4AdotNet.Microseconds64"/> supports implicit conversion to/from <see cref="T:System.TimeSpan"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="P:K4AdotNet.Sensor.Image.WhiteBalance">
            <summary>Get and set the image white balance in degrees Kelvin. This is only supported on color image formats.</summary>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="P:K4AdotNet.Sensor.Image.IsoSpeed">
            <summary>Get and set the image ISO speed. This is only supported on color image formats.</summary>
            <exception cref="T:System.ObjectDisposedException">This property cannot be called for disposed objects.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.CopyTo(System.Byte[])">
            <summary>Copies image data from <see cref="P:K4AdotNet.Sensor.Image.Buffer"/> to <paramref name="dst"/> array.</summary>
            <param name="dst">Destination array for image data. Cannot be <see langword="null"/>. Must be long enough (see <see cref="P:K4AdotNet.Sensor.Image.SizeBytes"/>).</param>
            <returns>Number of copied array elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dst"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="dst"/> array is too small.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.CopyTo(System.Int16[])">
            <summary>Copies image data from <see cref="P:K4AdotNet.Sensor.Image.Buffer"/> to <paramref name="dst"/> array.</summary>
            <param name="dst">Destination array for image data. Cannot be <see langword="null"/>. Must be long enough (see <see cref="P:K4AdotNet.Sensor.Image.SizeBytes"/>).</param>
            <returns>Number of copied array elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dst"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="dst"/> array is too small.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.CopyTo(System.Single[])">
            <summary>Copies image data from <see cref="P:K4AdotNet.Sensor.Image.Buffer"/> to <paramref name="dst"/> array.</summary>
            <param name="dst">Destination array for image data. Cannot be <see langword="null"/>. Must be long enough (see <see cref="P:K4AdotNet.Sensor.Image.SizeBytes"/>).</param>
            <returns>Number of copied array elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dst"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="dst"/> array is too small.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.CopyTo(System.Int32[])">
            <summary>Copies image data from <see cref="P:K4AdotNet.Sensor.Image.Buffer"/> to <paramref name="dst"/> array.</summary>
            <param name="dst">Destination array for image data. Cannot be <see langword="null"/>. Must be long enough (see <see cref="P:K4AdotNet.Sensor.Image.SizeBytes"/>).</param>
            <returns>Number of copied array elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dst"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="dst"/> array is too small.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.FillFrom(System.Byte[])">
            <summary>Fills data in image buffer from specified managed array.</summary>
            <param name="src">Array with raw image data. Cannot be <see langword="null"/>. Must have appropriate length (see <see cref="P:K4AdotNet.Sensor.Image.SizeBytes"/>).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="src"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="src"/> array does not match size of image buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.FillFrom(System.Int16[])">
            <summary>Fills data in image buffer from specified managed array.</summary>
            <param name="src">Array with raw image data. Cannot be <see langword="null"/>. Must have appropriate length (see <see cref="P:K4AdotNet.Sensor.Image.SizeBytes"/>).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="src"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="src"/> array does not match size of image buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.FillFrom(System.Single[])">
            <summary>Fills data in image buffer from specified managed array.</summary>
            <param name="src">Array with raw image data. Cannot be <see langword="null"/>. Must have appropriate length (see <see cref="P:K4AdotNet.Sensor.Image.SizeBytes"/>).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="src"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="src"/> array does not match size of image buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.FillFrom(System.Int32[])">
            <summary>Fills data in image buffer from specified managed array.</summary>
            <param name="src">Array with raw image data. Cannot be <see langword="null"/>. Must have appropriate length (see <see cref="P:K4AdotNet.Sensor.Image.SizeBytes"/>).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="src"/> cannot be <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="src"/> array does not match size of image buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed objects.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.ToHandle(K4AdotNet.Sensor.Image)">
            <summary>Extracts handle from <paramref name="image"/>.</summary>
            <param name="image">Managed object. Can be <see langword="null"/>.</param>
            <returns>Appropriate unmanaged handle. Can be <see cref="F:K4AdotNet.NativeHandles.ImageHandle.Zero"/>.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.Equals(K4AdotNet.Sensor.Image)">
            <summary>Two images are equal when they reference to one and the same unmanaged object.</summary>
            <param name="image">Another image to be compared with this one. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if both images reference to one and the same unmanaged object.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.Equals(System.Object)">
            <summary>Two images are equal when they reference to one and the same unmanaged object.</summary>
            <param name="obj">Some object to be compared with this one. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is also <see cref="T:K4AdotNet.Sensor.Image"/> and they both reference to one and the same unmanaged object.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.GetHashCode">
            <summary>Uses underlying handle as hash code.</summary>
            <returns>Hash code. Consistent with overridden equality.</returns>
            <seealso cref="M:K4AdotNet.Sensor.Image.Equals(K4AdotNet.Sensor.Image)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.op_Equality(K4AdotNet.Sensor.Image,K4AdotNet.Sensor.Image)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Sensor.Image.Equals(K4AdotNet.Sensor.Image)"/>.</summary>
            <param name="left">Left part of operator. Can be <see langword="null"/>.</param>
            <param name="right">Right part of operator. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> equals to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Sensor.Image.Equals(K4AdotNet.Sensor.Image)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.op_Inequality(K4AdotNet.Sensor.Image,K4AdotNet.Sensor.Image)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Sensor.Image.Equals(K4AdotNet.Sensor.Image)"/>.</summary>
            <param name="left">Left part of operator. Can be <see langword="null"/>.</param>
            <param name="right">Right part of operator. Can be <see langword="null"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Sensor.Image.Equals(K4AdotNet.Sensor.Image)"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Image.ToString">
            <summary>Convenient (for debugging needs, first of all) string representation of object as an address of unmanaged object in memory.</summary>
            <returns><c>{HandleTypeName}#{Address}</c></returns>
        </member>
        <member name="T:K4AdotNet.Sensor.ImageFormat">
            <summary>Image format type.</summary>
            <remarks>Helpful extension methods for this enumeration type can be found in <see cref="T:K4AdotNet.Sensor.ImageFormats"/>.</remarks>
            <seealso cref="T:K4AdotNet.Sensor.ImageFormats"/>
        </member>
        <member name="F:K4AdotNet.Sensor.ImageFormat.ColorMjpg">
            <summary>
            The buffer for each image is encoded as a JPEG and can be decoded by a JPEG decoder.
            </summary>
            <remarks>
            Because the image is compressed, the stride parameter is not applicable.
            Each MJPG encoded image in a stream may be of differing size depending on the compression efficiency.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ImageFormat.ColorNV12">
            <summary>
            NV12 images separate the luminance and chroma data such that all the luminance is at the
            beginning of the buffer, and the chroma lines follow immediately after.
            </summary>
            <remarks>
            Stride indicates the length of each line in bytes and should be used to determine the start location of each line
            of the image in memory. Chroma has half as many lines of height and half the width in pixels of the luminance.
            Each chroma line has the same width in bytes as a luminance line.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ImageFormat.ColorYUY2">
            <summary>
            YUY2 stores chroma and luminance data in interleaved pixels.
            </summary>
            <remarks>
            Stride indicates the length of each line in bytes and should be used to determine the start location of each
            line of the image in memory.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ImageFormat.ColorBgra32">
             <summary>
             Each pixel of BGRA32 data is four bytes. The first three bytes represent Blue, Green,
             and Red data. The fourth byte is the alpha channel and is unused in the Azure Kinect APIs.
             </summary>
             <remarks>
             Stride indicates the length of each line in bytes and should be used to determine the start location of each
             line of the image in memory.
            
             The Azure Kinect device does not natively capture in this format. Requesting images of this format
             requires additional computation in the API.
             </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ImageFormat.Depth16">
            <summary>
            Each pixel of DEPTH16 data is two bytes of little endian unsigned depth data. The unit of the data is in
            millimeters from the origin of the camera.
            </summary>
            <remarks>
            Stride indicates the length of each line in bytes and should be used to determine the start location of each
            line of the image in memory.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ImageFormat.IR16">
            <summary>
            This format represents infrared light and is captured by the depth camera.
            Each pixel of IR16 data is two bytes of little endian unsigned depth data. The value of the data represents
            brightness.
            </summary>
            <remarks>
            Stride indicates the length of each line in bytes and should be used to determine the start location of each
            line of the image in memory.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ImageFormat.Custom8">
            <summary>Each pixel is a single channel one byte of unsigned data.</summary>
            <remarks>
            Stride indicates the length of each line in bytes and should be used to determine the start location of each
            line of the image in memory.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ImageFormat.Custom16">
            <summary>Each pixel is a single channel two bytes of little endian unsigned data.</summary>
            <remarks>
            Stride indicates the length of each line in bytes and should be used to determine the start location of each
            line of the image in memory.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.ImageFormat.Custom">
            <summary>
            Custom image format.
            Used in conjunction with user created images or images packing non-standard data.
            </summary>
            <remarks>
            See the originator of the custom formatted image for information on how to interpret the data.
            </remarks>
        </member>
        <member name="T:K4AdotNet.Sensor.ImageFormats">
            <summary>Extensions to <see cref="T:K4AdotNet.Sensor.ImageFormat"/> enumeration. Adds some metadata to <see cref="T:K4AdotNet.Sensor.ImageFormat"/> enumeration.</summary>
            <seealso cref="T:K4AdotNet.Sensor.ImageFormat"/>
        </member>
        <member name="F:K4AdotNet.Sensor.ImageFormats.All">
            <summary>All usable <see cref="T:K4AdotNet.Sensor.ImageFormat"/>s. May be helpful for UI, tests, etc.</summary>
        </member>
        <member name="M:K4AdotNet.Sensor.ImageFormats.IsColor(K4AdotNet.Sensor.ImageFormat)">
            <summary>Is this format usable for color images?</summary>
            <param name="imageFormat">Image format to be tested.</param>
            <returns><see langword="true"/> if image format is suitable for color images, <see langword="false"/> - otherwise.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.ImageFormats.IsDepth(K4AdotNet.Sensor.ImageFormat)">
            <summary>Is this format a depth map?</summary>
            <param name="imageFormat">Image format to be tested.</param>
            <returns><see langword="true"/> if image format is a depth map, <see langword="false"/> - otherwise.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.ImageFormats.HasKnownBytesPerPixel(K4AdotNet.Sensor.ImageFormat)">
            <summary>Does this image format have known (predefined) bytes per pixel?</summary>
            <param name="imageFormat">Image format to be tested.</param>
            <returns><see langword="true"/> if bytes-per-pixel is known for specified <paramref name="imageFormat"/>, <see langword="false"/> - otherwise.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.ImageFormats.BytesPerPixel(K4AdotNet.Sensor.ImageFormat)">
            <summary>How many bytes are used for one pixel?</summary>
            <param name="imageFormat">Image format.</param>
            <returns>How many bytes are used for one pixel.</returns>
            <exception cref="T:System.ArgumentException">Bytes-per-pixel is unknown/undefined for specified <paramref name="imageFormat"/>.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.ImageFormats.StrideBytes(K4AdotNet.Sensor.ImageFormat,System.Int32)">
            <summary>Calculates default image stride from image <paramref name="widthPixels"/> for specified <paramref name="imageFormat"/>.</summary>
            <param name="imageFormat">Format of image. Not all formats have predefined formula for stride based on image width. Moreover, some formats do not have stride at all.</param>
            <param name="widthPixels">Width of image in pixels. Non-negative.</param>
            <returns>Default value for image stride (the number of bytes per horizontal line of the image).</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="widthPixels"/> cannot be less than zero.</exception>
            <exception cref="T:System.ArgumentException">Cannot determine image stride in bytes from <paramref name="widthPixels"/> for specified <paramref name="imageFormat"/>.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.ImageFormats.ImageSizeBytes(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32)">
            <summary>Calculate image data size in bytes.</summary>
            <param name="imageFormat">Image format. Any format can be used if <paramref name="strideBytes"/> is not null.</param>
            <param name="strideBytes">Image stride in bytes. Must be positive number. Cannot be zero.</param>
            <param name="heightPixels">Image height in pixel. Non-negative.</param>
            <returns>Calculated image data size in bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="strideBytes"/> or <paramref name="strideBytes"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            If image has unknown stride that is <paramref name="strideBytes"/> equals zero.
            </exception>
        </member>
        <member name="T:K4AdotNet.Sensor.ImuSample">
            <summary>Inertial measurement unit (IMU) sample. That is, data from accelerometer and gyro sensors.</summary>
            <seealso cref="M:K4AdotNet.Sensor.Device.GetImuSample"/>
            <seealso cref="M:K4AdotNet.Sensor.Device.TryGetImuSample(K4AdotNet.Sensor.ImuSample@,K4AdotNet.Timeout)"/>
        </member>
        <member name="F:K4AdotNet.Sensor.ImuSample.Temperature">
            <summary>Temperature reading of this sample (Celsius).</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.ImuSample.AccelerometerSample">
            <summary>Accelerometer sample in meters per second squared.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.ImuSample.AccelerometerTimestamp">
            <summary>Time stamp of the accelerometer.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.ImuSample.GyroSample">
            <summary>Gyro sample in radians per second.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.ImuSample.GyroTimestamp">
            <summary>Time stamp of the gyroscope in microseconds.</summary>
        </member>
        <member name="T:K4AdotNet.Sensor.NativeApi">
            <summary>DLL imports for most of native functions from <c>k4a.h</c> header file.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.NativeApi.DEFAULT_DEVICE_INDEX">
            <summary>Default device index.</summary>
            <remarks>Passed as an argument to <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)"/> to open the default sensor.</remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.DeviceGetInstalledCount">
            <summary>Gets the number of connected devices.</summary>
            <returns>Number of sensors connected to the PC.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)">
            <summary>Open an Azure Kinect device.</summary>
            <param name="index">The index of the device to open, starting with 0. Use <see cref="F:K4AdotNet.Sensor.NativeApi.DEFAULT_DEVICE_INDEX"/> constant as value for this parameter to open default device.</param>
            <param name="deviceHandle">Output parameter which on success will return a handle to the device.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if the device was opened successfully.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.DeviceGetCapture(K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.NativeHandles.CaptureHandle@,K4AdotNet.Timeout)">
            <summary>Reads a sensor capture.</summary>
            <param name="deviceHandle">Handle obtained by <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)"/>.</param>
            <param name="captureHandle">If successful this contains a handle to a capture object.</param>
            <param name="timeout">
            Specifies the time the function should block waiting for the capture.
            If set to <see cref="F:K4AdotNet.Timeout.NoWait"/>, the function will return without blocking.
            Passing <see cref="F:K4AdotNet.Timeout.Infinite"/> will block indefinitely until data is available, the
            device is disconnected, or another error occurs.
            </param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.WaitResult.Succeeded"/> if a capture is returned.
            If a capture is not available before the timeout elapses, the function will return <see cref="F:K4AdotNet.NativeCallResults.WaitResult.Timeout"/>.
            All other failures will return <see cref="F:K4AdotNet.NativeCallResults.WaitResult.Failed"/>.
            </returns>
            <remarks>
            This function needs to be called while the device is in a running state;
            after <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceStartCameras(K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DeviceConfiguration@)"/> is called and before <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceStopCameras(K4AdotNet.NativeHandles.DeviceHandle)"/> is called.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.DeviceGetImuSample(K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.ImuSample@,K4AdotNet.Timeout)">
            <summary>Reads an IMU sample.</summary>
            <param name="deviceHandle">Handle obtained by <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)"/>.</param>
            <param name="imuSample">Information about IMU sample.</param>
            <param name="timeout">
            Specifies the time the function should block waiting for the sample.
            If set to <see cref="F:K4AdotNet.Timeout.NoWait"/>, the function will return without blocking.
            Passing <see cref="F:K4AdotNet.Timeout.Infinite"/> will block indefinitely until data is available, the
            device is disconnected, or another error occurs.
            </param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.WaitResult.Succeeded"/> if a sample is returned.
            If a sample is not available before the timeout elapses, the function will return <see cref="F:K4AdotNet.NativeCallResults.WaitResult.Timeout"/>.
            All other failures will return <see cref="F:K4AdotNet.NativeCallResults.WaitResult.Failed"/>.
            </returns>
            <remarks>
            This function needs to be called while the device is in a running state;
            after <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceStartCameras(K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DeviceConfiguration@)"/> is called and before <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceStopCameras(K4AdotNet.NativeHandles.DeviceHandle)"/> is called.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.CaptureCreate(K4AdotNet.NativeHandles.CaptureHandle@)">
            <summary>Create an empty capture object.</summary>
            <param name="captureHandle">Output parameter which on success will return a handle to the capture.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if the device was opened successfully.</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.CaptureGetColorImage(K4AdotNet.NativeHandles.CaptureHandle)">
            <summary>Get the color image associated with the given capture.</summary>
            <param name="captureHandle">Capture handle containing the image.</param>
            <returns>Image handle.</returns>
            <remarks>Call this function to access the color image part of this capture.</remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.CaptureGetDepthImage(K4AdotNet.NativeHandles.CaptureHandle)">
            <summary>Get the depth image associated with the given capture.</summary>
            <param name="captureHandle">Capture handle containing the image.</param>
            <returns>Image handle.</returns>
            <remarks>Call this function to access the depth image part of this capture.</remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.CaptureGetIRImage(K4AdotNet.NativeHandles.CaptureHandle)">
            <summary>Get the IR image associated with the given capture.</summary>
            <param name="captureHandle">Capture handle containing the image.</param>
            <returns>Image handle.</returns>
            <remarks>Call this function to access the IR image part of this capture.</remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.CaptureSetColorImage(K4AdotNet.NativeHandles.CaptureHandle,K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Set or add a color image to the associated capture.</summary>
            <param name="captureHandle">Capture handle to hold the image.</param>
            <param name="imageHandle">Image handle containing the image or <see cref="F:K4AdotNet.NativeHandles.ImageHandle.Zero"/> to remove color image from a given capture if any.</param>
            <remarks>If there is already a color image contained in the capture, the existing image will be dereferenced and replaced with the new image.</remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.CaptureSetDepthImage(K4AdotNet.NativeHandles.CaptureHandle,K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Set or add a depth image to the associated capture.</summary>
            <param name="captureHandle">Capture handle to hold the image.</param>
            <param name="imageHandle">Image handle containing the image or <see cref="F:K4AdotNet.NativeHandles.ImageHandle.Zero"/> to remove depth image from a given capture if any.</param>
            <remarks>If there is already a depth image contained in the capture, the existing image will be dereferenced and replaced with the new image.</remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.CaptureSetIRImage(K4AdotNet.NativeHandles.CaptureHandle,K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Set or add a IR image to the associated capture.</summary>
            <param name="captureHandle">Capture handle to hold the image.</param>
            <param name="imageHandle">Image handle containing the image or <see cref="F:K4AdotNet.NativeHandles.ImageHandle.Zero"/> to remove IR image from a given capture if any.</param>
            <remarks>If there is already a IR image contained in the capture, the existing image will be dereferenced and replaced with the new image.</remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.CaptureSetTemperatureC(K4AdotNet.NativeHandles.CaptureHandle,System.Single)">
            <summary>Set the temperature associated with the capture.</summary>
            <param name="captureHandle">Capture handle to set the temperature on.</param>
            <param name="temperatureC">Temperature in Celsius to store.</param>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.CaptureGetTemperatureC(K4AdotNet.NativeHandles.CaptureHandle)">
            <summary>Get the temperature associated with the capture.</summary>
            <param name="captureHandle">Capture handle to retrieve the temperature from.</param>
            <returns>
            This function returns the temperature of the device at the time of the capture in Celsius.
            If the temperature is unavailable, the function will return <see cref="F:System.Single.NaN"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageCreate(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,K4AdotNet.NativeHandles.ImageHandle@)">
            <summary>
            Create an image.
            </summary>
            <param name="format">The format of the image that will be stored in this image container.</param>
            <param name="widthPixels">Width in pixels.</param>
            <param name="heightPixels">Height in pixels.</param>
            <param name="strideBytes">
            The number of bytes per horizontal line of the image.
            If set to 0, the stride will be set to the minimum size given the <paramref name="format"/> and <paramref name="widthPixels"/>.
            </param>
            <param name="imageHandle">Handle of created image in case of success.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> on success.</returns>
            <remarks>This function is used to create images of formats that have consistent stride.
            The function is not suitable for compressed formats that may not be represented by the same number of bytes per line.
            
            For most image formats, the function will allocate an image buffer of size <paramref name="heightPixels"/> * <paramref name="strideBytes"/>.
            Buffers <see cref="F:K4AdotNet.Sensor.ImageFormat.ColorNV12"/> format will allocate an additional <paramref name="heightPixels"/> / 2 set of lines (each of
            <paramref name="strideBytes"/>).
            
            This function cannot be used to allocate <see cref="F:K4AdotNet.Sensor.ImageFormat.ColorMjpg"/> buffers.
            
            To create an image object without the API allocating memory, or to represent an image that has a non-deterministic
            stride, use <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreateFromBuffer(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,System.IntPtr,System.UIntPtr,K4AdotNet.Sensor.NativeApi.MemoryDestroyCallback,System.IntPtr,K4AdotNet.NativeHandles.ImageHandle@)"/>.
            </remarks>
        </member>
        <member name="T:K4AdotNet.Sensor.NativeApi.MemoryDestroyCallback">
            <summary>Callback function for a memory object being destroyed.</summary>
            <param name="buffer">The buffer pointer that was supplied by the caller.</param>
            <param name="context">The context for the memory object that needs to be destroyed that was supplied by the caller.</param>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageCreateFromBuffer(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,System.IntPtr,System.UIntPtr,K4AdotNet.Sensor.NativeApi.MemoryDestroyCallback,System.IntPtr,K4AdotNet.NativeHandles.ImageHandle@)">
            <summary>Create an image from a pre-allocated buffer.</summary>
            <param name="format">The format of the image that will be stored in this image container.</param>
            <param name="widthPixels">Width in pixels.</param>
            <param name="heightPixels">Height in pixels.</param>
            <param name="strideBytes">The number of bytes per horizontal line of the image.</param>
            <param name="buffer">Pointer to a pre-allocated image buffer.</param>
            <param name="bufferSize">Size in bytes of the pre-allocated image buffer.</param>
            <param name="bufferReleaseCallback">
            Callback to the buffer free function, called when all references to the buffer have been released.
            This parameter is optional (can be <see langword="null"/>).</param>
            <param name="bufferReleaseCallbackContext">
            Context for the buffer free function. This value will be called as 2nd parameter to <paramref name="bufferReleaseCallback"/>
            when the callback is invoked.
            </param>
            <param name="imageHandle">Handle of created image in case of success.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> on success.</returns>
            <remarks>
            This function creates an <see cref="T:K4AdotNet.NativeHandles.ImageHandle"/> from a pre-allocated buffer. When all references to this object reach zero
            the provided <paramref name="bufferReleaseCallback"/> callback function is called so that the memory can be released.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageGetBuffer(K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Get the image buffer.</summary>
            <param name="imageHandle">Handle of the image for which the get operation is performed on.</param>
            <returns>
            The function will return <see cref="F:System.IntPtr.Zero"/> if there is an error, and will normally return a pointer to the image buffer.
            </returns>
            <remarks>Use this buffer to access the raw image data.</remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageGetSize(K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Get the image buffer size.</summary>
            <param name="imageHandle">Handle of the image for which the get operation is performed on.</param>
            <returns>The function will return <see cref="F:System.UIntPtr.Zero"/> if there is an error, and will normally return the image size.</returns>
            <remarks>Use this function to know what the size of the image buffer is returned by <see cref="M:K4AdotNet.Sensor.NativeApi.ImageGetBuffer(K4AdotNet.NativeHandles.ImageHandle)"/>.</remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageGetFormat(K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Get the format of the image.</summary>
            <param name="imageHandle">Handle of the image for which the get operation is performed on.</param>
            <returns>
            This function is not expected to fail, all images are created with a known format.
            If the <paramref name="imageHandle"/> is invalid, the function will return <see cref="F:K4AdotNet.Sensor.ImageFormat.Custom"/>.
            </returns>
            <remarks>Use this function to determine the format of the image buffer.</remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageGetWidthPixels(K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Get the image width in pixels.</summary>
            <param name="imageHandle">Handle of the image for which the get operation is performed on.</param>
            <returns>
            This function is not expected to fail, all images are created with a known width.
            If the <paramref name="imageHandle"/> is invalid, the function will return <c>0</c>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageGetHeightPixels(K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Get the image height in pixels.</summary>
            <param name="imageHandle">Handle of the image for which the get operation is performed on.</param>
            <returns>
            This function is not expected to fail, all images are created with a known height.
            If the <paramref name="imageHandle"/> is invalid, the function will return <c>0</c>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageGetStrideBytes(K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Get the image stride in bytes.</summary>
            <param name="imageHandle">Handle of the image for which the get operation is performed on.</param>
            <returns>
            This function is not expected to fail, all images are created with a known stride.
            If the <paramref name="imageHandle"/> is invalid or the image's format does not have a stride, the function will return <c>0</c>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageGetDeviceTimestamp(K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Get the image's device timestamp in microseconds.</summary>
            <param name="imageHandle">Handle of the image for which the get operation is performed on.</param>
            <returns>
            If the <paramref name="imageHandle"/> is invalid or if no timestamp was set for the image, this function will return <see cref="F:K4AdotNet.Microseconds64.Zero"/>.
            It is also possible for <see cref="F:K4AdotNet.Microseconds64.Zero"/> to be a valid timestamp originating from the beginning of a recording or the start of streaming.
            </returns>
            <remarks>
            Returns the device timestamp of the image, as captured by the hardware.Timestamps are recorded by the device and
            represent the mid-point of exposure.They may be used for relative comparison, but their absolute value has no
            defined meaning.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageGetSystemTimestamp(K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Get the image's system timestamp in nanoseconds.</summary>
            <param name="imageHandle">Handle of the image for which the get operation is performed on.</param>
            <returns>
            If the <paramref name="imageHandle"/> is invalid or if no timestamp was set for the image, this function will return <see cref="F:K4AdotNet.Nanoseconds64.Zero"/>.
            It is also possible for <see cref="F:K4AdotNet.Nanoseconds64.Zero"/> to be a valid timestamp originating from the beginning of a recording or the start of streaming.
            </returns>
            <remarks>
            Returns the system timestamp of the image. Timestamps are recorded by the host. They may be used for relative
            comparison, as they are relative to the corresponding system clock.The absolute value is a monotonic count from
            an arbitrary point in the past.
            
            The system timestamp is captured at the moment host PC finishes receiving the image.
            
            On Linux the system timestamp is read from <c>clock_gettime(CLOCK_MONOTONIC)</c>, which measures realtime and is not
            impacted by adjustments to the system clock.It starts from an arbitrary point in the past. On Windows the system
            timestamp is read from <c>QueryPerformanceCounter()</c>, it also measures realtime and is not impacted by adjustments to the
            system clock. It also starts from an arbitrary point in the past.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageGetExposure(K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Get the image exposure in microseconds.</summary>
            <param name="imageHandle">Handle of the image for which the get operation is performed on.</param>
            <returns>
            If the <paramref name="imageHandle"/> is invalid or if no exposure was set for the image,
            this function will return <see cref="F:K4AdotNet.Microseconds64.Zero"/>. Otherwise,
            it will return the image exposure time in microseconds.
            </returns>
            <remarks>Returns an exposure time in microseconds. This is only supported on color image formats.</remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageGetWhiteBalance(K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Get the image white balance.</summary>
            <param name="imageHandle">Handle of the image for which the get operation is performed on.</param>
            <returns>
            Returns the image white balance in Kelvin. If <paramref name="imageHandle"/> is invalid, or the white balance was not set or
            not applicable to the image, the function will return <c>0</c>.
            </returns>
            <remarks>Returns the image's white balance. This function is only valid for color captures, and not for depth or IR captures.</remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageGetIsoSpeed(K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Get the image ISO speed.</summary>
            <param name="imageHandle">Handle of the image for which the get operation is performed on.</param>
            <returns>
            Returns the ISO speed of the image. <c>0</c> indicates the ISO speed was not available or an error occurred.
            </returns>
            <remarks>This function is only valid for color captures, and not for depth or IR captures.</remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageSetDeviceTimestamp(K4AdotNet.NativeHandles.ImageHandle,K4AdotNet.Microseconds64)">
            <summary>Set the device time stamp, in microseconds, of the image.</summary>
            <param name="imageHandle">Handle of the image to set the timestamp on.</param>
            <param name="timestamp">Time stamp of the image.</param>
            <remarks>
            Use this function in conjunction with <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreate(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,K4AdotNet.NativeHandles.ImageHandle@)"/>
            or <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreateFromBuffer(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,System.IntPtr,System.UIntPtr,K4AdotNet.Sensor.NativeApi.MemoryDestroyCallback,System.IntPtr,K4AdotNet.NativeHandles.ImageHandle@)"/> to construct an image.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageSetSystemTimestamp(K4AdotNet.NativeHandles.ImageHandle,K4AdotNet.Nanoseconds64)">
            <summary>Set the system time stamp, in nanoseconds, of the image.</summary>
            <param name="imageHandle">Handle of the image to set the timestamp on.</param>
            <param name="timestamp">Time stamp of the image.</param>
            <remarks>
            Use this function in conjunction with <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreate(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,K4AdotNet.NativeHandles.ImageHandle@)"/>
            or <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreateFromBuffer(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,System.IntPtr,System.UIntPtr,K4AdotNet.Sensor.NativeApi.MemoryDestroyCallback,System.IntPtr,K4AdotNet.NativeHandles.ImageHandle@)"/> to construct an image.
            
            The system timestamp is a high performance and increasing clock (from boot). The timestamp represents the time
            immediately after the image buffer was read by the host PC.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageSetExposure(K4AdotNet.NativeHandles.ImageHandle,K4AdotNet.Microseconds64)">
            <summary>Set the exposure time, in microseconds, of the image.</summary>
            <param name="imageHandle">Handle of the image to set the exposure time on.</param>
            <param name="exposure">Exposure time of the image in microseconds.</param>
            <remarks>
            Use this function in conjunction with <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreate(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,K4AdotNet.NativeHandles.ImageHandle@)"/>
            or <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreateFromBuffer(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,System.IntPtr,System.UIntPtr,K4AdotNet.Sensor.NativeApi.MemoryDestroyCallback,System.IntPtr,K4AdotNet.NativeHandles.ImageHandle@)"/> to construct an image.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageSetWhiteBalance(K4AdotNet.NativeHandles.ImageHandle,System.UInt32)">
            <summary>Set the white balance of the image.</summary>
            <param name="imageHandle">Handle of the image to set the white balance on.</param>
            <param name="whiteBalance">White balance of the image in degrees Kelvin.</param>
            <remarks>
            Use this function in conjunction with <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreate(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,K4AdotNet.NativeHandles.ImageHandle@)"/>
            or <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreateFromBuffer(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,System.IntPtr,System.UIntPtr,K4AdotNet.Sensor.NativeApi.MemoryDestroyCallback,System.IntPtr,K4AdotNet.NativeHandles.ImageHandle@)"/> to construct an image.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.ImageSetIsoSpeed(K4AdotNet.NativeHandles.ImageHandle,System.UInt32)">
            <summary>Set the ISO speed of the image.</summary>
            <param name="imageHandle">Handle of the image to set the ISO speed on.</param>
            <param name="isoSpeed">ISO speed of the image.</param>
            <remarks>
            Use this function in conjunction with <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreate(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,K4AdotNet.NativeHandles.ImageHandle@)"/>
            or <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreateFromBuffer(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,System.IntPtr,System.UIntPtr,K4AdotNet.Sensor.NativeApi.MemoryDestroyCallback,System.IntPtr,K4AdotNet.NativeHandles.ImageHandle@)"/> to construct an image.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.DeviceStartCameras(K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DeviceConfiguration@)">
            <summary>Starts color and depth camera capture.</summary>
            <param name="deviceHandle">Handle obtained by <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)"/>.</param>
            <param name="config">The configuration we want to run the device in. This can be initialized with <see cref="F:K4AdotNet.Sensor.DeviceConfiguration.DisableAll"/>.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> is returned on success.</returns>
            <remarks>
            Individual sensors configured to run will now start to stream captured data.
            
            It is not valid to call this method a second time on the same device until <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceStopCameras(K4AdotNet.NativeHandles.DeviceHandle)"/> has been called.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.DeviceStopCameras(K4AdotNet.NativeHandles.DeviceHandle)">
            <summary>Stops the color and depth camera capture.</summary>
            <param name="deviceHandle">Handle obtained by <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)"/>.</param>
            <remarks>
            The streaming of individual sensors stops as a result of this call. Once called, <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceStartCameras(K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DeviceConfiguration@)"/>
            may be called again to resume sensor streaming.
            
            This function may be called while another thread is blocking in <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceGetCapture(K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.NativeHandles.CaptureHandle@,K4AdotNet.Timeout)"/>.
            Calling this function while another thread is in that function will result in that function returning a failure.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.DeviceStartImu(K4AdotNet.NativeHandles.DeviceHandle)">
            <summary>Starts the IMU sample stream.</summary>
            <param name="deviceHandle">Handle obtained by <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)"/>.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> is returned on success.</returns>
            <remarks>
            Call this API to start streaming IMU data. It is not valid to call this function a second time on the same
            device until <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceStopImu(K4AdotNet.NativeHandles.DeviceHandle)"/> has been called.
            
            This function is dependent on the state of the cameras. The color or depth camera must be started before the IMU.
            <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> will be returned if one of the cameras is not running.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.DeviceStopImu(K4AdotNet.NativeHandles.DeviceHandle)">
            <summary>Stops the IMU capture.</summary>
            <param name="deviceHandle">Handle obtained by <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)"/>.</param>
            <remarks>
            The streaming of the IMU stops as a result of this call. Once called, <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceStartImu(K4AdotNet.NativeHandles.DeviceHandle)"/> may
            be called again to resume sensor streaming, so long as the cameras are running.
            
            This function may be called while another thread is blocking in <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceGetImuSample(K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.ImuSample@,K4AdotNet.Timeout)"/>.
            Calling this function while another thread is in that function will result in that function returning a failure.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.DeviceGetSerialnum(K4AdotNet.NativeHandles.DeviceHandle,System.Byte[],System.UIntPtr@)">
            <summary>Get the Azure Kinect device serial number.</summary>
            <param name="deviceHandle">Handle obtained by <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)"/>.</param>
            <param name="serialNumber">
            Location to write the serial number to. If the function returns <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Succeeded"/>,
            this will be a NULL-terminated string of ASCII characters.
            If this input is <see langword="null"/>, <paramref name="serialNumberSize"/> will still be updated to return
            the size of the buffer needed to store the string.
            </param>
            <param name="serialNumberSize">
            On input, the size of the <paramref name="serialNumber"/> buffer if that pointer is not <see langword="null"/>.
            On output, this value is set to the actual number of bytes in the serial number (including the null terminator).
            </param>
            <returns>
            A return of <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Succeeded"/> means that the <paramref name="serialNumber"/> has been filled in.
            If the buffer is too small the function returns <see cref="F:K4AdotNet.NativeCallResults.BufferResult.TooSmall"/> and the size of the serial number is
            returned in the <paramref name="serialNumberSize"/> parameter.
            All other failures return <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Failed"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.DeviceGetVersion(K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.HardwareVersion@)">
            <summary>Get the version numbers of the device's subsystems.</summary>
            <param name="deviceHandle">Handle obtained by <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)"/>.</param>
            <param name="version">Output parameter which on success will return version info.</param>
            <returns>
            A return of <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> means that the version structure has been filled in.
            All other failures return <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.DeviceGetColorControlCapabilities(K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.ColorControlCommand,System.Boolean@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,K4AdotNet.Sensor.ColorControlMode@)">
            <summary>Get the Azure Kinect color sensor control capabilities.</summary>
            <param name="deviceHandle">Handle obtained by <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)"/>.</param>
            <param name="command">Color sensor control command.</param>
            <param name="supportsAuto">Output: whether the color sensor's control support auto mode or not. <see langword="true"/> if it supports auto mode, otherwise <see langword="false"/>.</param>
            <param name="minValue">Output: the color sensor's control minimum value of <paramref name="command"/>.</param>
            <param name="maxValue">Output: the color sensor's control maximum value of <paramref name="command"/>.</param>
            <param name="stepValue">Output: the color sensor's control step value of <paramref name="command"/>.</param>
            <param name="defaultValue">Output: the color sensor's control default value of <paramref name="command"/>.</param>
            <param name="defaultMode">Output: the color sensor's control default mode of <paramref name="command"/>.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if the value was successfully returned, <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> if an error occurred</returns>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.DeviceGetColorControl(K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.ColorControlCommand,K4AdotNet.Sensor.ColorControlMode@,System.Int32@)">
            <summary>Get the Azure Kinect color sensor control value.</summary>
            <param name="deviceHandle">Handle obtained by <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)"/>.</param>
            <param name="command">Color sensor control command.</param>
            <param name="mode">This mode represents whether the command is in automatic or manual mode.</param>
            <param name="value">This value is always written, but is only valid when the <paramref name="mode"/> returned is <see cref="F:K4AdotNet.Sensor.ColorControlMode.Manual"/> for the current <paramref name="command"/>.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if the value was successfully returned, <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> if an error occurred.</returns>
            <remarks>
            Each control command may be set to manual or automatic. See the definition of <see cref="T:K4AdotNet.Sensor.ColorControlCommand"/> on
            how to interpret the <paramref name="value"/> for each command.
            
            Some control commands are only supported in manual mode. When a command is in automatic mode, the <paramref name="value"/> for
            that command is not valid.
            
            Control values set on a device are reset only when the device is power cycled. The device will retain the
            settings even if the <paramref name="deviceHandle"/> is closed or the application is restarted.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.DeviceSetColorControl(K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.ColorControlCommand,K4AdotNet.Sensor.ColorControlMode,System.Int32)">
            <summary>Set the Azure Kinect color sensor control value.</summary>
            <param name="deviceHandle">Handle obtained by <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)"/>.</param>
            <param name="command">Color sensor control command.</param>
            <param name="mode">Color sensor control mode to set. This mode represents whether the command is in automatic or manual mode.</param>
            <param name="value">
            Value to set the color sensor's control to. The value is only valid if <paramref name="mode"/>
            is set to <see cref="F:K4AdotNet.Sensor.ColorControlMode.Manual"/>, and is otherwise ignored.
            </param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if the value was successfully set, <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> if an error occurred</returns>
            <remarks>
            Each control command may be set to manual or automatic. See the definition of <see cref="T:K4AdotNet.Sensor.ColorControlCommand"/> on how
            to interpret the <paramref name="value"/> for each command.
            
            Some control commands are only supported in manual mode. When a command is in automatic mode, the <paramref name="value"/> for that
            command is not valid.
            
            Control values set on a device are reset only when the device is power cycled. The device will retain the settings
            even if the device is closed or the application is restarted.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.DeviceGetRawCalibration(K4AdotNet.NativeHandles.DeviceHandle,System.Byte[],System.UIntPtr@)">
            <summary>Get the raw calibration blob for the entire Azure Kinect device.</summary>
            <param name="deviceHandle">Handle obtained by <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)"/>.</param>
            <param name="data">
            Location to write the calibration data to. This field may optionally be set to <see langword="null"/> for the caller to query for
            the needed data size.
            </param>
            <param name="dataSize">
            On passing <paramref name="dataSize"/> into the function this variable represents the available size of the <paramref name="data"/>
            buffer. On return this variable is updated with the amount of data actually written to the buffer, or the size
            required to store the calibration buffer if <paramref name="data"/> is <see langword="null"/>.
            </param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.BufferResult.Succeeded"/> if <paramref name="data"/> was successfully written.
            If <paramref name="dataSize"/> points to a buffer size that is
            too small to hold the output or <paramref name="data"/> data is <see langword="null"/>, <see cref="F:K4AdotNet.NativeCallResults.BufferResult.TooSmall"/> is returned
            and <paramref name="dataSize"/> is updated to contain the minimum buffer size needed to capture the calibration data.
            </returns>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.DeviceGetCalibration(K4AdotNet.NativeHandles.DeviceHandle,K4AdotNet.Sensor.DepthMode,K4AdotNet.Sensor.ColorResolution,K4AdotNet.Sensor.Calibration@)">
            <summary>Get the camera calibration for the entire Azure Kinect device.</summary>
            <param name="deviceHandle">Handle obtained by <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)"/>.</param>
            <param name="depthMode">Mode in which depth camera is operated.</param>
            <param name="colorResolution">Resolution in which color camera is operated.</param>
            <param name="calibration">Output: calibration data.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if <paramref name="calibration"/> was successfully written. <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> otherwise.</returns>
            <remarks>
            The <paramref name="calibration"/> represents the data needed to transform between the camera views and may be
            different for each operating <paramref name="depthMode"/> and <paramref name="colorResolution"/> the device is configured to operate in.
            
            The <paramref name="calibration"/> output is used as input to all calibration and transformation functions.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.DeviceGetSyncJack(K4AdotNet.NativeHandles.DeviceHandle,System.Boolean@,System.Boolean@)">
            <summary>Get the device jack status for the synchronization in and synchronization out connectors.</summary>
            <param name="deviceHandle">Handle obtained by <see cref="M:K4AdotNet.Sensor.NativeApi.DeviceOpen(System.UInt32,K4AdotNet.NativeHandles.DeviceHandle@)"/>.</param>
            <param name="syncInJackConnected">Upon successful return this value will be set to true if a cable is connected to this sync in jack.</param>
            <param name="syncOutJackConnected">Upon successful return this value will be set to true if a cable is connected to this sync out jack.</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if the connector status was successfully read.</returns>
            <remarks>
            If <paramref name="syncOutJackConnected"/> is <see langword="true"/> then <see cref="F:K4AdotNet.Sensor.DeviceConfiguration.WiredSyncMode"/> mode can be set to
            <see cref="F:K4AdotNet.Sensor.WiredSyncMode.Standalone"/> or <see cref="F:K4AdotNet.Sensor.WiredSyncMode.Master"/>. If <paramref name="syncInJackConnected"/> is <see langword="true"/> then
            <see cref="F:K4AdotNet.Sensor.DeviceConfiguration.WiredSyncMode"/> mode can be set to <see cref="F:K4AdotNet.Sensor.WiredSyncMode.Standalone"/> or <see cref="F:K4AdotNet.Sensor.WiredSyncMode.Subordinate"/>.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.CalibrationGetFromRaw(System.Byte[],System.UIntPtr,K4AdotNet.Sensor.DepthMode,K4AdotNet.Sensor.ColorResolution,K4AdotNet.Sensor.Calibration@)">
            <summary>Get the camera calibration for a device from a raw calibration blob.</summary>
            <param name="rawCalibration">Raw calibration blob obtained from a device or recording. The raw calibration must be NULL terminated.</param>
            <param name="rawCalibrationSize">The size, in bytes, of <paramref name="rawCalibration"/> including the NULL termination.</param>
            <param name="depthMode">Mode in which depth camera is operated.</param>
            <param name="colorResolution">Resolution in which color camera is operated.</param>
            <param name="calibration">Result: calibration data</param>
            <returns><see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if <paramref name="calibration"/> was successfully written. <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> otherwise.</returns>
            <remarks>
            The <paramref name="calibration"/> represents the data needed to transform between the camera views and is
            different for each operating <paramref name="depthMode"/> and <paramref name="colorResolution"/> the device is configured to operate in.
            
            The <paramref name="calibration"/> output is used as input to all transformation functions.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.Calibration3DTo3D(K4AdotNet.Sensor.Calibration@,K4AdotNet.Float3@,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Float3@)">
            <summary>Transform a 3D point of a source coordinate system into a 3D point of the target coordinate system.</summary>
            <param name="calibration">Camera calibration data.</param>
            <param name="sourcePoint3DMm">The 3D coordinates in millimeters representing a point in <paramref name="sourceCamera"/>.</param>
            <param name="sourceCamera">The current camera.</param>
            <param name="targetCamera">The target camera.</param>
            <param name="targetPoint3DMm">Output: the new 3D coordinates of the input point in the coordinate space <paramref name="targetCamera"/> in millimeters.</param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if <paramref name="targetPoint3DMm"/> was successfully written.
            <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> if <paramref name="calibration"/> contained invalid transformation parameters.
            </returns>
            <remarks>
            This function is used to transform 3D points between depth and color camera coordinate systems. The function uses the
            extrinsic camera calibration. It computes the output via multiplication with a precomputed matrix encoding a 3D
            rotation and a 3D translation. If <paramref name="sourceCamera"/> and <paramref name="targetCamera"/> are the same, then <paramref name="targetPoint3DMm"/> will
            be identical to <paramref name="sourcePoint3DMm"/>.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.Calibration2DTo3D(K4AdotNet.Sensor.Calibration@,K4AdotNet.Float2@,System.Single,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Float3@,System.Boolean@)">
            <summary>
            Transform a 2D pixel coordinate with an associated depth value of the source camera
            into a 3D point of the target coordinate system.
            </summary>
            <param name="calibration">Camera calibration data.</param>
            <param name="sourcePoint2D">The 2D pixel in <paramref name="sourceCamera"/> coordinates.</param>
            <param name="sourceDepthMm">
            The depth of <paramref name="sourcePoint2D"/> in millimeters.
            One way to derive the depth value in the color camera geometry is to
            use the function <see cref="M:K4AdotNet.Sensor.NativeApi.TransformationDepthImageToColorCamera(K4AdotNet.NativeHandles.TransformationHandle,K4AdotNet.NativeHandles.ImageHandle,K4AdotNet.NativeHandles.ImageHandle)"/>.
            </param>
            <param name="sourceCamera">The current camera.</param>
            <param name="targetCamera">The target camera.</param>
            <param name="targetPoint3DMm">Output: the 3D coordinates of the input pixel in the coordinate system of <paramref name="targetCamera"/> in millimeters.</param>
            <param name="valid">
            The output parameter returns a value of <see langword="true"/> if the <paramref name="sourcePoint2D"/> is a valid coordinate,
            and will return <see langword="false"/> if the coordinate is not valid in the calibration model.
            </param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if <paramref name="targetPoint3DMm"/> was successfully written.
            <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> if <paramref name="calibration"/>
            contained invalid transformation parameters.
            If the function returns <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/>, but <paramref name="valid"/> valid is <see langword="false"/>,
            the transformation was computed, but the results in <paramref name="targetPoint3DMm"/> are outside of the range of valid
            calibration and should be ignored.
            </returns>
            <remarks>
            This function applies the intrinsic calibration of <paramref name="sourceCamera"/> to compute the 3D ray from the focal point of the
            camera through pixel <paramref name="sourcePoint2D"/>.The 3D point on this ray is then found using <paramref name="sourceDepthMm"/>. If
            <paramref name="targetCamera"/> is different from <paramref name="sourceCamera"/>, the 3D point is transformed to <paramref name="targetCamera"/> using
            <see cref="M:K4AdotNet.Sensor.NativeApi.Calibration3DTo3D(K4AdotNet.Sensor.Calibration@,K4AdotNet.Float3@,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Float3@)"/>.
            In practice, <paramref name="sourceCamera"/> and <paramref name="targetCamera"/> will often be identical. In this
            case, no 3D to 3D transformation is applied.
            
            If <paramref name="sourcePoint2D"/> is not considered as valid pixel coordinate
            according to the intrinsic camera model, <paramref name="valid"/> is set to <see langword="false"/>.
            If it is valid, <paramref name="valid"/> valid will be set to <see langword="true"/>. The user
            should not use the value of <paramref name="targetPoint3DMm"/> if <paramref name="valid"/> was set to <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.Calibration3DTo2D(K4AdotNet.Sensor.Calibration@,K4AdotNet.Float3@,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Float2@,System.Boolean@)">
            <summary>Transform a 3D point of a source coordinate system into a 2D pixel coordinate of the target camera.</summary>
            <param name="calibration">Camera calibration data.</param>
            <param name="sourcePoint3DMm">The 3D coordinates in millimeters representing a point in <paramref name="sourceCamera"/>.</param>
            <param name="sourceCamera">The current camera.</param>
            <param name="targetCamera">The target camera.</param>
            <param name="targetPoint2D">Output: the 2D pixel in <paramref name="targetCamera"/> coordinates.</param>
            <param name="valid">
            The output parameter returns <see langword="true"/> if the <paramref name="sourcePoint3DMm"/> is a valid coordinate in the <paramref name="targetCamera"/>
            coordinate system, and will return <see langword="false"/> if the coordinate is not valid in the calibration model.
            </param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if <paramref name="targetPoint2D"/> was successfully written.
            <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> if <paramref name="calibration"/> contained invalid transformation parameters.
            If the function returns <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/>, but <paramref name="valid"/> is <see langword="false"/>,
            the transformation was computed, but the results in <paramref name="targetPoint2D"/> are outside of the range of valid calibration
            and should be ignored.
            </returns>
            <remarks>
            If <paramref name="targetCamera"/> is different from <paramref name="sourceCamera"/>, <paramref name="sourcePoint3DMm"/> is transformed
            to <paramref name="targetCamera"/> using <see cref="M:K4AdotNet.Sensor.NativeApi.Calibration3DTo3D(K4AdotNet.Sensor.Calibration@,K4AdotNet.Float3@,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Float3@)"/>.
            In practice, <paramref name="sourceCamera"/> and <paramref name="targetCamera"/> will often be identical.
            In this case, no 3D to 3D transformation is applied. The 3D point in the coordinate system of <paramref name="targetCamera"/> is then
            projected onto the image plane using the intrinsic calibration of <paramref name="targetCamera"/>.
            
            If <paramref name="sourcePoint3DMm"/> does not map to a valid 2D coordinate in the <paramref name="targetCamera"/> coordinate system,
            <paramref name="valid"/> is set to <see langword="false"/>. If it is valid, <paramref name="valid"/> will be set to <see langword="true"/>.
            The user should not use the value of <paramref name="targetPoint2D"/> if <paramref name="valid"/> was set to <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.Calibration2DTo2D(K4AdotNet.Sensor.Calibration@,K4AdotNet.Float2@,System.Single,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Float2@,System.Boolean@)">
            <summary>
            Transform a 2D pixel coordinate with an associated depth value of the source camera into a 2D pixel coordinate of the target camera.
            </summary>
            <param name="calibration">Camera calibration data.</param>
            <param name="sourcePoint2D">The 2D pixel in <paramref name="sourceCamera"/> coordinates.</param>
            <param name="sourceDepthMm">
            The depth of <paramref name="sourcePoint2D"/> in millimeters.
            One way to derive the depth value in the color camera geometry is to
            use the function <see cref="M:K4AdotNet.Sensor.NativeApi.TransformationDepthImageToColorCamera(K4AdotNet.NativeHandles.TransformationHandle,K4AdotNet.NativeHandles.ImageHandle,K4AdotNet.NativeHandles.ImageHandle)"/>.
            </param>
            <param name="sourceCamera">The current camera.</param>
            <param name="targetCamera">The target camera.</param>
            <param name="targetPoint2D">Output: the 2D pixel in <paramref name="targetCamera"/> coordinates.</param>
            <param name="valid">
            The output parameter returns <see langword="true"/> if the <paramref name="sourcePoint2D"/> is a valid coordinate in the <paramref name="targetCamera"/>
            coordinate system, and will return <see langword="false"/> if the coordinate is not valid in the calibration model.
            </param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if <paramref name="targetPoint2D"/> was successfully written.
            <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> if <paramref name="calibration"/> contained invalid transformation parameters.
            If the function returns <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/>, but <paramref name="valid"/> valid is <see langword="false"/>,
            the transformation was computed, but the results in <paramref name="targetPoint2D"/> are outside of the range of valid calibration
            and should be ignored.
            </returns>
            <remarks>
            This function maps a pixel between the coordinate systems of the depth and color cameras. It is equivalent to calling
            <see cref="M:K4AdotNet.Sensor.NativeApi.Calibration2DTo3D(K4AdotNet.Sensor.Calibration@,K4AdotNet.Float2@,System.Single,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Float3@,System.Boolean@)"/> to compute the 3D point corresponding to <paramref name="sourcePoint2D"/> and then using
            <see cref="M:K4AdotNet.Sensor.NativeApi.Calibration3DTo2D(K4AdotNet.Sensor.Calibration@,K4AdotNet.Float3@,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Float2@,System.Boolean@)"/> to map the 3D point into the coordinate system of the <paramref name="targetCamera"/>.
            
            If <paramref name="sourceCamera"/> and <paramref name="targetCamera"/> are identical, the function immediately sets <paramref name="targetPoint2D"/> to
            <paramref name="sourcePoint2D"/> and returns without computing any transformations.
            
            If <paramref name="sourcePoint2D"/> does not map to a valid 2D coordinate in the <paramref name="targetCamera"/> coordinate system,
            <paramref name="valid"/> is set to <see langword="false"/>. If it is valid, <paramref name="valid"/> will be set to <see langword="true"/>.
            The user should not use the value of <paramref name="targetPoint2D"/> if <paramref name="valid"/> was set to 0.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.CalibrationColor2DToDepth2D(K4AdotNet.Sensor.Calibration@,K4AdotNet.Float2@,K4AdotNet.NativeHandles.ImageHandle,K4AdotNet.Float2@,System.Boolean@)">
             <summary>Transform a 2D pixel coordinate from color camera into a 2D pixel coordinate of the depth camera.</summary>
             <param name="calibration">Camera calibration data.</param>
             <param name="sourcePoint2D">The 2D pixel in color camera coordinates.</param>
             <param name="depthImage">Handle to input depth image.</param>
             <param name="targetPoint2D">The 2D pixel in depth camera coordinates.</param>
             <param name="valid">
             The output parameter returns a value of <see langword="true"/> if the <paramref name="sourcePoint2D"/> is a valid coordinate in the depth camera
             coordinate system, and will return <see langword="false"/> if the coordinate is not valid in the calibration model.
             </param>
             <returns>
             <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if <paramref name="targetPoint2D"/> was successfully written.
             <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> if <paramref name="calibration"/> contained invalid transformation parameters.
             If the function returns <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/>, but <paramref name="valid"/> valid is <see langword="false"/>,
             the transformation was computed, but the results in <paramref name="targetPoint2D"/> are outside of the range of valid calibration
             and should be ignored.
             </returns>
             <remarks>
             This function represents an alternative to <see cref="M:K4AdotNet.Sensor.NativeApi.Calibration2DTo2D(K4AdotNet.Sensor.Calibration@,K4AdotNet.Float2@,System.Single,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Float2@,System.Boolean@)"/>
             if the number of pixels that need to be transformed is small. This function searches along an epipolar line in the depth image to find the corresponding
             depth pixel. If a larger number of pixels need to be transformed, it might be computationally cheaper to call
             <see cref="M:K4AdotNet.Sensor.NativeApi.TransformationDepthImageToColorCamera(K4AdotNet.NativeHandles.TransformationHandle,K4AdotNet.NativeHandles.ImageHandle,K4AdotNet.NativeHandles.ImageHandle)"/>
             to get correspondence depth values for these color pixels, then call the function <see cref="M:K4AdotNet.Sensor.NativeApi.Calibration2DTo2D(K4AdotNet.Sensor.Calibration@,K4AdotNet.Float2@,System.Single,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Float2@,System.Boolean@)"/>.
            
             If <paramref name="sourcePoint2D"/> does not map to a valid 2D coordinate in the depth camera coordinate system, <paramref name="valid"/> is set
             to <see langword="false"/>. If it is valid, <paramref name="valid"/> will be set to <see langword="true"/>.
             The user should not use the value of <paramref name="targetPoint2D"/> if <paramref name="valid"/> was set to <see langword="false"/>.
             </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.TransformationCreate(K4AdotNet.Sensor.Calibration@)">
            <summary>Get handle to transformation.</summary>
            <param name="calibration">Camera calibration data.</param>
            <returns>A transformation handle. An invalid handle is returned if creation fails.</returns>
            <remarks>
            The transformation handle is used to transform images from the coordinate system of one camera into the other. Each
            transformation handle requires some pre-computed resources to be allocated, which are retained until the handle is
            destroyed.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.TransformationDepthImageToColorCamera(K4AdotNet.NativeHandles.TransformationHandle,K4AdotNet.NativeHandles.ImageHandle,K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Transforms the depth map into the geometry of the color camera.</summary>
            <param name="transformationHandle">Transformation handle.</param>
            <param name="depthImage">Handle to input depth image.</param>
            <param name="transformedDepthImage">Handle to output transformed depth image.</param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if <paramref name="transformedDepthImage"/> was successfully written
            and <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> otherwise.
            </returns>
            <remarks>
            This produces a depth image for which each pixel matches the corresponding pixel coordinates of the color camera.
            
            <paramref name="depthImage"/> and <paramref name="transformedDepthImage"/> must be of format <see cref="F:K4AdotNet.Sensor.ImageFormat.Depth16"/>.
            
            <paramref name="transformedDepthImage"/> must have a width and height matching the width and height of the color camera in the mode
            specified by the <see cref="T:K4AdotNet.Sensor.Calibration"/> used to create the <paramref name="transformationHandle"/> with <see cref="M:K4AdotNet.Sensor.NativeApi.TransformationCreate(K4AdotNet.Sensor.Calibration@)"/>.
            
            The contents <paramref name="transformedDepthImage"/> will be filled with the depth values derived from <paramref name="depthImage"/> in the color
            camera's coordinate space.
            
            <paramref name="transformedDepthImage"/> should be created by the caller using <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreate(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,K4AdotNet.NativeHandles.ImageHandle@)"/>
            or <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreateFromBuffer(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,System.IntPtr,System.UIntPtr,K4AdotNet.Sensor.NativeApi.MemoryDestroyCallback,System.IntPtr,K4AdotNet.NativeHandles.ImageHandle@)"/>.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.TransformationDepthImageToColorCameraCustom(K4AdotNet.NativeHandles.TransformationHandle,K4AdotNet.NativeHandles.ImageHandle,K4AdotNet.NativeHandles.ImageHandle,K4AdotNet.NativeHandles.ImageHandle,K4AdotNet.NativeHandles.ImageHandle,K4AdotNet.Sensor.TransformationInterpolation,System.Int32)">
            <summary>Transforms depth map and a custom image into the geometry of the color camera.</summary>
            <param name="transformationHandle">Transformation handle.</param>
            <param name="depthImage">Handle to input depth image.</param>
            <param name="customImage">Handle to input custom image.</param>
            <param name="transformedDepthImage">Handle to output transformed depth image.</param>
            <param name="transformedCustomImage">Handle to output transformed custom image.</param>
            <param name="interpolation">
            Parameter that controls how pixels in <paramref name="customImage"/> should be interpolated when transformed to color camera space.
            <see cref="F:K4AdotNet.Sensor.TransformationInterpolation.Linear"/> if linear interpolation should be used.
            <see cref="F:K4AdotNet.Sensor.TransformationInterpolation.Nearest"/> if nearest neighbor interpolation should be used.
            </param>
            <param name="invalidCustomValue">
            Defines the custom image pixel value that should be written to <paramref name="transformedCustomImage"/> in case the corresponding
            depth pixel can not be transformed into the color camera space.
            </param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if <paramref name="transformedDepthImage"/> and <paramref name="transformedCustomImage"/> were successfully written and
            <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> otherwise.
            </returns>
            <remarks>
            This produces a depth image and a corresponding custom image for which each pixel matches the corresponding
            pixel coordinates of the color camera.
            
            <paramref name="depthImage"/> and <paramref name="transformedDepthImage"/> must be of format <see cref="F:K4AdotNet.Sensor.ImageFormat.Depth16"/>.
            
            <paramref name="customImage"/> and <paramref name="transformedCustomImage"/> must be of format <see cref="F:K4AdotNet.Sensor.ImageFormat.Custom8"/> or
            <see cref="F:K4AdotNet.Sensor.ImageFormat.Custom16"/>.
            
            <paramref name="transformedDepthImage"/> and <paramref name="transformedCustomImage"/> must have a width and height matching the width and
            height of the color camera in the mode specified by the <see cref="T:K4AdotNet.Sensor.Calibration"/> used to create the
            <paramref name="transformationHandle"/> with <see cref="M:K4AdotNet.Sensor.NativeApi.TransformationCreate(K4AdotNet.Sensor.Calibration@)"/>.
            
            <paramref name="customImage"/> must have a width and height matching the width and height of <paramref name="depthImage"/>.
            
            The contents <paramref name="transformedDepthImage"/> will be filled with the depth values derived from <paramref name="depthImage"/> in the color
            camera's coordinate space.
            
            The contents <paramref name="transformedCustomImage"/> will be filled with the values derived from <paramref name="customImage"/> in the color
            camera's coordinate space.
            
            Using linear interpolation could create new values to <paramref name="transformedCustomImage"/> which do no exist in <paramref name="customImage"/>.
            Setting <paramref name="interpolation"/> to <see cref="F:K4AdotNet.Sensor.TransformationInterpolation.Nearest"/> will prevent this from happening but will result in less
            smooth image.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.TransformationColorImageToDepthCamera(K4AdotNet.NativeHandles.TransformationHandle,K4AdotNet.NativeHandles.ImageHandle,K4AdotNet.NativeHandles.ImageHandle,K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Transforms a color image into the geometry of the depth camera.</summary>
            <param name="transformationHandle">Transformation handle.</param>
            <param name="depthImage">Handle to input depth image.</param>
            <param name="colorImage">Handle to input color image.</param>
            <param name="transformedColorImage">Handle to output transformed color image.</param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if <paramref name="transformedColorImage"/> was successfully written
            and <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> otherwise.
            </returns>
            <remarks>
            This produces a color image for which each pixel matches the corresponding pixel coordinates of the depth camera.
            
            <paramref name="depthImage"/> and <paramref name="colorImage"/> need to represent the same moment in time. The depth data will be applied to the
            color image to properly warp the color data to the perspective of the depth camera.
            
            <paramref name="depthImage"/> must be of type <see cref="F:K4AdotNet.Sensor.ImageFormat.Depth16"/>. <paramref name="colorImage"/> must be of format
            <see cref="F:K4AdotNet.Sensor.ImageFormat.ColorBgra32"/>.
            
            <paramref name="transformedColorImage"/> image must be of format <see cref="F:K4AdotNet.Sensor.ImageFormat.ColorBgra32"/>. <paramref name="transformedColorImage"/> must
            have the width and height of the depth camera in the mode specified by the <see cref="T:K4AdotNet.Sensor.Calibration"/> used to create
            the <paramref name="transformationHandle"/> with <see cref="M:K4AdotNet.Sensor.NativeApi.TransformationCreate(K4AdotNet.Sensor.Calibration@)"/>.
            
            <paramref name="transformedColorImage"/> should be created by the caller using <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreate(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,K4AdotNet.NativeHandles.ImageHandle@)"/>
            or <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreateFromBuffer(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,System.IntPtr,System.UIntPtr,K4AdotNet.Sensor.NativeApi.MemoryDestroyCallback,System.IntPtr,K4AdotNet.NativeHandles.ImageHandle@)"/>.
            </remarks>
        </member>
        <member name="M:K4AdotNet.Sensor.NativeApi.TransformationDepthImageToPointCloud(K4AdotNet.NativeHandles.TransformationHandle,K4AdotNet.NativeHandles.ImageHandle,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.NativeHandles.ImageHandle)">
            <summary>Transforms the depth image into 3 planar images representing X, Y and Z-coordinates of corresponding 3D points.</summary>
            <param name="transformationHandle">Transformation handle.</param>
            <param name="depthImage">Handle to input depth image.</param>
            <param name="camera">Geometry in which depth map was computed.</param>
            <param name="xyzImage">Handle to output xyz image.</param>
            <returns>
            <see cref="F:K4AdotNet.NativeCallResults.Result.Succeeded"/> if <paramref name="xyzImage"/> was successfully written
            and <see cref="F:K4AdotNet.NativeCallResults.Result.Failed"/> otherwise.
            </returns>
            <remarks>
            <paramref name="depthImage"/> must be of format <see cref="F:K4AdotNet.Sensor.ImageFormat.Depth16"/>.
            
            The <paramref name="camera"/> parameter tells the function what the perspective of the <paramref name="depthImage"/> is.
            If the <paramref name="depthImage"/> was captured directly from the depth camera, the value should be <see cref="F:K4AdotNet.Sensor.CalibrationGeometry.Depth"/>.
            If the <paramref name="depthImage"/> is the result of a transformation into the color camera's coordinate space using
            <see cref="M:K4AdotNet.Sensor.NativeApi.TransformationDepthImageToColorCamera(K4AdotNet.NativeHandles.TransformationHandle,K4AdotNet.NativeHandles.ImageHandle,K4AdotNet.NativeHandles.ImageHandle)"/>,
            the value should be <see cref="F:K4AdotNet.Sensor.CalibrationGeometry.Color"/>.
            
            The format of <paramref name="xyzImage"/> must be <see cref="F:K4AdotNet.Sensor.ImageFormat.Custom"/>. The width and height of <paramref name="xyzImage"/> must match the
            width and height of <paramref name="depthImage"/>. <paramref name="xyzImage"/> must have a stride in bytes of at least 6 times its width in pixels.
            
            Each pixel of the <paramref name="xyzImage"/> consists of three <see cref="T:System.Int16"/> values, totaling 6 bytes. The three <see cref="T:System.Int16"/> values are the
            X, Y, and Z values of the point.
            
            <paramref name="xyzImage"/> should be created by the caller using <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreate(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,K4AdotNet.NativeHandles.ImageHandle@)"/>
            or <see cref="M:K4AdotNet.Sensor.NativeApi.ImageCreateFromBuffer(K4AdotNet.Sensor.ImageFormat,System.Int32,System.Int32,System.Int32,System.IntPtr,System.UIntPtr,K4AdotNet.Sensor.NativeApi.MemoryDestroyCallback,System.IntPtr,K4AdotNet.NativeHandles.ImageHandle@)"/>.
            </remarks>
        </member>
        <member name="T:K4AdotNet.Sensor.Transformation">
            <summary>
            Azure Kinect transformation functionality.
            Can be used to transform images and depth maps between cameras and to reproject depth map to 3D space.
            It uses <see cref="P:K4AdotNet.Sensor.Transformation.Calibration"/> data for transformations.
            </summary>
        </member>
        <member name="M:K4AdotNet.Sensor.Transformation.#ctor(K4AdotNet.Sensor.Calibration@)">
            <summary>
            Creates transformation object for a give calibration data.
            </summary>
            <param name="calibration">Camera calibration data.</param>
            <remarks><para>
            Each transformation instance requires some pre-computed resources to be allocated,
            which are retained until the call of <see cref="M:K4AdotNet.Sensor.Transformation.Dispose"/> method.
            </para><para>
            <see cref="F:K4AdotNet.Sdk.DEPTHENGINE_DLL_NAME"/> library is required for this functionality.
            </para></remarks>
            <exception cref="T:System.InvalidOperationException">Something wrong with calibration data or <see cref="F:K4AdotNet.Sdk.DEPTHENGINE_DLL_NAME"/> library cannot be loaded.</exception>
            <seealso cref="M:K4AdotNet.Sensor.Transformation.Dispose"/>
        </member>
        <member name="M:K4AdotNet.Sensor.Transformation.Dispose">
            <summary>
            Call this method to free all unmanaged resources associated with current instance.
            </summary>
            <seealso cref="E:K4AdotNet.Sensor.Transformation.Disposed"/>
            <seealso cref="P:K4AdotNet.Sensor.Transformation.IsDisposed"/>
        </member>
        <member name="P:K4AdotNet.Sensor.Transformation.IsDisposed">
            <summary>Gets a value indicating whether the object has been disposed of.</summary>
            <seealso cref="M:K4AdotNet.Sensor.Transformation.Dispose"/>
        </member>
        <member name="E:K4AdotNet.Sensor.Transformation.Disposed">
            <summary>Raised on object disposing (only once).</summary>
            <seealso cref="M:K4AdotNet.Sensor.Transformation.Dispose"/>
        </member>
        <member name="P:K4AdotNet.Sensor.Transformation.Calibration">
            <summary>Calibration data for which this transformation was created.</summary>
        </member>
        <member name="P:K4AdotNet.Sensor.Transformation.DepthMode">
            <summary>Depth mode for which this transformation was created.</summary>
        </member>
        <member name="P:K4AdotNet.Sensor.Transformation.ColorResolution">
            <summary>Resolution of color camera for which this transformation was created.</summary>
        </member>
        <member name="M:K4AdotNet.Sensor.Transformation.DepthImageToColorCamera(K4AdotNet.Sensor.Image,K4AdotNet.Sensor.Image)">
            <summary>Transforms the depth map into the geometry of the color camera.</summary>
            <param name="depthImage">Input depth map to be transformed. Not <see langword="null"/>. Must have resolution of depth camera.</param>
            <param name="transformedDepthImage">Output depth image. Not <see langword="null"/>. Must have resolution of color camera.</param>
            <remarks>
            This produces a depth image for which each pixel matches the corresponding pixel coordinates of the color camera.
            The contents <paramref name="transformedDepthImage"/> will be filled with the depth values derived from <paramref name="depthImage"/> in the color
            camera's coordinate space.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="depthImage"/> is <see langword="null"/> or <paramref name="transformedDepthImage"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="depthImage"/> or <paramref name="transformedDepthImage"/> has invalid format or resolution.</exception>
            <exception cref="T:System.InvalidOperationException">Failed to transform specified depth image to color camera.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Transformation.DepthImageToColorCameraCustom(K4AdotNet.Sensor.Image,K4AdotNet.Sensor.Image,K4AdotNet.Sensor.Image,K4AdotNet.Sensor.Image,K4AdotNet.Sensor.TransformationInterpolation,System.Int32)">
            <summary>Transforms the depth map into the geometry of the color camera.</summary>
            <param name="depthImage">Input depth map to be transformed. Not <see langword="null"/>. Must have resolution of depth camera.</param>
            <param name="customImage">Input custom image to be transformed. In <see cref="F:K4AdotNet.Sensor.ImageFormat.Custom8"/> or <see cref="F:K4AdotNet.Sensor.ImageFormat.Custom16"/> format. Not <see langword="null"/>. Must have resolution of depth camera.</param>
            <param name="transformedDepthImage">Output depth image. Not <see langword="null"/>. Must have resolution of color camera.</param>
            <param name="transformedCustomImage">Output custom image. Not <see langword="null"/>. Must have resolution of color camera and be of the same format as <paramref name="customImage"/>.</param>
            <param name="interpolation">
            Parameter that controls how pixels in <paramref name="customImage"/> should be interpolated when transformed to color camera space.
            <see cref="F:K4AdotNet.Sensor.TransformationInterpolation.Linear"/> if linear interpolation should be used.
            <see cref="F:K4AdotNet.Sensor.TransformationInterpolation.Nearest"/> if nearest neighbor interpolation should be used.
            </param>
            <param name="invalidCustomValue">
            Defines the custom image pixel value that should be written to <paramref name="transformedCustomImage"/> in case the corresponding
            depth pixel can not be transformed into the color camera space.
            </param>
            <remarks><para>
            This produces a depth image and a corresponding custom image for which each pixel matches the corresponding
            pixel coordinates of the color camera.
            </para><para>
            <paramref name="depthImage"/> and <paramref name="transformedDepthImage"/> must be of format <see cref="F:K4AdotNet.Sensor.ImageFormat.Depth16"/>.
            </para><para>
            <paramref name="customImage"/> and <paramref name="transformedCustomImage"/> must be of format <see cref="F:K4AdotNet.Sensor.ImageFormat.Custom8"/> or
            <see cref="F:K4AdotNet.Sensor.ImageFormat.Custom16"/>.
            </para><para>
            The contents <paramref name="transformedDepthImage"/> will be filled with the depth values derived from <paramref name="depthImage"/> in the color
            camera's coordinate space.
            </para><para>
            The contents <paramref name="transformedCustomImage"/> will be filled with the values derived from <paramref name="customImage"/> in the color
            camera's coordinate space.
            </para><para>
            Using linear interpolation could create new values to <paramref name="transformedCustomImage"/> which do no exist in <paramref name="customImage"/>.
            Setting <paramref name="interpolation"/> to <see cref="F:K4AdotNet.Sensor.TransformationInterpolation.Nearest"/> will prevent this from happening but will result in less
            smooth image.
            </para></remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="depthImage"/> is <see langword="null"/>
            or <paramref name="customImage"/> is <see langword="null"/>
            or <paramref name="transformedDepthImage"/> is <see langword="null"/>
            or <paramref name="transformedCustomImage"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="depthImage"/> or <paramref name="customImage"/> or <paramref name="transformedDepthImage"/> or <paramref name="transformedCustomImage"/>
            has invalid format or resolution.
            </exception>
            <exception cref="T:System.InvalidOperationException">Failed to transform specified depth and custom images to color camera.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Transformation.ColorImageToDepthCamera(K4AdotNet.Sensor.Image,K4AdotNet.Sensor.Image,K4AdotNet.Sensor.Image)">
            <summary>Transforms a color image into the geometry of the depth camera.</summary>
            <param name="depthImage">Input depth map. Not <see langword="null"/>. Must have resolution of depth camera.</param>
            <param name="colorImage">Input color image to be transformed. Not <see langword="null"/>. Must have resolution of color camera.</param>
            <param name="transformedColorImage">Output color image. Not <see langword="null"/>. Must have resolution of depth camera.</param>
            <remarks><para>
            This produces a color image for which each pixel matches the corresponding pixel coordinates of the depth camera.
            </para><para>
            <paramref name="depthImage"/> and <paramref name="colorImage"/> need to represent the same moment in time. The depth data will be applied to the
            color image to properly warp the color data to the perspective of the depth camera.
            </para><para>
            <paramref name="depthImage"/> must be of type <see cref="F:K4AdotNet.Sensor.ImageFormat.Depth16"/>. <paramref name="colorImage"/> must be of format
            <see cref="F:K4AdotNet.Sensor.ImageFormat.ColorBgra32"/>.
            </para><para>
            <paramref name="transformedColorImage"/> image must be of format <see cref="F:K4AdotNet.Sensor.ImageFormat.ColorBgra32"/>.
            </para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="depthImage"/> is <see langword="null"/> or <paramref name="colorImage"/> is <see langword="null"/> or <paramref name="transformedColorImage"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="depthImage"/> or <paramref name="colorImage"/> or <paramref name="transformedColorImage"/> has invalid format or resolution.</exception>
            <exception cref="T:System.InvalidOperationException">Failed to transform specified color image to depth camera.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
        </member>
        <member name="M:K4AdotNet.Sensor.Transformation.DepthImageToPointCloud(K4AdotNet.Sensor.Image,K4AdotNet.Sensor.CalibrationGeometry,K4AdotNet.Sensor.Image)">
            <summary>Transforms the depth image into 3 planar images representing X, Y and Z-coordinates of corresponding 3D points.</summary>
            <param name="depthImage">Input depth image to be transformed to point cloud. Not <see langword="null"/>. Must have resolution.</param>
            <param name="camera">Geometry in which depth map was computed (<see cref="F:K4AdotNet.Sensor.CalibrationGeometry.Depth"/> or <see cref="F:K4AdotNet.Sensor.CalibrationGeometry.Color"/>).</param>
            <param name="xyzImage">Output XYZ image for point cloud data. Not <see langword="null"/>. Must have resolution of <paramref name="camera"/> camera.</param>
            <remarks><para>
            <paramref name="depthImage"/> must be of format <see cref="F:K4AdotNet.Sensor.ImageFormat.Depth16"/>.
            </para><para>
            The <paramref name="camera"/> parameter tells the function what the perspective of the <paramref name="depthImage"/> is.
            If the <paramref name="depthImage"/> was captured directly from the depth camera, the value should be <see cref="F:K4AdotNet.Sensor.CalibrationGeometry.Depth"/>.
            If the <paramref name="depthImage"/> is the result of a transformation into the color camera's coordinate space using
            <see cref="M:K4AdotNet.Sensor.Transformation.DepthImageToColorCamera(K4AdotNet.Sensor.Image,K4AdotNet.Sensor.Image)"/>, the value should be <see cref="F:K4AdotNet.Sensor.CalibrationGeometry.Color"/>.
            </para><para>
            The format of <paramref name="xyzImage"/> must be <see cref="F:K4AdotNet.Sensor.ImageFormat.Custom"/>. The width and height of <paramref name="xyzImage"/> must match the
            width and height of <paramref name="depthImage"/>. <paramref name="xyzImage"/> must have a stride in bytes of at least 6 times its width in pixels.
            </para><para>
            Each pixel of the <paramref name="xyzImage"/> consists of three <see cref="T:System.Int16"/> values, totaling 6 bytes. The three <see cref="T:System.Int16"/> values are the
            X, Y, and Z values of the point.
            </para></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="camera"/> is not a camera.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="depthImage"/> is <see langword="null"/> or <paramref name="xyzImage"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="depthImage"/> or <paramref name="xyzImage"/> has invalid format or resolution.</exception>
            <exception cref="T:System.InvalidOperationException">Failed to transform specified depth image to point cloud.</exception>
            <exception cref="T:System.ObjectDisposedException">This method cannot be called for disposed object.</exception>
        </member>
        <member name="T:K4AdotNet.Sensor.TransformationInterpolation">
            <summary>Transformation interpolation type.</summary>
            <seealso cref="M:K4AdotNet.Sensor.Transformation.DepthImageToColorCameraCustom(K4AdotNet.Sensor.Image,K4AdotNet.Sensor.Image,K4AdotNet.Sensor.Image,K4AdotNet.Sensor.Image,K4AdotNet.Sensor.TransformationInterpolation,System.Int32)"/>
        </member>
        <member name="F:K4AdotNet.Sensor.TransformationInterpolation.Nearest">
            <summary>Nearest neighbor interpolation.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.TransformationInterpolation.Linear">
            <summary>Linear interpolation.</summary>
        </member>
        <member name="T:K4AdotNet.Sensor.WiredSyncMode">
            <summary>Synchronization mode when connecting two or more devices together.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.WiredSyncMode.Standalone">
            <summary>Neither 'Sync In' or 'Sync Out' connections are used.</summary>
        </member>
        <member name="F:K4AdotNet.Sensor.WiredSyncMode.Master">
            <summary>The 'Sync Out' jack is enabled and synchronization data it driven out the connected wire.</summary>
            <remarks>
            While in master mode the color camera must be enabled as part of the
            multi device sync signaling logic. Even if the color image is not needed, the color
            camera must be running.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Sensor.WiredSyncMode.Subordinate">
            <summary>
            The 'Sync In' jack is used for synchronization and 'Sync Out' is driven for the
            next device in the chain. 'Sync Out' is a mirror of 'Sync In' for this mode.
            </summary>
        </member>
        <member name="T:K4AdotNet.Timeout">
            <summary>32-bit timeout value in milliseconds. Used in API to define timeouts to wait.</summary>
            <remarks>
            Actually, this structure is an simple wrapper of <see cref="T:System.Int32"/> type.
            And <see cref="T:K4AdotNet.Timeout"/> value can be smoothly converted to/from <see cref="T:System.Int32"/> and <see cref="T:System.TimeSpan"/> values for convenience of usage in your code.
            </remarks>
        </member>
        <member name="F:K4AdotNet.Timeout.ValueMs">
            <summary>Value in milliseconds. Should be of <see cref="T:System.UInt32"/> type but for CLS-compatibility it is declared is <see cref="T:System.Int32"/>.</summary>
            <remarks><para>
            There are two special values:
            0 - means "no wait" (see <see cref="F:K4AdotNet.Timeout.NoWait"/>),
            -1 (that is <see cref="F:System.UInt32.MaxValue"/>) - means infinite waiting (see <see cref="F:K4AdotNet.Timeout.Infinite"/>).
            </para><para>
            This structure is an wrapper around this value.
            </para></remarks>
        </member>
        <member name="M:K4AdotNet.Timeout.#ctor(System.Int32)">
            <summary>Creates instance from integer value in milliseconds.</summary>
            <param name="valueMs">Timeout in milliseconds, or -1 for infinite timeout (see <see cref="F:K4AdotNet.Timeout.Infinite"/>).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="valueMs"/> is less than -1.</exception>
        </member>
        <member name="M:K4AdotNet.Timeout.#ctor(System.TimeSpan)">
            <summary>Creates instance from <see cref="T:System.TimeSpan"/> value.</summary>
            <param name="value">Timeout specified as <see cref="T:System.TimeSpan"/> value. Use <see cref="F:System.TimeSpan.MaxValue"/> to specify infinite timeout (see <see cref="F:K4AdotNet.Timeout.Infinite"/>).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="value"/> is negative.</exception>
        </member>
        <member name="M:K4AdotNet.Timeout.ToTimeSpan">
            <summary>Converts timeout to <see cref="T:System.TimeSpan"/> value.</summary>
            <returns>Corresponding <see cref="T:System.TimeSpan"/> value. For infinite timeout (see <see cref="F:K4AdotNet.Timeout.Infinite"/>) this method returns <see cref="F:System.TimeSpan.MaxValue"/>.</returns>
        </member>
        <member name="P:K4AdotNet.Timeout.TotalSeconds">
            <summary>The total number of seconds represented by this instance.</summary>
        </member>
        <member name="P:K4AdotNet.Timeout.TotalMilliseconds">
            <summary>The total number of milliseconds represented by this instance.</summary>
        </member>
        <member name="M:K4AdotNet.Timeout.Equals(K4AdotNet.Timeout)">
            <summary>Equality exactly like <see cref="T:System.Int32"/> type has.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns><see langword="true"/> if values are equal.</returns>
        </member>
        <member name="M:K4AdotNet.Timeout.Equals(System.TimeSpan)">
            <summary>Equality with another value specified as <see cref="T:System.TimeSpan"/>.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns><see langword="true"/> if values are equal.</returns>
        </member>
        <member name="M:K4AdotNet.Timeout.Equals(System.Int32)">
            <summary>Equality exactly like <see cref="T:System.Int32"/> type has.</summary>
            <param name="otherMs">Another value in milliseconds to be compared with this one.</param>
            <returns><see langword="true"/> if values are equal.</returns>
        </member>
        <member name="M:K4AdotNet.Timeout.CompareTo(K4AdotNet.Timeout)">
            <summary>Two values comparison exactly like <see cref="T:System.UInt32"/> type has.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            For details see <see cref="M:System.UInt32.CompareTo(System.UInt32)"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)">
            <summary>Two values comparison.</summary>
            <param name="other">Another value to be compared with this one.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            For details see <see cref="M:System.UInt32.CompareTo(System.UInt32)"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Timeout.CompareTo(System.Int32)">
            <summary>Two values comparison exactly like <see cref="T:System.UInt32"/> type has.</summary>
            <param name="otherMs">Another value in milliseconds to be compared with this one.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            For details see <see cref="M:System.UInt32.CompareTo(System.UInt32)"/>.
            </returns>
        </member>
        <member name="M:K4AdotNet.Timeout.CompareTo(System.Object)">
            <summary>Can compare current instance with <see cref="T:K4AdotNet.Timeout"/>, <see cref="T:System.TimeSpan"/> and <see cref="T:System.IConvertible"/> value.</summary>
            <param name="obj">Value to be compared with this one.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            For details see <see cref="M:System.UInt32.CompareTo(System.UInt32)"/>.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not comparable with this one.</exception>
        </member>
        <member name="M:K4AdotNet.Timeout.ToString(System.String,System.IFormatProvider)">
            <summary>String representation of current instance.</summary>
            <param name="format">The format to use or <see langword="null"/> for default format.</param>
            <param name="formatProvider">The provider to use to format the value or <see langword="null"/> to obtain the numeric format information from the current locale setting.</param>
            <returns><c>{value} ms</c> or <c>Infinite</c> string or <c>NoWait</c> string.</returns>
        </member>
        <member name="M:K4AdotNet.Timeout.Equals(System.Object)">
            <summary>Overloads <see cref="M:System.Object.Equals(System.Object)"/> to be consistent with <see cref="M:K4AdotNet.Timeout.Equals(K4AdotNet.Timeout)"/>.</summary>
            <param name="obj">Object to be compared with this instance.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> can be cast to <see cref="T:K4AdotNet.Microseconds32"/> and result is equal to this one.</returns>
        </member>
        <member name="M:K4AdotNet.Timeout.GetHashCode">
            <summary>Calculates hash code.</summary>
            <returns>Hash code. Consistent with overridden equality.</returns>
        </member>
        <member name="M:K4AdotNet.Timeout.ToString">
            <summary>String representation of current instance.</summary>
            <returns><c>{value} ms</c> or <c>Infinite</c> string or <c>NoWait</c> string.</returns>
        </member>
        <member name="M:K4AdotNet.Timeout.op_Equality(K4AdotNet.Timeout,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.Equals(K4AdotNet.Timeout)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.Equals(K4AdotNet.Timeout)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_Inequality(K4AdotNet.Timeout,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.Equals(K4AdotNet.Timeout)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.Equals(K4AdotNet.Timeout)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_LessThan(K4AdotNet.Timeout,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(K4AdotNet.Timeout)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(K4AdotNet.Timeout)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_LessThanOrEqual(K4AdotNet.Timeout,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(K4AdotNet.Timeout)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(K4AdotNet.Timeout)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_GreaterThan(K4AdotNet.Timeout,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(K4AdotNet.Timeout)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(K4AdotNet.Timeout)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_GreaterThanOrEqual(K4AdotNet.Timeout,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(K4AdotNet.Timeout)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(K4AdotNet.Timeout)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_Equality(K4AdotNet.Timeout,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.Equals(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.Equals(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_Inequality(K4AdotNet.Timeout,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.Equals(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.Equals(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_LessThan(K4AdotNet.Timeout,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_LessThanOrEqual(K4AdotNet.Timeout,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_GreaterThan(K4AdotNet.Timeout,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_GreaterThanOrEqual(K4AdotNet.Timeout,System.TimeSpan)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_Equality(System.TimeSpan,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.Equals(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.Equals(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_Inequality(System.TimeSpan,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.Equals(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.Equals(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_LessThan(System.TimeSpan,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_LessThanOrEqual(System.TimeSpan,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_GreaterThan(System.TimeSpan,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_GreaterThanOrEqual(System.TimeSpan,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than on equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(System.TimeSpan)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_Equality(K4AdotNet.Timeout,System.Int32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.Equals(System.Int32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightMs">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="rightMs"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.Equals(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_Inequality(K4AdotNet.Timeout,System.Int32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.Equals(System.Int32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightMs">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="rightMs"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.Equals(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_LessThan(K4AdotNet.Timeout,System.Int32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(System.Int32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightMs">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="rightMs"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_LessThanOrEqual(K4AdotNet.Timeout,System.Int32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(System.Int32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightMs">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="rightMs"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_GreaterThan(K4AdotNet.Timeout,System.Int32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(System.Int32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightMs">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="rightMs"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_GreaterThanOrEqual(K4AdotNet.Timeout,System.Int32)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(System.Int32)"/>.</summary>
            <param name="left">Left part of operator.</param>
            <param name="rightMs">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="rightMs"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_Equality(System.Int32,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.Equals(System.Int32)"/>.</summary>
            <param name="leftMs">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftMs"/> is equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.Equals(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_Inequality(System.Int32,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.Equals(System.Int32)"/>.</summary>
            <param name="leftMs">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftMs"/> is not equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.Equals(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_LessThan(System.Int32,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(System.Int32)"/>.</summary>
            <param name="leftMs">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftMs"/> is less than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_LessThanOrEqual(System.Int32,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(System.Int32)"/>.</summary>
            <param name="leftMs">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftMs"/> is less than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_GreaterThan(System.Int32,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(System.Int32)"/>.</summary>
            <param name="leftMs">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftMs"/> is greater than <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_GreaterThanOrEqual(System.Int32,K4AdotNet.Timeout)">
            <summary>To be consistent with <see cref="M:K4AdotNet.Timeout.CompareTo(System.Int32)"/>.</summary>
            <param name="leftMs">Left part of operator.</param>
            <param name="right">Right part of operator.</param>
            <returns><see langword="true"/> if <paramref name="leftMs"/> is greater than or equal to <paramref name="right"/>.</returns>
            <seealso cref="M:K4AdotNet.Timeout.CompareTo(System.Int32)"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_Implicit(K4AdotNet.Timeout)~System.TimeSpan">
            <summary>Implicit conversion to <see cref="T:System.TimeSpan"/>.</summary>
            <param name="value">Value to be converted to <see cref="T:System.TimeSpan"/>.</param>
            <seealso cref="M:K4AdotNet.Timeout.ToTimeSpan"/>
        </member>
        <member name="M:K4AdotNet.Timeout.op_Implicit(System.TimeSpan)~K4AdotNet.Timeout">
            <summary>Implicit conversion from <see cref="T:System.TimeSpan"/>.</summary>
            <param name="value">Value to be converted to <see cref="T:K4AdotNet.Microseconds32"/>.</param>
        </member>
        <member name="M:K4AdotNet.Timeout.op_Implicit(System.Int32)~K4AdotNet.Timeout">
            <summary>Implicit conversion from <see cref="T:System.Int32"/>.</summary>
            <param name="valueMs">Value in milliseconds to be converted to <see cref="T:K4AdotNet.Timeout"/>.</param>
        </member>
        <member name="M:K4AdotNet.Timeout.FromSeconds(System.Double)">
            <summary>Creates instance of <see cref="T:K4AdotNet.Timeout"/> from seconds.</summary>
            <param name="timeoutSec">Value in seconds.</param>
            <returns>Created value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="timeoutSec"/> is less than zero.</exception>
        </member>
        <member name="M:K4AdotNet.Timeout.FromMilliseconds(System.Int32)">
            <summary>Creates instance of <see cref="T:K4AdotNet.Timeout"/> from milliseconds.</summary>
            <param name="timeoutMs">Value in milliseconds.</param>
            <returns>Created value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="timeoutMs"/> is less than zero.</exception>
        </member>
        <member name="F:K4AdotNet.Timeout.NoWait">
            <summary>Special timeout value: non blocking call.</summary>
        </member>
        <member name="F:K4AdotNet.Timeout.Infinite">
            <summary>Special timeout value: infinite waiting.</summary>
        </member>
    </members>
</doc>
